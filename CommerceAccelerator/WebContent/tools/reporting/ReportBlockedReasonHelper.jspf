<!-- ========================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (c) Copyright IBM Corp. 2001, 2002

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 ===========================================================================-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">

<%@page import="java.util.*" %>
<%@page import="com.ibm.commerce.command.CommandContext"%>
<%@page import="com.ibm.commerce.server.ECConstants"%>
<%@page import="com.ibm.commerce.ordermanagement.beans.BlockReasonDescriptionDataBean" %>
<%@page import="com.ibm.commerce.exception.ExceptionHandler" %>

<jsp:useBean id="blockReasonDescriptionDataBean" scope="request" class="com.ibm.commerce.ordermanagement.beans.BlockReasonDescriptionDataBean">
</jsp:useBean>

<%!
  
private String generateBlockReasonSelection(HttpServletRequest request, Hashtable reportsRB, String container, String title, String allReasons)
{

   CommandContext BlockReasonHelperCC = (CommandContext) request.getAttribute(ECConstants.EC_COMMANDCONTEXT);

   Iterator iter = null;
   TreeMap sortedMap = new TreeMap();

         
   try {
      
      sortedMap.put(reportsRB.get(allReasons), "ALL");

      Hashtable blockReasonsAndCodes =  BlockReasonDescriptionDataBean.getBlockReasonsForLanguage(BlockReasonHelperCC.getLanguageId());
	  Enumeration enumerateElements = blockReasonsAndCodes.keys();
      
      while (enumerateElements.hasMoreElements()) {
       
      	String blockReasonDescription = (String)enumerateElements.nextElement();
      	String blockReasonID = (String) blockReasonsAndCodes.get(blockReasonDescription);
       	
      	sortedMap.put(blockReasonDescription, blockReasonID);
      
      }

      iter = sortedMap.keySet().iterator();
   } catch (Exception e) {
      e.printStackTrace();
   }

   String resulttitle = "";
   
   if (iter == null) {
      // System.out.println("Reporting Framework: No Reasons available for selection.");
      return "";
   }
    
   if (title != null)  resulttitle =
                                     "    <TR>\n" +
                                     "       <TD COLSPAN=9 ALIGN=LEFT VALIGN=CENTER HEIGHT=32>" + reportsRB.get(title) + "</TD>\n" +
                                     "    </TR>\n";

   String result = resulttitle + "<FORM NAME=" + container + ">\n <SELECT NAME=ReasonSelection ID=reasonSelection width=100> \n";
   
   while (iter.hasNext()) {
      String desc = (String) iter.next();
      String reasonCode = (String) sortedMap.get(desc);
      result = result + "   <OPTION value=" + reasonCode + ">" + desc + "</OPTION> \n";
   }
   
   result += " </SELECT> \n</FORM>";
   
   return result;
}

%>
 
<SCRIPT>

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // save function for reason
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function saveReason(container)
   {
      with (document.forms[container]) {
         parent.put("reasonSelectionIndex", ReasonSelection.selectedIndex);
      }
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // initialize function for reason
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function onLoadReasons(container)
   {
      var curIndex = parent.get("reasonSelectionIndex", null);

      if (curIndex != null) {
         with (document.forms[container]) {
            ReasonSelection.selectedIndex  = curIndex;
         }
      }
      
      return;
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // This function returns the reason 
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function blockReason(container)
   {
      with (document.forms[container]) {
         return ReasonSelection[ReasonSelection.selectedIndex].value;
      }
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // This function returns the text associated with the reason code
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function blockReasonText(container)
   {
      with (document.forms[container]) {
         return ReasonSelection[ReasonSelection.selectedIndex].text;
      }
   }


</SCRIPT>
