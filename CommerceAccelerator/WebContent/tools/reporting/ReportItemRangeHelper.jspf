<!-- ========================================================================
  Licensed Materials - Property of IBM
   
  WebSphere Commerce
   
  (c) Copyright IBM Corp. 2001, 2002
   
  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
   -------------------------------------------------------------------
    ReportNumberOfDaysHelper.jsp
 ===========================================================================-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">

<%@page import="java.util.*" %>
<%@page import="com.ibm.commerce.command.CommandContext"%>
<%@page import="com.ibm.commerce.server.ECConstants"%>

<%
   CommandContext itemRangeHelperCC = (CommandContext) request.getAttribute(ECConstants.EC_COMMANDCONTEXT);
   Hashtable      itemRangeHelperRB = (Hashtable)com.ibm.commerce.tools.util.ResourceDirectory.lookup("reporting.reportStrings", itemRangeHelperCC.getLocale());

%>

<%!
private String generateFromAndToRange(HttpServletRequest request, Hashtable reportsRB, String container, String title, String fromRange, String toRange)
{
 



   String resulttitle = "";
   String result = "";

	try {

   	   CommandContext itemRangeHelperCC = (CommandContext) request.getAttribute(ECConstants.EC_COMMANDCONTEXT);
	   Hashtable      itemRangeHelperRB = (Hashtable)com.ibm.commerce.tools.util.ResourceDirectory.lookup("reporting.reportingString", itemRangeHelperCC.getLocale());
				
	
	   if (title != null)  resulttitle = 
	                                     "    <TR>\n" +
	                                     "       <TD  ALIGN=LEFT VALIGN=CENTER HEIGHT=32>\n" + reportsRB.get(title) + "</TD>\n" +
	                                     "    </TR>\n";
	
	
	   result        = "<FORM name=" + container + ">\n" +
	                   "  <TABLE CELLPADDING=0 CELLSPACING=0>\n" + resulttitle + 
	                   "    <TR>\n" + 
	                   "      <TD>\n" +
	                   "          " + itemRangeHelperRB.get(fromRange) + "<INPUT TYPE=TEXT NAME=fromRange SIZE=20 MAXLENGTH=20></INPUT>\n" + " " + itemRangeHelperRB.get(toRange) + "<INPUT TYPE=TEXT NAME=toRange SIZE=20 MAXLENGTH=20></INPUT>\n" +
	                   "      </TD>\n" +
	                   "    </TR>\n" +
	                   "  </TABLE>\n" + 
	                   "</FORM>\n";
                   
  	} catch (Exception e) {
      e.printStackTrace();
   }
     
   return result;
}

%>

<SCRIPT>

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // Load any data from the parent (if it exists)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function onLoadItemRange(container) 
   {
      var myContainer = parent.get(container, null);

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      // If this is the first time then initialize the container to 0 days waited
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      if (myContainer == null) {
         myContainer = new Object();
         myContainer.fromRange = 0;
         myContainer.toRange = 0;
         parent.put(container, myContainer);
      }

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      // Load the previously saved days waited into input text box
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      var fromRange = myContainer.fromRange;
      var toRange   = myContainer.toRange;
      
      if (fromRange != null && toRange != null) {
         document.forms[container].fromRange.value = fromRange;
         document.forms[container].toRange.value   = toRange;
      }
      return;
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // Save the selected products for when returning
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function saveItemRange(container) 
   {
      myContainer = parent.get(container,null);
      if (myContainer == null) return;
      myContainer.fromRange = document.forms[container].fromRange.value ;
      myContainer.toRange = document.forms[container].toRange.value ;
      parent.put(container, myContainer);
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // Validate that some items have been chosen if the "some items" radio is checked
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function validateFromAndToRange(container) 
   {
      
      with (document.forms[container]) {
         if (fromRange.value == null || !isValidPositiveInteger(fromRange.value)) {
            parent.alertDialog("<%=UIUtil.toJavaScript(itemRangeHelperRB.get("ItemRangeHelperFromInvalidNumber"))%>");
            return false;
         }
      }
      
      with (document.forms[container]) {
         if (toRange.value == null || !isValidPositiveInteger(toRange.value)) {
            parent.alertDialog("<%=UIUtil.toJavaScript(itemRangeHelperRB.get("ItemRangeHelperToInvalidNumber"))%>");
            return false;
         }
      }
      
      with (document.forms[container]) {
      
         if (isToNumberLessThanFromNumber(fromRange.value, toRange.value)) {
            parent.alertDialog("<%=UIUtil.toJavaScript(itemRangeHelperRB.get("ItemRangeHelperToRangeLessThanFrom"))%>");         
            return false;
          
         }
      }
      
      return true;
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // Return from item range value
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function returnFromRange(container) {
      return document.forms[container].fromRange.value;
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   // Return to item range value
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   function returnToRange(container) {
      return document.forms[container].toRange.value;
   }



</SCRIPT>


