<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<Definitions>
 
	<!--- 
		This class declares a service parameter for creating a new Sales Catalog Group.  It resolves the catalog ID
		from the parent sales catalog group or parent sales catalog and ensures that all parents have
		the same catalog ID.
	-->
	<ServiceParam classDefinition="true" definitionName="cmc/catalog/SalesCatalogIdServiceParam" parentProperty="true">
		<dependency localName="CatalogUtilities" moduleName="cmc/catalog/CatalogUtilities"/>
		
		<!--- 
			@keywords private
			Returns all the resolved value for the specified model object.
			@param cmc/foundation/ModelObject o: the model object
			@param boolean trim: "true" if we should check for trimable properties and trim them
			@return array: an array of the resolved values
		 -->
		<method args="o, trim, del" name="getValues">
			<![CDATA[
			if (typeof(trim) == "undefined") trim = false;
			if (typeof(del) == "undefined") del = null;
			var values = [];
			var catalogIds = [];
			var newCatalogs = [];
			CatalogUtilities.Singleton.resolveSalesCatalogs(o, catalogIds, newCatalogs, []);
			if (newCatalogs.length == 1 && catalogIds.length == 0) {
				values = [""];
			}
			else if (catalogIds.length == 1 && newCatalogs.length == 0) {
				values = catalogIds;
			}
			return values;
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the value source for the specified model object.
			@param cmc/foundation/ModelObject o: the model object
			@param cmc/foundation/EventHandler del delegate to call if the value source changes
			@return Object: the value source
		-->
		<method args="o, del" name="getValueSource">
			<![CDATA[
			if (typeof(del) == "undefined") del = null;
			var valueSource = null;
			var catalogIds = [];
			var newCatalogs = [];
			CatalogUtilities.Singleton.resolveSalesCatalogs(o, catalogIds, newCatalogs, []);
			if (newCatalogs.length == 1 && catalogIds.length == 0) {
				valueSource = newCatalogs[0].getProperty("catalogId");
			}
			return valueSource;
			]]>
		</method>
	</ServiceParam>
	
	<!--- 
		This class declares a service parameter for creating a new Sales Catalog Group.  It resolves the catalog storeId
		from the parent sales catalog group or parent sales catalog and ensures that all parents have
		the same catalog storeId.
	-->
	<ServiceParam classDefinition="true" definitionName="cmc/catalog/SalesCatalogStoreIdServiceParam" parentProperty="true">
		<dependency localName="CatalogUtilities" moduleName="cmc/catalog/CatalogUtilities"/>
		
		<!--- 
			@keywords private
			Returns all the resolved value for the specified model object.
			@param cmc/foundation/ModelObject o: the model object
			@param boolean trim: "true" if we should check for trimable properties and trim them
			@return array: an array of the resolved values
		 -->
		<method args="o, trim, del" name="getValues">
			<![CDATA[
			if (typeof(trim) == "undefined") trim = false;
			if (typeof(del) == "undefined") del = null;
			var values = [];
			var catalogStoreIds = [];
			var newCatalogs = [];
			CatalogUtilities.Singleton.resolveCatalogStoreIds(o, catalogStoreIds, newCatalogs, []);
			if (newCatalogs.length == 1 && catalogStoreIds.length == 0) {
				values = [""];
			}
			else if (catalogStoreIds.length == 1 && newCatalogs.length == 0) {
				values = catalogStoreIds;
			}
			return values;
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the value source for the specified model object.
			@param cmc/foundation/ModelObject o: the model object
			@param cmc/foundation/EventHandler del delegate to call if the value source changes
			@return Object: the value source
		-->
		<method args="o, del" name="getValueSource">
			<![CDATA[
			if (typeof(del) == "undefined") del = null;
			var valueSource = null;
			var catalogStoreIds = [];
			var newCatalogs = [];
			CatalogUtilities.Singleton.resolveCatalogStoreIds(o, catalogStoreIds, newCatalogs, []);
			if (newCatalogs.length == 1 && catalogStoreIds.length == 0) {
				valueSource = newCatalogs[0].getProperty("objectStoreId");
			}
			return valueSource;
			]]>
		</method>
	</ServiceParam>
	
	<!--- 
		This class declares a service parameter for creating a new Sales Catalog Group.  It resolves the catalog identifier
		from the parent sales catalog group or parent sales catalog and ensures that all parents have
		the same catalog identifier.
	-->
	<ServiceParam classDefinition="true" definitionName="cmc/catalog/SalesCatalogIdentifierServiceParam" parentProperty="true">
		<dependency localName="CatalogUtilities" moduleName="cmc/catalog/CatalogUtilities"/>
		
		<!--- 
			@keywords private
			Returns all the resolved value for the specified model object.
			@param cmc/foundation/ModelObject o: the model object
			@param boolean trim: "true" if we should check for trimable properties and trim them
			@return array: an array of the resolved values
		 -->
		<method args="o, trim, del" name="getValues">
			<![CDATA[
			if (typeof(trim) == "undefined") trim = false;
			if (typeof(del) == "undefined") del = null;
			var values = [];
			var catalogIdentifiers = [];
			var newCatalogs = [];
			CatalogUtilities.Singleton.resolveCatalogIdentifiers(o, catalogIdentifiers, newCatalogs, []);
			if (newCatalogs.length == 1 && catalogIdentifiers.length == 0) {
				values = [""];
			}
			else if (catalogIdentifiers.length == 1 && newCatalogs.length == 0) {
				values = catalogIdentifiers;
			}
			return values;
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the value source for the specified model object.
			@param cmc/foundation/ModelObject o: the model object
			@param cmc/foundation/EventHandler del delegate to call if the value source changes
			@return Object: the value source
		-->
		<method args="o, del" name="getValueSource">
			<![CDATA[
			if (typeof(del) == "undefined") del = null;
			var valueSource = null;
			var catalogIdentifiers = [];
			var newCatalogs = [];
			CatalogUtilities.Singleton.resolveCatalogIdentifiers(o, catalogIdentifiers, newCatalogs, []);
			if (newCatalogs.length == 1 && catalogIdentifiers.length == 0) {
				valueSource = newCatalogs[0].getProperty("identifier");
			}
			return valueSource;
			]]>
		</method>
	</ServiceParam>
	
	<!--- 
		This class checks that a sales catalog group or a sales catalog can be added to another sales catalog group.
		Sales catalog groups or a sales catalogs can only be added to a sales catalog groups that belongs to the same
		sales catalog.
		Also a category can't be its own parent.
	-->
	<ObjectCompatibilityCheck classDefinition="true" definitionName="cmc/catalog/SalesCatalogCollectionObjectCompatibilityCheck">
		<!--- @keywords private -->
		<method args="parentObject, childObject" name="isCompatible">
			<![CDATA[
			var result = true;
			var checkCategoryId = false;
			var childCatalogId = childObject.getPropertyValue("owningCatalog");
			var childCategoryId = childObject.getPropertyValue("identifier");
			var parentCatalogId = "";
			var parentCategoryId = "";
			if (parentObject.objectType == "SalesCatalog" || parentObject.objectType == "InheritedSalesCatalog") {
				parentCatalogId = parentObject.getPropertyValue("catalogId");
			}
			else {
				parentCatalogId = parentObject.getPropertyValue("owningCatalog");
				parentCategoryId = parentObject.getPropertyValue("identifier");
				checkCategoryId = true;
			}
			if (childCatalogId != "") {
				if (parentCatalogId == "") {
					result = false;
				}
				else {
					result = childCatalogId == parentCatalogId;
				}
			}
			if (result && checkCategoryId) {
				if (childCategoryId == "" && parentCategoryId == "") {
					result = false;
				}
				else {
					result = childCategoryId != parentCategoryId;
				}
			}
			return result;
			]]>
		</method>
	</ObjectCompatibilityCheck>
	
	<!--- 
		<p/>
		This class checks that a sales catalog group can be linked to another sales catalog group or a sales catalog. Sales catalog groups can
		only be linked to sales catalogs or sales catalog groups that belong to different sales catalogs.
		<p/>
	-->
	<ObjectCompatibilityCheck classDefinition="true" definitionName="cmc/catalog/SalesCatalogLinkObjectCompatibilityCheck">
		<!--- @keywords private -->
		<method args="parentObject, childObject" name="isCompatible">
			<![CDATA[
			var result = false;
			var childCatalogId = childObject.getPropertyValue("owningCatalog");
			var parentCatalogId = "";
			if (parentObject.objectType == "SalesCatalog" || parentObject.objectType == "InheritedSalesCatalog") {
				parentCatalogId = parentObject.getPropertyValue("catalogId");
			}
			else {
				parentCatalogId = parentObject.getPropertyValue("owningCatalog");
			}
			if (childCatalogId != "" && parentCatalogId != "") {
				result = childCatalogId != parentCatalogId;
			}
			return result;
			]]>
		</method>
	</ObjectCompatibilityCheck>
	
</Definitions>