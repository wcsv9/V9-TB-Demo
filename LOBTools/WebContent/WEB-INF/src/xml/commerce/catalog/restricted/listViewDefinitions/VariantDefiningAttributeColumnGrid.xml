<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<Definitions>
	
	<!---
		This class represents the Base Variant grid that displays Variants
		as well as their defining attributes.
		
		This class is used by the Variant widget cmc/catalog/PropertyVariantDefiningAttributesViewer in the properties view
		of a Variant, but shares code between the grid displaying Variants and the Variant defining
		attribute tab in the Variant properties view.
		
		The class 'cmc/catalog/VariantDefiningAttributeColumnGrid' extends off of this class and is used for the
		Variant list grid.
				
		This class attribute 'definingAttributeObjectPath' is overriden in the child class
		'cmc/catalog/VariantDefiningAttributeColumnGrid' to allow for the grid to navigate reference objects.
		
		The Variant grid will display 'ProductChildVariant' reference objects, whereas the Variant properties
		view will be displaying information for a 'Variant'.
		
		@keywords private
	-->
	<ObjectGrid classDefinition="true" definitionName="cmc/catalog/BaseVariantDefiningAttributeColumnGrid" preferenceKey="catBaseVariantDefiningAttributeColumnGrid">
		<dependency localName="VariantAttributeColumn" moduleName="cmc/catalog/VariantAttributeColumn"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<dependency localName="CatalogEntryDefiningAttributeModelObjectManager" moduleName="cmc/catalog/CatalogEntryDefiningAttributeModelObjectManager"/>
		<dependency localName="ModelUtil" moduleName="cmc/foundation/ModelUtil"/>
		<!---
			Stores the attribute columns representing Variant defining attributes.
			The objects in this array are of type 'cmc/catalog/VariantAttributeColumn'.
		-->
		<variable name="attributeColumns" value="${[]}"/>
		
		<!--- Sets the border size of the list. -->
		<variable name="listBorderSize" type="number" value="1"/>
		
		<!---
			Stores the attribute columns representing Variant defining attributes.
			The objects in this array are of type 'cmc/catalog/VariantAttributeColumn'.
			
			This pool is used for column re-use for performance.
		-->
		<variable name="attributeColumnsPool" value="${[]}"/>
		<!---
			This attribute represents the parent product (CMC object Product, InheritedProduct)
			for the Variant currently being viewed.
		-->		
		<variable name="productObject" value="${null}"/>
		<!---
			This attribute represents the object path the column will use to represent the object
			path of the attribute column.
			
			This default is set to 'VariantDefiningAttribute' for the class	'cmc/catalog/BaseVariantDefiningAttributeColumnGrid'.
			This attribute value is overridden in the class 'cmc/catalog/VariantAttributeColumn'.
			
			The Variant widget in the properties view will use the object path:
			'VariantReferenceDefiningAttributeDictionaryAttributeWithAllowedValues' and 
			'VariantReferenceInheritedDefiningAttributeDictionaryAttributeWithAllowedValues'
			for Attribute Dictionary.			
			
			The Variant widget for displaying Variants in a grid will use the following object paths.

			For Attribute Dictionary:
			'Variant/VariantReferenceDefiningAttributeDictionaryAttributeWithAllowedValues',
			'Variant/VariantReferenceInheritedDefiningAttributeDictionaryAttributeWithAllowedValue',
			'InheritedVariant/VariantReferenceDefiningAttributeDictionaryAttributeWithAllowedValues' and 
			'InheritedVariant/VariantReferenceInheritedDefiningAttributeDictionaryAttributeWithAllowedValues'.
		-->		
		<variable name="definingAttributeObjectPath" type="string" value=""/>
		
		
		<!---
			Initialization.
			
			@keywords private
		-->
		<handler name="oninit">
			<![CDATA[
			this.updateAttributeColumnsDel = new EventHandler.Class(this, "updateAttributeColumns");
			this.updateAttributeColumns();
			]]>
		</handler>
		
		<!---
			This method will cleanup delegates that are used throughout this class.
			
			@keywords private
		-->
		<method name="destroy">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "destroy");
			}
			this.updateAttributeColumnsDel.disconnectAll();
			delete this.updateAttributeColumnsDel;
			this.inherited(arguments);
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "destroy");
			}
			]]>
		</method>
		
		<!---
			This method will retrieve the value of the registered attribute object's
			property 'attrDisplaySequence'.
			
			This sequence will be used to display attribute columns in a
			particular order.
			
			Attributes with no sequence value will be given a default value of 0.
			
			@keywords private
		-->
		<method args="o" name="getAttributeObjectSequence">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "getAttributeObjectSequence", [o]);
			}
			var sequence = o.getPropertyValue("attrDisplaySequence");
			if (isNaN(sequence)) {
				sequence = 0;
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "getAttributeObjectSequence", sequence);
			}
			return sequence;
			]]>
		</method>
		
		<!---
			This method will compare the value of the registered attribute object's
			property 'attrDisplaySequence' to determine how the attribute column
			should be displayed.
			
			This sequence will be used to display attribute columns in a
			particular order.
			
			@keywords private
		-->
		<method args="o1, o2" name="compareAttributeObjects">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "compareAttributeObjects", [o1, o2]);
			}
			var o1Sequence = this.getAttributeObjectSequence(o1);
			var o2Sequence = this.getAttributeObjectSequence(o2);
			var retSequence = 0;
			if (o1Sequence > o2Sequence) {
				retSequence = 1;
			}
			else if (o1Sequence < o2Sequence) {
				retSequence = -1;
			}
			else {
				retSequence = 0;
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "compareAttributeObjects", retSequence);
			}
			return retSequence;
			]]>
		</method>
		
		<!---
			This method will return a set of attribute objects ordered
			by their display sequence.
						
			@keywords private
		-->
		<method args="objects" name="getOrderedObjects">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "getOrderedObjects");
			}
			var comparator = function(o1, o2) {
				return arguments.callee.grid.compareAttributeObjects(o1, o2);
			};
			comparator.grid = this;
			objects.sort(comparator);
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "getOrderedObjects", objects);
			}
			return objects;
			]]>
		</method>
		
		<!---
			This method will set the parent product object for Variant.
			
			@keywords private
		-->
		<method args="newProductObject" name="setProductObject">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "setProductObject", [newProductObject]);
			}
			if (this.productObject != newProductObject) {		
				this.productObject = newProductObject;	
				var vrt = this.parent.o;
				if(vrt && this.parent.o.newObject){
				var vrtRefAttrVal=vrt.getObjects("VariantReferenceDefiningAttributeDictionaryAttributeWithAllowedValues");
				vrtRefAttrVal = vrtRefAttrVal.concat(vrt.getObjects("VariantReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues"));
				vrtRefAttrVal = this.getOrderedObjects(vrtRefAttrVal);
				for (var i = 0; i < vrtRefAttrVal.length; i++) {
					var o = vrtRefAttrVal[i];
					o.release();
				}	
				}	
			}
			if (this.updateAttributeColumnsDel) {
				this.updateAttributeColumns();
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "setProductObject");
			}
			]]>
		</method>
		
		<!---
			This method will load all of the children and references for the registered product object
			and fetch all of its child attributes
			
			CMC Objects:
			CatalogEntryDefiningAttribute
			CatalogEntryReferenceDefiningAttributeDictionaryAttributeWithAllowedValues.
			CatalogEntryReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues
			
			Based on the attributes found, columns will be added to the grid.
			
			@keywords private
		-->
		<method args="e" name="updateAttributeColumns">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "updateAttributeColumns");
			}
			var refreshRequired = false;
			this.updateAttributeColumnsDel.disconnectAll();
			if (this.productObject) {
				this.updateAttributeColumnsDel.connect(this.productObject, "onchildObjects");
				var objDefinitions = [this.productObject.objectDefinition.getChildDefinition("CatalogEntryReferenceDefiningAttributeDictionaryAttributeWithAllowedValues"), this.productObject.objectDefinition.getChildDefinition("CatalogEntryReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues")];
				
				this.productObject.loadChildren(objDefinitions);
				if (this.productObject.isGetChildrenServicesLoaded(objDefinitions)) {
					var objects = this.productObject.getObjects("CatalogEntryReferenceDefiningAttributeDictionaryAttributeWithAllowedValues");
					objects = objects.concat(this.productObject.getObjects("CatalogEntryReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues"));
					
					objects = this.getOrderedObjects(objects);
					var sequence = this.columns.length - this.attributeColumns.length;
					for (var i = 0; i < this.attributeColumns.length; i++) {
						var column = this.attributeColumns[i];
						column.setVariable("attributeObject", null);
						this.releaseColumn(column);
						refreshRequired = true;
					}
					this.attributeColumns = [];
					for (var i = 0; i < objects.length; i++) {
						var o = objects[i];
						if (!o.newObject) {
							CatalogEntryDefiningAttributeModelObjectManager.Singleton.registerAttributeObject(o);
							var column = null;
							if (this.attributeColumnsPool.length > 0) {
								column = this.attributeColumnsPool.pop();
								this.addColumn(column);
							}
							else {
								column = new VariantAttributeColumn.Class(this, {
									draggable: false,
									width: 100,
									visible: true
								});
							}
							this.setDefiningAttributeObjectPath(o);
							column.setVariable("editable", true);
							column.setVariable("attributeObject", o);
							refreshRequired = true;
							this.attributeColumns.push(column);
							this.setColumnPosition(column, sequence, false);
							sequence++;
						}
						else {
							this.updateAttributeColumnsDel.connect(o, "onnewObject");
							this.updateAttributeColumnsDel.connect(o, "beingDestroyed");
						}
					}
				}
			}
			else {
				while (this.attributeColumns.length > 0) {
					var column = this.attributeColumns.shift();
					column.setVariable("attributeObject", null);
					this.releaseColumn(column);
					this.attributeColumnsPool.push(column);
					refreshRequired = true;
				}
			}
			if (refreshRequired) {
				this.refresh();
				this.updateColumnOrder();
			}
			EventUtil.trigger(this, "onattributeColumns");
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/BaseVariantDefiningAttributeColumnGrid", "updateAttributeColumns");
			}
			]]>
		</method>
		
		<!---
			This method set the object path based on where the column is used.
			@keywords private
		-->
		<method args="o" name="setDefiningAttributeObjectPath">
			<![CDATA[
			if (o.objectType == "CatalogEntryReferenceDefiningAttributeDictionaryAttributeWithAllowedValues") {
				this.setVariable("definingAttributeObjectPath", "VariantReferenceDefiningAttributeDictionaryAttributeWithAllowedValues");
			}
			if (o.objectType == "CatalogEntryReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues") {
				this.setVariable("definingAttributeObjectPath", "VariantReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues");
			}
			
			]]>
		</method>
		
	<method args="productObject" name="set_productObject">
			<![CDATA[
			this.setProductObject(productObject);
			]]>
		</method></ObjectGrid>
	
	<!---
		This class represents the Variant grid that displays Variants
		as well as their defining attributes.  This grid is navigated to either by
		clicking on a product in the catalog tree, or clicking the 'Show Variants' button on the
		CMC toolbar with a product properties view is open.
		
		This class extends from 'cmc/catalog/BaseVariantDefiningAttributeColumnGrid', which shares code
		between the grid displaying Variants and the Variant defining attribute tab in the
		Variant properties view.
		
		This class overrides the 'definingAttributeObjectPath' attribute of the parent class
		'cmc/catalog/BaseVariantDefiningAttributeColumnGrid' to allow for the grid to navigate reference objects.
		
		The Variant grid will display 'ProductChildVariant' reference objects, whereas the Variant properties
		view will be displaying information for a 'Variant'.
		
		@keywords private
	-->
	<BaseVariantDefiningAttributeColumnGrid classDefinition="true" definitionName="cmc/catalog/VariantDefiningAttributeColumnGrid" package="cmc/catalog">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		
		<!---
			Initialization.
			@keywords private
		-->
		<handler name="oninit">
			<![CDATA[
			this.updateProductDel = new EventHandler.Class(this, "updateProduct");
			this.updateProduct();
			]]>
		</handler>
				
		<!---
			This method will update the parent product for the Variant.
			The parent can either be a Product or InheritedProduct.
			
			@keywords private
		-->
		<method args="e" name="updateProduct">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/VariantDefiningAttributeColumnGrid", "updateProduct");
			}
			this.updateProductDel.disconnectAll();
			this.updateProductDel.connect(this, "onparentO");
			if (this.parentO) {
				this.setVariable("productObject", this.parentO);
			}
			else {
				this.setVariable("productObject", null);
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/VariantDefiningAttributeColumnGrid", "updateProduct");
			}
			]]>
		</method>
		
		<!---
			This method set the object path based on where the column is used.
			
			The class attribute 'definingAttributeObjectPath' is overidden
			in this method to update the object path for use in the Product
			Variant navigation list.
			
			@keywords private
		-->
		<method args="o" name="setDefiningAttributeObjectPath">
			<![CDATA[
			if (o.objectType == "CatalogEntryReferenceDefiningAttributeDictionaryAttributeWithAllowedValues") {
				this.setVariable("definingAttributeObjectPath",  "Variant/VariantReferenceDefiningAttributeDictionaryAttributeWithAllowedValues");
			}
			if (o.objectType == "CatalogEntryReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues") {
				this.setVariable("definingAttributeObjectPath",  "Variant/VariantReferenceDefiningInheritedAttributeDictionaryAttributeWithAllowedValues");
			}
			if (o.objectType == "CatalogEntryDefiningAttribute") {
				this.setVariable("definingAttributeObjectPath", "Variant/VariantDefiningAttribute");
			}
			]]>
		</method>
		
		<!---
			This method will cleanup delegates that are used throughout this class.
			@keywords private
		-->
		<method name="destroy">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.catalog", "cmc/catalog/VariantDefiningAttributeColumnGrid", "destroy");
			}
			delete this.updateProductDel;
			this.inherited(arguments);
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.catalog", "cmc/catalog/VariantDefiningAttributeColumnGrid", "destroy");
			}
			]]>
		</method>
		
	</BaseVariantDefiningAttributeColumnGrid>

</Definitions>