<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<Definitions>

	<!---
		<P>
		This class is an enablement condition will returns "true" if the store currently being worked on
		is using an ATP inventory system. It will return false otherwise.
	    </P>
	    
	    <P>
	    If the attribute "negate" is set to "true", the result will be negated.
		</P>	
	-->
	<EnablementCondition classDefinition="true" definitionName="cmc/catalog/IsATPStoreEnablementCondition">
		<dependency localName="ContextUtil" moduleName="cmc/foundation/ContextUtil"/>
	
		<!---  An unique identifier string for this condition within a node. -->
		<variable name="conditionId" type="string" value="catIsATPStoreEnablementCondition"/>
			
		<!---
			If this is set to "true", the result will be negated.
		-->
		<variable name="negate" type="boolean" value="false"/>
			
		<!--- 
			<P>
			This method will returns "true" if the store currently being worked on
			is using an ATP inventory system. It will return false otherwise.
		    </P>
		 
		 	<P>
		    If the attribute "negate" is set to "true", the result will be negated.
			</P>	
        	
			@param cmc/foundation/ModelObject o the model object that is to be enabled/disabled.
		-->
		<method args="o" name="isEnabled">
			<![CDATA[
			var storeConfig = ContextUtil.Singleton.findStoreConfig(o != null ? o : this);
			var inventorySystem = null;
			if (storeConfig && storeConfig.inventorySystem) {
				if (storeConfig.inventorySystem.inventorySystem) {
					inventorySystem = storeConfig.inventorySystem.inventorySystem;
				}
			}
			var result = false;
			if (inventorySystem && inventorySystem == "ATP") {
				result = true;
			}
			if (this.negate) {
				result = !result;
			}
			return result;
			]]>
		</method>
	</EnablementCondition>
	

</Definitions>