<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<Definitions>
	<!---
		<p>
		This class is an enablement condition that will return true if Config Model in parent object exists, otherwise will return false.
		</p>
	    
		<p>
		If the attribute "negate" is set to "true", the result will be negated.
		</p>	
	-->
	<EnablementCondition classDefinition="true" definitionName="cmc/catalog/ModelEnablementCondition">
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<!--- 
			<P>
			This method returns <code>true</code> if the Config Model in parent object
			exists.
			</P>
			@param cmc/foundation/ModelObject o the model object that is to be enabled/disabled.
			@return boolean <code>true</code> if Config Model in parent object exists.
		-->
		<method args="o" name="isEnabled">
			<![CDATA[
			var po = o;
			if (o) {
				for (var i = 0; i < o.references.length; i++) {
					var ro = o.references[i];
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/catalog/ModelEnablementCondition", "ro", ro.logString());
					if (ro.objectType == "DynamicKitChildPDK" || ro.objectType == "DynamicKitChildInheritedPDK") {
						po = ro.parentObject;
						break;
					}
				}
				if (po) {
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/catalog/ModelEnablementCondition", "po", po.logString());
				}
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/catalog/ModelEnablementCondition", "po", po.logString());
			}
			var mo = null;
			if (po) {
				mo = po.getObject("CatalogEntryConfigModel/KitConfigModelAssociationGroup/ConfigModelGroup");
			}
			var modelPath = null;
			if (mo) {
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/catalog/ModelEnablementCondition", "mo", mo.logString());
				modelPath = mo.getPropertyValue("path");
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/catalog/ModelEnablementCondition", "modelPath", modelPath);
			}
			else {
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/catalog/ModelEnablementCondition", "mo", "null");
			}
			var result = (modelPath != null);
			if (this.negate) {
				result = !result;
			}
			Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/catalog/ModelEnablementCondition", "return", result);
			return result;
			]]>
		</method>
		
		<!---
			@keywords private
			Register a delegate to be executed when the parent changes.
			@param cmc/foundation/ModelObject o: the model object
			@param cmc/foundation/EventHandler del: the delegate
		-->
		<method args="o, del" name="registerDelegate">
			<![CDATA[
			if (o) {
				del.connect(o, "onreferences");
			}
			]]>
		</method>
	</EnablementCondition>
</Definitions>