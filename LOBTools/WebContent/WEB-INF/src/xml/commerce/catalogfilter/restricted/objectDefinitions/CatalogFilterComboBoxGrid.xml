<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>	
	
	 <!---
    	@keywords private
    	Search Service to get the list of operators support to string type
    -->
    <Service definitionName="cmc/catalogfilter/FindOperatorsForStringTypeService" retryOnError="true" singletonDefinition="true" url="/cmc/FindStringTypeOperators">

        <method args="requestParent, dataElement, hasMoreRecordsFlag, reqIdentifier, startIndex" name="parseObjects">
			<![CDATA[
			requestParent.setValues([]);
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var operator = this.parseOperator(dataElement.childNodes[i]);
				requestParent.addValue(operator);
			}
			if (requestParent.property != null) {
				requestParent.selectItem(requestParent.property.value);
			}
			]]>
		</method>

		<!---
			Parses each catalog object.
			@param XML dataElement: the child data element
			@returns cmc/foundation/CatalogSelection : a cmc/foundation/CatalogSelection catalog object.
		-->
        <method args="dataElement" name="parseOperator">
			<![CDATA[
			var operator = {};
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var e = dataElement.childNodes[i];
				if (e.nodeName == "displayName") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						operator.displayName = textNode.nodeValue;
					}
				}
				if (e.nodeName == "value") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						operator.value = textNode.nodeValue;
					}
				}
			}
			return operator;
			]]>
		</method>
    </Service>
    
	<!---
    	@keywords private
    	Search Service to get the list of operators support to string type
    -->
    <Service definitionName="cmc/catalogfilter/FindOperatorsForIntegerTypeService" retryOnError="true" singletonDefinition="true" url="/cmc/FindIntegerTypeOperators">

        <method args="requestParent, dataElement, hasMoreRecordsFlag, reqIdentifier, startIndex" name="parseObjects">
			<![CDATA[
			requestParent.setValues([]);
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var operator = this.parseOperator(dataElement.childNodes[i]);
				requestParent.addValue(operator);
			}
			if (requestParent.property != null) {
				requestParent.selectItem(requestParent.property.value);
			}
			]]>
		</method>

		<!---
			Parses each catalog object.
			@param XML dataElement: the child data element
			@returns cmc/foundation/CatalogSelection : a cmc/foundation/CatalogSelection catalog object.
		-->
        <method args="dataElement" name="parseOperator">
			<![CDATA[
			var operator = {};
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var e = dataElement.childNodes[i];
				if (e.nodeName == "displayName") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						operator.displayName = textNode.nodeValue;
					}
				}
				if (e.nodeName == "value") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						operator.value = textNode.nodeValue;
					}
				}
			}
			return operator;
			]]>
		</method>
    </Service>
    
    <!---
    	@keywords private
    	Search Service to get the list of operators support to integer type
    -->
    <Service definitionName="cmc/catalogfilter/FindPropertiesService" retryOnError="true" singletonDefinition="true" url="/cmc/FindFilterProperties">

        <method args="requestParent, dataElement, hasMoreRecordsFlag, reqIdentifier, startIndex" name="parseObjects">
			<![CDATA[
			requestParent.setValues([]);
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var property = this.parseProperty(dataElement.childNodes[i]);
				requestParent.addValue(property);
			}
			if (requestParent.property != null) {
				requestParent.selectItem(requestParent.property.value);
			}
			]]>
		</method>

		<!---
			Parses each catalog object.
			@param XML dataElement: the child data element
			@returns property : a catalog entry property object used by catalog filter
		-->
        <method args="dataElement" name="parseProperty">
			<![CDATA[
			var property = {};
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var e = dataElement.childNodes[i];
				if (e.nodeName == "displayName") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						property.displayName = textNode.nodeValue;
					}
				}
				if (e.nodeName == "type") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						property.type = textNode.nodeValue;
					}
				}
				if (e.nodeName == "value") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						property.value = textNode.nodeValue;
					}
				}
			}
			return property;
			]]>
		</method>
    </Service>
    
	<GridColumn classDefinition="true" definitionName="cmc/catalogfilter/PropertyNameGridComboBox">
		<dependency localName="PropertyNameGridComboBoxEditor" moduleName="cmc/catalogfilter/PropertyNameGridComboBoxEditor"/>
		<dependency localName="GridComboBoxViewer" moduleName="cmc/foundation/GridComboBoxViewer"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridComboBoxViewer" to create cell viewer instances.
		-->
		<variable name="cellViewerClass" value="${GridComboBoxViewer}"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridComboBoxEditor" to create cell editor instances.
		-->
		<variable name="cellEditorClass" value="${PropertyNameGridComboBoxEditor}"/>
		
    </GridColumn>
    
    <GridComboBoxEditor classDefinition="true" definitionName="cmc/catalogfilter/PropertyNameGridComboBoxEditor">
		
		<method args="e" name="updateValue">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (this.values.length == 0) {
				var caller = this;
				require(["cmc/catalogfilter/FindPropertiesService"], function(FindPropertiesService) {
					FindPropertiesService.Singleton.doRequest(caller, {});
				});
			}
			var value = this.property.value;
			if (this.selectedValue == null || value != this.selectedValue.value) {
				if (value != null && value != "") {
					this.selectItem(value);
				}
				else {
					this.clearSelection();
				}
			}
			]]>
		</method>
		
	</GridComboBoxEditor>
	
	<GridColumn classDefinition="true" definitionName="cmc/catalogfilter/OperatorGridComboBox">
		<dependency localName="OperatorGridComboBoxEditor" moduleName="cmc/catalogfilter/OperatorGridComboBoxEditor"/>
		<dependency localName="GridComboBoxViewer" moduleName="cmc/foundation/GridComboBoxViewer"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridComboBoxViewer" to create cell viewer instances.
		-->
		<variable name="cellViewerClass" value="${GridComboBoxViewer}"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridComboBoxEditor" to create cell editor instances.
		-->
		<variable name="cellEditorClass" value="${OperatorGridComboBoxEditor}"/>
		
    </GridColumn>
	
	<GridComboBoxEditor classDefinition="true" definitionName="cmc/catalogfilter/OperatorGridComboBoxEditor">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		
		<handler name="oninit">
			<![CDATA[
			var gridrow = this.parent.parent;
			var propertyNameCell = gridrow.cells[0];
			var propertyNameCellEditor = propertyNameCell.editor;
			this.updateOperatorsDel = new EventHandler.Class(this, "updateOperators");
			this.updateOperatorsDel.connect(propertyNameCellEditor, "onselectedValue");
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.updateOperatorsDel.disconnectAll();
			delete this.updateOperatorsDel;
			this.inherited(arguments);
			]]>
		</method>
		
		<method args="e" name="updateOperators">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var gridrow = this.parent.parent;
			var propertyNameCell = gridrow.cells[0];
			var propertyNameCellEditor = propertyNameCell.editor;
			if (propertyNameCellEditor.selectedValue) {
				var type = propertyNameCellEditor.selectedValue.type;
				if (type == 'String') {
					var caller = this;
					require(["cmc/catalogfilter/FindOperatorsForStringTypeService"], function(FindOperatorsForStringTypeService) {
						FindOperatorsForStringTypeService.Singleton.doRequest(caller, {});
					});
				}
				else if (type == 'Integer') {
					var caller = this;
					require(["cmc/catalogfilter/FindOperatorsForIntegerTypeService"], function(FindOperatorsForIntegerTypeService) {
						FindOperatorsForIntegerTypeService.Singleton.doRequest(caller, {});
					});
				}
				if (this.property != null) {
					this.selectItem(this.property.value);
				}
			}
			]]>
		</method>
		
	</GridComboBoxEditor>
	
</Definitions>