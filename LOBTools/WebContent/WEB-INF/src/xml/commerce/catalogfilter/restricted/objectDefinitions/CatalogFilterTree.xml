<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
    
   <!---
		This class controls the icon that will be displayed next to the nodes in the catalog filter tree.
	-->
	<PropertyTreeNodeCustomizer classDefinition="true" definitionName="cmc/catalogfilter/FilterTreeNodeCustomizer">
		<!--- @keywords private -->
		<method args="o, nodeObject, del" name="getIcon">
			<![CDATA[
			del.connect(o, "onchildObjects");
			nodeObject = nodeObject.getReferencedObject();
			var nodeRefType = nodeObject.objectType;
			var result = nodeRefType + "ImplicitIncludeIcon";
			var elements = o.getObjects("CategoryElementGroup");
			if (elements.length > 0) {
				var impexp = 'Explicit';
				var done = false;
				while (nodeObject != null && !done) {
					for (var i = 0; i < elements.length; i++) {
						var element = elements[i];
						if (element.getReferencedObject() == nodeObject) {
							var property = element.getProperty("xclude");
							del.connect(property, "onvalue");
							if (property.value == "Include" || property.value == "Exclude") {
								result = nodeRefType + impexp + property.value + "Icon";
								done = true;
							}
							break;
						}
					}
					nodeObject = nodeObject.getParentPrimaryObject();
					impexp = 'Implicit';
				}
			}
			return result;
			]]>
		</method>
	</PropertyTreeNodeCustomizer>
    
    <!---
		This class performs the include action for nodes of the catalog filter tree.
	-->
    <PropertyTreeAction classDefinition="true" definitionName="cmc/catalogfilter/FilterTreeIncludeAction" displayName="${catalogFilterResources.Singleton.catalogFilterIncludeCategoryElement.string}">
		<dependency localName="catalogFilterResources" moduleName="cmc/catalogfilter/CatalogFilterResources"/>
    	<!--- @keywords private -->
        <method args="o, nodeObject" name="performAction">
			<![CDATA[
			var elements = o.getObjects("CategoryElementGroup");
			var currentElement = null;
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
					currentElement = elements[i];
					break;
				}
			}
			if (currentElement == null) {
				var nodeRefType = nodeObject.getReferencedObject().objectType;
				var elementDef;
				if (nodeRefType == 'Catalog') {
					elementDef = o.model.getObjectDefinition(o, "CatalogElement");
				}
				else if (nodeRefType == 'InheritedCatalog') {
					elementDef = o.model.getObjectDefinition(o, "InheritedCatalogElement");
				}
				else if (nodeRefType == 'CatalogGroup') {
					elementDef = o.model.getObjectDefinition(o, "CategoryElement");
				}
				else if (nodeRefType == 'InheritedCatalogGroup') {
					elementDef = o.model.getObjectDefinition(o, "InheritedCategoryElement");
				}
				currentElement = o.model.createNewObject(elementDef, o);
				currentElement.addChild(nodeObject.getReferencedObject());
			}
			currentElement.getProperty("xclude").change("Include");
			]]>
		</method>
        
        <!--- @keywords private -->
        <method args="o, nodeObject, del" name="isEnabled">
			<![CDATA[
			if (typeof(del) == "undefined") del = null;
			var result = true;
			var elements = o.getObjects("CategoryElementGroup", false, null, del);
			var currentElement = null;
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
					currentElement = element;
					break;
				}
			}
			if (currentElement != null) {
				if (currentElement.getPropertyValue("xclude") == "Include") {
					result = false;
				}
				if (del != null) {
					var property = currentElement.getProperty("xclude");
					del.connect(property, "onvalue");
				}
			}
			return result;
			]]>
		</method>
    </PropertyTreeAction>
    
    <!---
		This class performs the exclude action for nodes of the catalog filter tree.
	-->
    <PropertyTreeAction classDefinition="true" definitionName="cmc/catalogfilter/FilterTreeExcludeAction" displayName="${catalogFilterResources.Singleton.catalogFilterExcludeCategoryElement.string}">
		<dependency localName="catalogFilterResources" moduleName="cmc/catalogfilter/CatalogFilterResources"/>
    	<!--- @keywords private -->
        <method args="o, nodeObject" name="performAction">
			<![CDATA[
			var elements = o.getObjects("CategoryElementGroup");
			var currentElement = null;
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
					currentElement = elements[i];
					break;
				}
			}
			if (currentElement == null) {
				var nodeRefType = nodeObject.getReferencedObject().objectType;
				var elementDef;
				if (nodeRefType == 'Catalog') {
					elementDef = o.model.getObjectDefinition(o, "CatalogElement");
				}
				else if (nodeRefType == 'InheritedCatalog') {
					elementDef = o.model.getObjectDefinition(o, "InheritedCatalogElement");
				}
				else if (nodeRefType == 'CatalogGroup') {
					elementDef = o.model.getObjectDefinition(o, "CategoryElement");
				}
				else if (nodeRefType == 'InheritedCatalogGroup') {
					elementDef = o.model.getObjectDefinition(o, "InheritedCategoryElement");
				}
				currentElement = o.model.createNewObject(elementDef, o);
				currentElement.addChild(nodeObject.getReferencedObject());
			}
			currentElement.getProperty("xclude").change("Exclude");
			]]>
		</method>
        
        <!--- @keywords private -->
        <method args="o, nodeObject, del" name="isEnabled">
			<![CDATA[
			if (typeof(del) == "undefined") del = null;
			var result = true;
			var elements = o.getObjects("CategoryElementGroup", false, null, del);
			var currentElement = null;
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
					currentElement = element;
					break;
				}
			}
			if (currentElement != null) {
				if (currentElement.getPropertyValue("xclude") == "Exclude") {
					result = false;
				}
				if (del != null) {
					var property = currentElement.getProperty("xclude");
					del.connect(property, "onvalue");
				}
			}
			return result;
			]]>
		</method>
    </PropertyTreeAction>
    
    <!---
		This class performs the clear action for nodes of the catalog filter tree.
	-->
    <PropertyTreeAction classDefinition="true" definitionName="cmc/catalogfilter/FilterTreeClearAction" displayName="${catalogFilterResources.Singleton.catalogFilterClearCategoryElement.string}">
		<dependency localName="catalogFilterResources" moduleName="cmc/catalogfilter/CatalogFilterResources"/>
        
        <!--- @keywords private -->
        <method args="o, nodeObject" name="performAction">
			<![CDATA[
			var elements = o.getObjects("CategoryElementGroup");
			var currentElement = null;
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
					currentElement = element;
					break;
				}
			}
			if (currentElement != null) {
				currentElement.deleteObject();
			}
			]]>
		</method>
        
        <!--- @keywords private -->
        <method args="o, nodeObject, del" name="isEnabled">
			<![CDATA[
			if (typeof(del) == "undefined") del = null;
			var result = false;
			var elements = o.getObjects("CategoryElementGroup", false, null, del);
			var currentElement = null;
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				if (element.getReferencedObject() == nodeObject.getReferencedObject()) {
					currentElement = element;
					break;
				}
			}
			if (currentElement != null) {
				result = true;
			}
			return result;
			]]>
		</method>
    </PropertyTreeAction>
    
    <!---
		This class handles selection in the catalog filter tree.
	-->
	<PropertyTreeSelectionHandler classDefinition="true" definitionName="cmc/catalogfilter/FilterTreeSelectionHandler">
		<dependency localName="ModelUtil" moduleName="cmc/foundation/ModelUtil"/>
		<!--- @keywords private -->
		<variable name="oView" value="${ModelUtil.Singleton.findObjectView(this.parent, 'o_selectedCategory')}"/>
		<!--- @keywords private -->
		<method args="o, selectedObject" name="handleSelection">
			<![CDATA[
			var elements = o.getObjects("CategoryElementGroup");
			var currentElement = null;
			if (selectedObject != null) {
				for (var i = 0; i < elements.length; i++) {
					var element = elements[i];
					if (element.getReferencedObject() == selectedObject.getReferencedObject()) {
						currentElement = element;
						break;
					}
				}
			}
			this.oView.setVariable("o_selectedCategory", currentElement);
			]]>
		</method>
	</PropertyTreeSelectionHandler>
</Definitions>