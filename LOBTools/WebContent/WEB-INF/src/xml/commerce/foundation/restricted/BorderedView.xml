<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!--- @keywords private -->
	<Component classDefinition="true" definitionName="cmc/foundation/BorderedView">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<variable name="marginTopSize" type="number" value="${null}"/>
		<variable name="marginRightSize" type="number" value="${null}"/>
		<variable name="marginBottomSize" type="number" value="${null}"/>
		<variable name="marginLeftSize" type="number" value="${null}"/>
		
		<variable name="paddingTopSize" type="number" value="${null}"/>
		<variable name="paddingRightSize" type="number" value="${null}"/>
		<variable name="paddingBottomSize" type="number" value="${null}"/>
		<variable name="paddingLeftSize" type="number" value="${null}"/>
		
		<variable name="borderTopSize" type="number" value="${null}"/>
		<variable name="borderRightSize" type="number" value="${null}"/>
		<variable name="borderBottomSize" type="number" value="${null}"/>
		<variable name="borderLeftSize" type="number" value="${null}"/>
				
		<variable name="borderTopColor" type="string" value="${null}"/>
		<variable name="borderRightColor" type="string" value="${null}"/>
		<variable name="borderBottomColor" type="string" value="${null}"/>
		<variable name="borderLeftColor" type="string" value="${null}"/>
		
		<!-- 
			If this value is set, the sizes of all margins will be this value. This
			value does not overwrite the size of any individual border, unless it
			is not set. For example, if marginTopSize is set to 1, then the size
			of the top margin will be 1, even if the marginSize is set to 2.  
		-->
		<variable name="marginSize" type="number" value="0"/>
		<variable name="paddingSize" type="number" value="0"/>
		<variable name="borderSize" type="number" value="0"/>
		<variable name="borderColor" type="string" value="#000000"/>

		<!--- @keywords private -->
		<variable name="defaultplacement" type="string" value="content"/>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.renderDel = new EventHandler.Class(this, "render");
			this.renderDel.connect(this, "onborderTopColor");
			this.renderDel.connect(this, "onborderRightColor");
			this.renderDel.connect(this, "onborderBottomColor");
			this.renderDel.connect(this, "onborderLeftColor");
			this.renderDel.connect(this, "onborderColor");
			this.inherited(arguments);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.renderDel.disconnectAll();
			delete this.renderDel;
			this.inherited(arguments);
			]]>
		</method>

		<method name="getDefaultPlacementView">
			<![CDATA[
			return this.content;
			]]>
		</method>

		<!--- @keywords private -->
		<method args="e" name="render">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.border.clear();
			var topSize = this.borderTopSize != null ? this.borderTopSize : this.borderSize;
			var rightSize = this.borderRightSize != null ? this.borderRightSize : this.borderSize;
			var bottomSize = this.borderBottomSize != null ? this.borderBottomSize : this.borderSize;
			var leftSize = this.borderLeftSize != null ? this.borderLeftSize : this.borderSize;
			var topPos = this.marginTopSize != null ? this.marginTopSize : this.marginSize;
			var rightPos = this.width - (this.marginRightSize != null ? this.marginRightSize : this.marginSize) - rightSize;
			var bottomPos = this.height - (this.marginBottomSize != null ? this.marginBottomSize : this.marginSize) - bottomSize;
			var leftPos = this.marginLeftSize != null ? this.marginLeftSize : this.marginSize;
			if (topSize > 0) {
				this.border.beginPath();
				this.border.moveTo(leftPos, topPos);
				this.border.lineTo(rightPos, topPos);
				this.border.strokeStyle = this.borderTopColor != null ? this.borderTopColor : this.borderColor;
				this.border.lineWidth = topSize;
				this.border.stroke();
			}
			if (rightSize > 0) {
				this.border.beginPath();
				this.border.moveTo(rightPos, topPos);
				this.border.lineTo(rightPos, bottomPos);
				this.border.strokeStyle = this.borderRightColor != null ? this.borderRightColor : this.borderColor;
				this.border.lineWidth = rightSize;
				this.border.stroke();
			}
			if (bottomSize > 0) {
				this.border.beginPath();
				this.border.moveTo(leftPos, bottomPos);
				this.border.lineTo(rightPos + rightSize, bottomPos);
				this.border.strokeStyle = this.borderBottomColor != null ? this.borderBottomColor : this.borderColor;
				this.border.lineWidth = bottomSize;
				this.border.stroke();
			}
			if (leftSize > 0) {
				this.border.beginPath();
				this.border.moveTo(leftPos, topPos);
				this.border.lineTo(leftPos, bottomPos);
				this.border.strokeStyle = this.borderLeftColor != null ? this.borderLeftColor : this.borderColor;
				this.border.lineWidth = leftSize;
				this.border.stroke();
			}
			]]>
		</method>

		<Layout>
			<!--- @keywords private -->
			<method name="init">
				<![CDATA[
				this.useContentWidth = !this.classroot.hasSetWidth;
				this.useContentHeight = !this.classroot.hasSetHeight;
				if (this.useContentWidth) {
					this.updateHandler.connect(this.classroot.content, "onwidth");
				}
				else {
					this.updateHandler.connect(this.classroot, "onwidth");
				}
				if (this.useContentHeight) {
					this.updateHandler.connect(this.classroot.content, "onheight");
				}
				else {
					this.updateHandler.connect(this.classroot, "onheight");
				}
				this.updateHandler.connect(this.classroot, "onmarginTopSize");
				this.updateHandler.connect(this.classroot, "onmarginRightSize");
				this.updateHandler.connect(this.classroot, "onmarginBottomSize");
				this.updateHandler.connect(this.classroot, "onmarginLeftSize");
				this.updateHandler.connect(this.classroot, "onmarginSize");
				this.updateHandler.connect(this.classroot, "onpaddingTopSize");
				this.updateHandler.connect(this.classroot, "onpaddingRightSize");
				this.updateHandler.connect(this.classroot, "onpaddingBottomSize");
				this.updateHandler.connect(this.classroot, "onpaddingLeftSize");
				this.updateHandler.connect(this.classroot, "onpaddingSize");
				this.updateHandler.connect(this.classroot, "onborderTopSize");
				this.updateHandler.connect(this.classroot, "onborderRightSize");
				this.updateHandler.connect(this.classroot, "onborderBottomSize");
				this.updateHandler.connect(this.classroot, "onborderLeftSize");
				this.updateHandler.connect(this.classroot, "onborderSize");
				this.inherited(arguments);
				]]>
			</method>
		
			<!---
				Update the bordered view layout.
			-->
			<method args="e" name="update">
				<![CDATA[
				if (typeof(e) == "undefined") e = null;
				if (!this.locked) {
					this.lock();
					var topMarginSize = this.classroot.marginTopSize != null ? this.classroot.marginTopSize : this.classroot.marginSize;
					var rightMarginSize = this.classroot.marginRightSize != null ? this.classroot.marginRightSize : this.classroot.marginSize;
					var bottomMarginSize = this.classroot.marginBottomSize != null ? this.classroot.marginBottomSize : this.classroot.marginSize;
					var leftMarginSize = this.classroot.marginLeftSize != null ? this.classroot.marginLeftSize : this.classroot.marginSize;
					var topBorderSize = this.classroot.borderTopSize != null ? this.classroot.borderTopSize : this.classroot.borderSize;
					var rightBorderSize = this.classroot.borderRightSize != null ? this.classroot.borderRightSize : this.classroot.borderSize;
					var bottomBorderSize = this.classroot.borderBottomSize != null ? this.classroot.borderBottomSize : this.classroot.borderSize;
					var leftBorderSize = this.classroot.borderLeftSize != null ? this.classroot.borderLeftSize : this.classroot.borderSize;
					var topPaddingSize = this.classroot.paddingTopSize != null ? this.classroot.paddingTopSize : this.classroot.paddingSize;
					var rightPaddingSize = this.classroot.paddingRightSize != null ? this.classroot.paddingRightSize : this.classroot.paddingSize;
					var bottomPaddingSize = this.classroot.paddingBottomSize != null ? this.classroot.paddingBottomSize : this.classroot.paddingSize;
					var leftPaddingSize = this.classroot.paddingLeftSize != null ? this.classroot.paddingLeftSize : this.classroot.paddingSize;
					var pos = leftMarginSize + leftBorderSize + leftPaddingSize;
					if (pos != this.classroot.content.x) {
						this.classroot.content.setVariable("x", pos);
					}
					pos = topMarginSize + topBorderSize + topPaddingSize;
					if (pos != this.classroot.content.y) {
						this.classroot.content.setVariable("y", pos);
					}
					var size;
					if (this.useContentWidth) {
						size = leftMarginSize + leftBorderSize + leftPaddingSize + this.classroot.content.width + rightPaddingSize + rightBorderSize + rightMarginSize;
						if (size != this.classroot.width) {
							this.classroot.setVariable("width", size);
						}
					}
					else {
						size = this.classroot.width - leftMarginSize - leftBorderSize - leftPaddingSize - rightPaddingSize - rightBorderSize - rightMarginSize;
						if (size < 0) {
							size = 0;
						}
						if (size != this.classroot.content.width) {
							this.classroot.content.setVariable("width", size);
						}
					}
					if (this.useContentHeight) {
						size = topMarginSize + topBorderSize + topPaddingSize + this.classroot.content.height + bottomPaddingSize + bottomBorderSize + bottomMarginSize;
						if (size != this.classroot.height) {
							this.classroot.setVariable("height", size);
						}
					}
					else {
						size = this.classroot.height - topMarginSize - topBorderSize - topPaddingSize - bottomPaddingSize - bottomBorderSize - bottomMarginSize;
						if (size < 0) {
							size = 0;
						}
						if (size != this.classroot.content.height) {
							this.classroot.content.setVariable("height", size);
						}
					}
					this.locked = false;
					this.classroot.render();
				}
				]]>
			</method>
		</Layout>
		
		<DrawComponent height="${this.parent.height}" name="border" width="${this.parent.width}"/>
		<Component name="content"/>
	</Component>
</Definitions>