<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords private

        A button that can show different images for pressed and normal states.

        Sample usage:
        @START_CODE
			<ToolBarButton name="toolbarButton" buttonResource="buttonIcons" onclick="buttonPressed()" enabled="${buttonEnabled}"/>
        @END_CODE
    -->
	<BaseButton classDefinition="true" definitionName="cmc/foundation/ToolBarButton" doesenter="true" focusable="true" imageComponents="1">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>
		<!---
			Button resource name.
		-->
		<variable name="buttonResource" type="string" value="${null}"/>

		<handler name="oninit">
			<![CDATA[
			// keep the image from triggering before everything is initialized
			this.button.setVariable("visible", true);
			]]>
		</handler>

		<!--- @keywords private -->
		<handler name="onfocus">
			<![CDATA[
			if (!this.indicator) {
				new FocusIndicator.Class(this, {
					name: "indicator",
					focusableView: this,
					indicatorView: this,
					focusIndicatorColor: "#ffffff"
				});
			}
			]]>
		</handler>
		
		<Component name="button" imageSet="${this.classroot.buttonResource}" visible="false"/>
	</BaseButton>
	
	<!--- 
		@keywords private
		This class adds focus indicator on basebutton
	 -->
	<BaseButton classDefinition="true" definitionName="cmc/foundation/FocusableBaseButton" focusable="true">
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>
		<!--
			Focus indicator color.
		 -->
		<variable name="focusIndicatorColor" type="string" value="#000000"/>
		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			var caller = this;
			require(["cmc/foundation/CanvasMenu"], function(CanvasMenu) {
				CanvasMenu.Singleton.addView(caller);
			});
			]]>
		</method>
		
		<!--- @keywords private -->
		<handler name="onfocus">
			<![CDATA[
			this.createFocusIndicator();
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="createFocusIndicator">
			<![CDATA[
			if (!this.indicator) {
				new FocusIndicator.Class(this, {
					name: "indicator",
					focusableView: this,
					indicatorView: this,
					focusIndicatorColor: this.focusIndicatorColor
				});
			}
			]]>
		</method>
		
		<handler name="onfocusIndicatorColor">
			<![CDATA[
			if (this.indicator) {
				this.indicator.setVariable("focusIndicatorColor", this.focusIndicatorColor);
			}
			]]>
		</handler>
		
	</BaseButton>
	
	<!--- @keywords private -->
	<FocusableBaseButton classDefinition="true" clickable="true" definitionName="cmc/foundation/Button">
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>

		<variable name="minWidth" type="number" value="90"/>

		<variable name="textPaddingSizeX" type="number" value="28"/>

		<variable name="iconResource" type="string"/>
		
		<variable name="borderColor" type="string" value="${this.bgcolor}"/>
		
		<variable name="primary" type="boolean" value="true"/>

	    <!--
	    	@keywords private
	     -->
	    <State active="${this.parent.title.width + this.parent.iconView.width &lt;= this.parent.minWidth - 2 * this.parent.textPaddingSizeX}" name="state0">
	    	<variable name="width" value="${this.minWidth}"/>
	    </State>
		<State active="${this.parent.title.width + this.parent.iconView.width &gt; this.parent.minWidth - 2 * this.parent.textPaddingSizeX}" name="state1">
			<variable name="width" value="${this.iconView.width + this.title.width + 2 * this.textPaddingSizeX}"/>
		</State>

	    <!--- @keywords private -->
	    <variable name="height" value="30"/>

	    <!--- @keywords private -->
	    <variable name="doesenter" value="true"/>
	    
	    <!--- @keywords private -->
	    <variable name="focusIndicatorColor" value="${this.fgcolor}"/>

	    <!--- @keywords private -->
		<method name="showDown">
			<![CDATA[
			if (this.primary) {
				this.setVariable("bgcolor", "#325c80");
				this.setVariable("fgcolor", "#ffffff");
			}
			else {
				this.setVariable("bgcolor", "#5a5a5a");
				this.setVariable("fgcolor", "#ffffff");
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="showUp">
			<![CDATA[
			if (this._enabled) {
				if (this.primary) {
					this.setVariable("bgcolor", "#4178be");
					this.setVariable("fgcolor", "#ffffff");
				}
				else {
					this.setVariable("bgcolor", "#777677");
					this.setVariable("fgcolor", "#ffffff");
				}
			}
			else {
				this.setVariable("bgcolor", "#cbcbcb");
				this.setVariable("fgcolor", "#ffffff");
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="showOver">
			<![CDATA[
			if (this.primary) {
				this.setVariable("bgcolor", "#325c80");
				this.setVariable("fgcolor", "#ffffff");
			}
			else {
				this.setVariable("bgcolor", "#5a5a5a");
				this.setVariable("fgcolor", "#ffffff");
			}
			]]>
		</method>
		
		<handler name="onclick">
			<![CDATA[
			if ((!this.actionDefinition) && (Logger.Singleton.perfTraceEnabled)) {
				Logger.Singleton.perfTrace("cmc/foundation/Button", "onclick", "Button " + this.text);
			}
			]]>
		</handler>

		<Component bgcolor="${this.classroot.borderColor}" width="1" height="${this.parent.height}"/>
		<Component bgcolor="${this.classroot.borderColor}" width="1" height="${this.parent.height}" x="${this.parent.width - 1}"/>
		<Component bgcolor="${this.classroot.borderColor}" width="${this.parent.width}" height="1"/>
		<Component bgcolor="${this.classroot.borderColor}" width="${this.parent.width}" height="1" y="${this.parent.height - 1}"/>
		<Component name="iconView" valign="middle" x="10">
			<State active="${this.classroot.iconResource}" name="state0"/>
			<Component imageSet="${this.classroot.iconResource}" visible="${this.parent.state0.active}"/>
			<Component visible="${this.parent.state0.active}" width="4"/>
			<AxisLayout axis="x" spacing="0"/>
		</Component>

	    <TextComponent name="title" resize="true" text="${this.parent.text}" x="${((this.parent.width - (this.width + this.parent.iconView.width)) / 2) + this.parent.iconView.width}" valign="middle"/>
	</FocusableBaseButton>

	<!---
		@keywords private

		A button that closes a given model object. If the object is modified but not saved,
		the user will be prompted for confirmation.
	-->
	<Button classDefinition="true" definitionName="cmc/foundation/ObjectCloseButton" text="${foundationResources.Singleton.closeButtonText.string}">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="EventTimer" moduleName="cmc/shell/EventTimer"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>

		<!---
			Action definition instance.
		-->
		<variable name="actionDefinition"/>
        
        <!--- @keywords private -->
		<method name="showDown">
			<![CDATA[
			this.setVariable("bgcolor", "#e6effb");
			this.setVariable("fgcolor", "#325c80");
			this.setVariable("borderColor", "#4178be");
			this.setVariable("focusIndicatorColor", "#ffffff");
			]]>
		</method>

		<!--- @keywords private -->
		<method name="showUp">
			<![CDATA[
			if (this._enabled) {
				this.setVariable("bgcolor", "#ffffff");
				this.setVariable("fgcolor", "#4178be");
				this.setVariable("borderColor", "#4178be");
				this.setVariable("focusIndicatorColor", "#ffffff");
			}
			else {
				this.setVariable("bgcolor", "#cbcbcb");
				this.setVariable("fgcolor", "#ffffff");
				this.setVariable("borderColor", "#cbcbcb");
				this.setVariable("focusIndicatorColor", "#ffffff");
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="showOver">
			<![CDATA[
			this.setVariable("bgcolor", "#e6effb");
			this.setVariable("fgcolor", "#325c80");
			this.setVariable("borderColor", "#4178be");
			this.setVariable("focusIndicatorColor", "#ffffff");
			]]>
		</method>
		<!---
			Handle button click.
		-->
		<handler name="onclick">
			<![CDATA[
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectCloseButton", "onclick", "Close Start");
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.start("cmc/foundation/ObjectCloseButton onclick: " + this.text);
			var o = this.actionDefinition.parent.o;
			if (o != null) {
				o.closeObject(true);
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.end();
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectCloseButton", "onclick", "Close End");
			}
			]]>
		</handler>
	</Button>

	<!---
		@keywords private

		A button that saves and then closes the specified model object.
	-->
	<Button classDefinition="true" definitionName="cmc/foundation/ObjectSaveAndCloseButton" text="${foundationResources.Singleton.saveAndCloseButtonText.string}">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="EventTimer" moduleName="cmc/shell/EventTimer"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<!---
			Action definition instance.
		-->
		<variable name="actionDefinition"/>

		<!---
			Handle button click.
		-->
		<handler name="onclick">
			<![CDATA[
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectSaveAndCloseButton", "onclick", "SaveAndClose Start");
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.start("cmc/foundation/ObjectSaveAndCloseButton onclick: " + this.text);
			var o = this.actionDefinition.parent.o;
			if (o != null) {
				o.saveAndCloseObject(true);
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.end();
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectSaveAndCloseButton", "onclick", "SaveAndClose End");
			}
			]]>
		</handler>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updateEnablementDel = new EventHandler.Class(this, "updateEnablement");
			this.updateEnablement();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.updateEnablementDel.disconnectAll();
			delete this.updateEnablementDel;
			this.inherited(arguments);
			]]>
		</method>

		<!---
			Enables/Disabled the button based upon the openGroupReadOnly value of the model object.
		-->
		<method args="e" name="updateEnablement">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.updateEnablementDel.disconnectAll();
			var o = this.actionDefinition.parent.o;
			this.setVariable("enabled", o != null && o.openGroupObject != null && !o.openGroupObject.openGroupReadOnly);
			this.updateEnablementDel.connect(this.actionDefinition.parent, "ono");
			if (o != null && o.openGroupObject != null) {
				this.updateEnablementDel.connect(o.openGroupObject, "onopenGroupReadOnly");
			}
			]]>
		</method>
	</Button>

	<!---
		@keywords private

		A button that saves a given model object
	-->
	<Button classDefinition="true" definitionName="cmc/foundation/ObjectSaveButton" text="${foundationResources.Singleton.saveButtonText.string}">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="EventTimer" moduleName="cmc/shell/EventTimer"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>

		<!---
			Action definition instance.
		-->
		<variable name="actionDefinition"/>

		<!---
			Handle button click.
		-->
		<handler name="onclick">
			<![CDATA[
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectSaveButton", "onclick", "Save Start");
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.start("cmc/foundation/ObjectSaveButton onclick: " + this.text);
			var o = this.actionDefinition.parent.o;
			if (o != null) {
				o.saveObject();
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.end();
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectSaveButton", "onclick", "Save End");
			}
			]]>
		</handler>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updateEnablementDel = new EventHandler.Class(this, "updateEnablement");
			this.updateEnablement();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.updateEnablementDel.disconnectAll();
			delete this.updateEnablementDel;
			this.inherited(arguments);
			]]>
		</method>

		<!---
			Enables/Disabled the button based upon the openGroupReadOnly value of the model object.
		-->
		<method args="e" name="updateEnablement">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.updateEnablementDel.disconnectAll();
			var o = this.actionDefinition.parent.o;
			this.setVariable("enabled", o != null && o.openGroupObject != null && !o.openGroupObject.openGroupReadOnly);
			this.updateEnablementDel.connect(this.actionDefinition.parent, "ono");
			if (o != null && o.openGroupObject != null) {
				this.updateEnablementDel.connect(o.openGroupObject, "onopenGroupReadOnly");
			}
			]]>
		</method>
	</Button>
	
	<!---
		@keywords private
		A button that saves and then previews the model object.  If the object has only a single
		in-context preview URL, then it will bypass the preview dialog and automatically select 
		a valid start date (if it is a time sensitive object such as a Page Layout), otherwise it 
		will show the store preview dialog.
	-->
	<Button classDefinition="true" definitionName="cmc/foundation/ObjectSaveAndPreviewButton" text="${foundationResources.Singleton.saveAndPreviewButtonText.string}">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="ServiceParam" moduleName="cmc/foundation/ServiceParam"/>
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="EventTimer" moduleName="cmc/shell/EventTimer"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<!---
			Action definition instance.
		-->
		<variable name="actionDefinition"/>
		
		<!---
			Handle button click.
		-->
		<handler name="onclick">
			<![CDATA[
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectSaveAndPreviewButton", "onclick", "SaveAndPreview Start");
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.start("cmc/foundation/ObjectSaveAndPreviewButton onclick: " + this.text);
			var o = this.actionDefinition.parent.o;
			if (o != null) {
				o.saveObject();
				var startDate = null;
				var startDatePropertyName = o.objectDefinition.previewStartDatePropertyName;
				if (startDatePropertyName) {
					startDate = o.getPropertyValue(startDatePropertyName);
				}
				if (startDate && startDate != "") {
					startDate = DateUtil.Singleton.format(DateUtil.Singleton.parse(startDate, DateUtil.Singleton.DATE_TIME_FORMAT), "yyyy/MM/dd HH:mm:ss");
				}
				if (!this.getPreviewURLsDel) {
					this.getPreviewURLsDel = new EventHandler.Class(this, "getPreviewURLs");
				}
				var caller = this;
				require(["cmc/foundation/WaitForTransactionsHandler"], function(WaitForTransactionsHandler) {
					WaitForTransactionsHandler.Singleton.triggerAction(o.model, caller.getPreviewURLsDel, {
						o: o,
						previewStartDate: startDate
					});
				});
			}
			if (EventTimer.Singleton.enabled) EventTimer.Singleton.end();
			if (Logger.Singleton.perfTraceEnabled) {
				Logger.Singleton.perfTrace("cmc/foundation/ObjectSaveAndPreviewButton", "onclick", "SaveAndPreview End");
			}
			]]>
		</handler>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updateEnablementDel = new EventHandler.Class(this, "updateEnablement");
			this.updateEnablement();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.updateEnablementDel.disconnectAll();
			delete this.updateEnablementDel;
			delete this.getPreviewURLsDel;
			this.inherited(arguments);
			]]>
		</method>

		<!---
			Enables or disables the button based upon the openGroupReadOnly value of the model object.
		-->
		<method args="e" name="updateEnablement">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.updateEnablementDel.disconnectAll();
			var o = this.actionDefinition.parent.o;
			this.updateEnablementDel.connect(this.actionDefinition.parent, "ono");
			var newEnabled = false;
			if (o != null && o.openGroupObject != null) {
				this.updateEnablementDel.connect(o.openGroupObject, "onopenGroupReadOnly");
				if (!o.openGroupObject.openGroupReadOnly) {
					var preview = o.objectDefinition.getPreviewURLService;
					if (preview != null && preview.isEnabled(o, this.updateEnablementDel)) {
						newEnabled = true;
					}
				}
			}
			if (this.enabled != newEnabled) {
				this.setVariable("enabled", newEnabled);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method gets the in-context preview URLs for the object and launches preview.
		-->
		<method args="args" name="getPreviewURLs">
			<![CDATA[
			if (typeof(args) == "undefined") args = null;
			var o = args.o;
			if (!o.hasErrors()) {
				var preview = o.objectDefinition.getPreviewURLService;
				if (preview != null && !o.newObject && preview.isEnabled(o)) {
					if (args.previewStartDate && args.previewStartDate != "") {
						var startDateParam = new ServiceParam.Class(preview, {
							parameterName: "previewStartDate",
							value: args.previewStartDate
						});
					}
					preview.doRequest(o, {
						storeId: o.model.oEditor.localContext.storeConfig.storeId
					});
				}
			}
			]]>
		</method>
	</Button>	
</Definitions>