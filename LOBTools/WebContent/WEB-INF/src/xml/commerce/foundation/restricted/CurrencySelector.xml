<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords private
		
		Currency selector that provides a combobox with a list of supported store currencies. The list
		of currencies is obtained by the Store Configuration.
	-->
	<ComboBox classDefinition="true" definitionName="cmc/foundation/CurrencySelector">
		<dependency localName="ContextUtil" moduleName="cmc/foundation/ContextUtil"/>
		<!---
			If true, the only option available will be the store default currency. Default is false.
		-->
		<variable name="allowDefaultCurrencyOnly" type="boolean" value="false"/>
		<!---
			Create currency selections
		-->
		<method args="e" name="createComboBox">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this._initializingComboBox = true;
			this.setValues(null);
			var storeConfig = null;
			if (this.property != null) {
				var storeConfig = ContextUtil.Singleton.findStoreConfig(this.property.o);
			}
			if ((this.property != null) && (storeConfig != null)) {
				if (!this.allowDefaultCurrencyOnly) {
					for (var i = 0; i < storeConfig.supportedCurrencies.length; ++i) {
						var currency = storeConfig.supportedCurrencies[i];
						this.addItem(currency.currencyDescription, currency.currencyCode);
					}
				}
				else if (storeConfig.defaultCurrency != null) {
					this.addItem(storeConfig.defaultCurrency.currencyDescription, storeConfig.defaultCurrency.currencyCode);
				}
				var selectedValue = null;
				for (var i = 0; i < this.values.length; ++i) {
					if (this.property.value == this.values[i].value) {
						selectedValue = this.values[i];
						break;
					}
				}
				this.selectValue(selectedValue);
			}
			this._initializingComboBox = false;
			]]>
		</method>
		
	 </ComboBox>
	 
	 
	<!---
		@keywords final
		This class defines a currency selector drop-down to use in a properties view. This class
		will provides a combobox with a list of supported store currencies. The list of currencies is obtained from the 
		store's configuration.
	-->
	<PropertyEditor classDefinition="true" definitionName="cmc/foundation/PropertyCurrencySelector">
		<dependency localName="CurrencySelector" moduleName="cmc/foundation/CurrencySelector"/>
		<!--- If true, the only option available will be the store default currency. Default is false. -->
		<variable name="allowDefaultCurrencyOnly" type="boolean" value="false"/>
		
		<!---
			@keywords private
			Create the editor for the given property component
			@param cmc/foundation/PropertiesComponent parentComponent The parent properties component from which to create the editor
		-->
		<method args="parentComponent" name="createEditor">
			<![CDATA[
			new CurrencySelector.Class(parentComponent, {
				name: "editor",
				x: parentComponent.promptWidth + parentComponent.xspacing,
				property: parentComponent.property,
				enabled: parentComponent.enabled,
				allowDefaultCurrencyOnly: this.allowDefaultCurrencyOnly
			});
			]]>
		</method>
	</PropertyEditor>

	<!---
		@keywords final
		This class defines a currency selector drop-down to use as a column in a {@link cmc/foundation/ObjectGrid}. This class
		provides a combobox with a list of supported store currencies. The list of currencies is obtained from the 
		store's configuration.
	-->
	<GridColumn classDefinition="true" definitionName="cmc/foundation/GridCurrencySelector">
		<dependency localName="GridCurrencyEditor" moduleName="cmc/foundation/GridCurrencyEditor"/>
		<dependency localName="GridComboBoxViewer" moduleName="cmc/foundation/GridComboBoxViewer"/>
		<!--- 
			@keywords private
			Use "cmc/foundation/GridComboBoxViewer" for the viewer class.	
		-->
		<variable name="cellViewerClass" value="${GridComboBoxViewer}"/>
		<!--- 
			@keywords private
			Use "cmc/foundation/GridCurrencyEditor" for the editor class. 
		-->
		<variable name="cellEditorClass" value="${GridCurrencyEditor}"/>
		<!--- If this attribute is set to true, the only option available will be the store's default currency. The default is false. -->
		<variable name="allowDefaultCurrencyOnly" type="boolean" value="false"/>
		
		<!---
			@keywords private
			This method returns the editor initialization arguments.
		-->					
		<method name="getEditorInitArgs">
			<![CDATA[
			return {
				allowDefaultCurrencyOnly: this.allowDefaultCurrencyOnly
			};
			]]>
		</method>
	</GridColumn>

	<!---
		@keywords private
		
		Currency editor for a grid cell.
	-->
	<CurrencySelector classDefinition="true" definitionName="cmc/foundation/GridCurrencyEditor" width="${this.immediateParent.availableWidth}">
	</CurrencySelector>
</Definitions>