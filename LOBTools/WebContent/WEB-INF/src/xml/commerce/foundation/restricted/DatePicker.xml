<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<Image name="datePickerYearLeftArrow" src="/images/commerce/foundation/restricted/resources/datepicker/chevron_left_12_white.png" rtlSrc="/images/commerce/foundation/restricted/resources/datepicker/chevron_right_12_white.png"/>
	<Image name="datePickerYearRightArrow" src="/images/commerce/foundation/restricted/resources/datepicker/chevron_right_12_white.png" rtlSrc="/images/commerce/foundation/restricted/resources/datepicker/chevron_left_12_white.png"/>
	<Image name="datePickerMonthLeftArrow" src="/images/commerce/foundation/restricted/resources/datepicker/chevron_left_12_grey.png" rtlSrc="/images/commerce/foundation/restricted/resources/datepicker/chevron_right_12_grey.png"/>
	<Image name="datePickerMonthRightArrow" src="/images/commerce/foundation/restricted/resources/datepicker/chevron_right_12_grey.png" rtlSrc="/images/commerce/foundation/restricted/resources/datepicker/chevron_left_12_grey.png"/>
	<ImageSet name="calendarButton">
		<Image src="/images/commerce/foundation/restricted/resources/datepicker/date.png"/>
		<Image src="/images/commerce/foundation/restricted/resources/datepicker/date_disabled.png"/>
		<Image src="/images/commerce/foundation/restricted/resources/datepicker/date_reverse.png"/>
	</ImageSet>
	
	<!---
		@keywords private
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/ValueSelectorValue">
		<variable name="displayName" type="string" value=""/>
		<variable name="value" value="${null}"/>
		
		<handler name="oninit">
			<![CDATA[
			this.parent.addValue(this);
			]]>
		</handler>
	</Node>
	

	<!---
		@keywords private
		A selector that allows users to select a month for this date picker. It is used internally by
		the date picker. This selector uses {@link cmc/foundation/MonthDropDown} to provide a dropdown menu from which
		users select a valid month.
	-->
	<Component classDefinition="true" definitionName="cmc/foundation/MonthSelector">
		<!---
			The selected month ranging from 0 to 11, where 0 means January, and 11 means December.
		-->
		<variable name="selectedMonth" type="number" value="${null}"/>
		
		<MonthDropDown name="monthDropDown"/>

		<!---
			@keywords private
			Sets the selected month of this selector to the user selected month
		-->
		<handler eventSource="this.monthDropDown" name="onselectedValue">
			<![CDATA[
			this.setVariable("selectedMonth", this.monthDropDown.selectedValue.value);
			]]>
		</handler>
		
		<!---
			Sets the selector value to the given month
			@param Number month the month to be set
			@event onselectedMonth
		-->
		<method args="month" name="setMonth">
			<![CDATA[
			this.monthDropDown.setMonth(month);
			this.setVariable("selectedMonth", this.getSelectedMonth());
			]]>
		</method>

		<!---
			Changes the displayed selected month to the given value. This method will ensure
			the selected value is the given month, but will not trigger the event onselectedMonth.
			@param Number month the new month to be displayed
		-->
		<method args="month" name="changeDisplayedMonth">
			<![CDATA[
			this.selectedMonth = month;
			this.monthDropDown.changeDisplayedMonth(month);
			]]>
		</method>
		
		<!---
			Gets the month selected by the user from the month drop down.
			@return Number the month selected by the user. If no selection is made, null will be returned.
		 -->
		<method name="getSelectedMonth">
			<![CDATA[
			if (!this.monthDropDown.selectedValue) {
				return null;
			}
			if (!this.monthDropDown.selectedValue.value) {
				return null;
			}
			return this.monthDropDown.selectedValue.value;
			]]>
		</method>
		
		<!---
			@keywords private
			Checks if the mouse cursor is on this selector including its dropdown menu.
			@return true if the mouse cursor is on this selector or on its dropdown when the dropdown is open. False otherwise.
		-->
		<method name="containsMouse">
			<![CDATA[
			if (this.containsPt(this.getMouse("x"), this.getMouse("y"))) {
				return true;
			}
			return this.monthDropDown.containsMouse();
			]]>
		</method>
	</Component>
	
	<!---
		@keywords private
		A dropdown menu specialized in displaying months. It is used internally by {@link cmc/foundation/MonthSelector}.
	-->
	<ValueSelector classDefinition="true" definitionName="cmc/foundation/MonthDropDown" textColor="#ffffff" height="24" width="${null}">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		
		<variable name="selectorOffset" type="number" value="-1"/>
		<variable name="selectorXOffset" type="number" value="8"/>
		<variable name="selectorLocation" type="string" value="bottomleft"/>
		
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerJan.string}" value="0"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerFeb.string}" value="1"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerMar.string}" value="2"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerApr.string}" value="3"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerMay.string}" value="4"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerJun.string}" value="5"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerJul.string}" value="6"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerAug.string}" value="7"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerSep.string}" value="8"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerOct.string}" value="9"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerNov.string}" value="10"/>
		<ValueSelectorValue displayName="${foundationResources.Singleton.datePickerDec.string}" value="11"/>
		
		<!---
			@keywords private
			Selects the month equal to the month in the current system date.
		-->
		<method name="selectCurrentMonth">
			<![CDATA[
			var date = DateUtil.Singleton.getCurrentDate();
			this.setVariable("selectedValue", this.values[date.getMonth()]);
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the selected month to the given value.
			@param Number month the new month to be set.
		 -->
		<method args="month" name="setMonth">
			<![CDATA[
			this.setVariable("selectedValue", this.values[month]);
			]]>
		</method>
		
		<!---
			@keywords private
			Changes the displayed month to the given month
			@param Number month a given month to be displayed
		-->
		<method args="month" name="changeDisplayedMonth">
			<![CDATA[
			if (!this.values || !this.values[month]) {
				this.selectedValue = null;
			}
			else {
				this.selectedValue = this.values[month];
			}
			this.updateSelectedValue();
			]]>
		</method>
		
		<!---
			@return Number the currently selected month
		 -->
		<method name="getMonth">
			<![CDATA[
			return this.selectedValue;
			]]>
		</method>
		
		<!---
			@keywords private
			When the dropdown is initialized, populate its months, and sets the current system
			date's month as the selected month.
		-->
		<handler name="oninit">
			<![CDATA[
			this.selectCurrentMonth();
			]]>
		</handler>

		<!---
			@keywords private
			Handles keyboard shortcuts. Overwrites the default behaviour.
		-->
		<method args="k" name="callOnKeyDown">
			<![CDATA[
			if (k == 38) {
				if (this.selectedValue.value > 0) {
					this.setMonth(this.selectedValue.value - 1);
				}
			}
			else if (k == 40) {
				if (this.selectedValue.value < 11) {
					this.setMonth(this.selectedValue.value + 1);
				}
			}
			]]>
		</method>
	</ValueSelector>
	
	<!---
		@keywords private
		A selector that allows users to selects a year for this date picker. It uses a dropdown to provide
		valid years for users to choose. This selector is internally used by {@link cmc/foundation/DatePicker} for
		year selection.
	-->
	<Component classDefinition="true" definitionName="cmc/foundation/YearSelector">
		<!---
			The currently selected year
		-->
		<variable name="selectedYear" type="number"/>
		
		<AxisLayout axis="x" spacing="4"/>
		<Component imageSet="datePickerYearLeftArrow" name="leftArrow" y="${(this.parent.yearDropDown.height - this.height)/2}">
			<handler name="onclick">
				<![CDATA[
				this.classroot.yearDropDown.updateYear(-1);
				]]>
			</handler>
		</Component>
		
		<YearDropDown name="yearDropDown"/>
		
		<!---
			@keywords private
			When a value is selected from this selector's dropdown, set the value of this
			selector to the selected year.
		-->
		<handler eventSource="this.yearDropDown" name="onselectedValue">
			<![CDATA[
			this.setVariable("selectedYear", this.yearDropDown.selectedValue.value);
			]]>
		</handler>
		
		<Component imageSet="datePickerYearRightArrow" name="rightArrow" y="${(this.parent.yearDropDown.height - this.height)/2}">
			<handler name="onclick">
				<![CDATA[
				this.classroot.yearDropDown.updateYear(1);
				]]>
			</handler>
		</Component>
		
		<!---
			@keywords private
			Sets the selected year to the given value.
			@param Number year The year to be set
			@event onselectedYear
		-->
		<method args="year" name="setYear">
			<![CDATA[
			this.yearDropDown.setYear(year);
			this.setVariable("selectedYear", year);
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the displayed year to the given value. The selector's value
			will be changed, but no onselectYear event will be sent out.
			@param Number year the new value to be displayed
		-->
		<method args="year" name="changeDisplayedYear">
			<![CDATA[
			this.yearDropDown.changeDisplayedYear(year);
			this.selectedYear = year;
			]]>
		</method>
		
		<!---
			@keywords private
			Gets the selected year in this selector.
			@return Number the currently selected year in this selector
		-->
		<method name="getSelectedYear">
			<![CDATA[
			return this.selectedYear;
			]]>
		</method>
		
		<!---
			Determines if this selector including its dropdown contains the mouse cursor.
			@return true if the mouse cursor is contained in this selector or its dropdown when the dropdown is open.
				False otherwise.
		-->
	    <method name="containsMouse">
			<![CDATA[
			if (this.containsPt(this.getMouse("x"), this.getMouse("y"))) {
				return true;
			}
			return this.yearDropDown.containsMouse();
			]]>
		</method>
	</Component>
	
	<!---
		@keywords private
		A dropdown specialized in displaying years for {@link cmc/foundation/YearSelector}
	-->
	<ValueSelector centerText="true" classDefinition="true" definitionName="cmc/foundation/YearDropDown" showDropDownButton="false" textColor="#ffffff" height="24" width="${null}" padding="0">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="ValueSelectorValue" moduleName="cmc/foundation/ValueSelectorValue"/>
		<!---  The available years will range from current year - yearRange to current year + yearRange -->
		<variable name="yearRange" value="5"/>
		
		<variable name="selectorOffset" type="number" value="-1"/>
		<variable name="selectorXOffset" type="number" value="-24"/>
		
		<!---
			@keywords private
			When this dropdown is initialized, populates years available to choose, and selects the year
			in the current system time.
		-->
		<handler name="oninit">
			<![CDATA[
			this.populateYears();
			this.selectCurrentYear();
			]]>
		</handler>
		
		<!---
			@keywords private
			Gets the year in the current system time in full format. For example, 1984 instead of 84.
			@return Number the full year in the current system time.
		-->
		<method name="getCurrentYear">
			<![CDATA[
			return (DateUtil.Singleton.getCurrentDate()).getFullYear();
			]]>
		</method>
		
		<!---
			@keywords private
			Populates years available to choose. There will be 2 x {@link cmc/foundation/YearDropDown#yearRange} years
			available, starting from current year minus year range, and ending with current year plus year
			range.
		-->
		<method name="populateYears">
			<![CDATA[
			var currentYear = this.getCurrentYear();
			for (var i = -this.yearRange; i <= this.yearRange; ++i) {
				var year = currentYear + i;
				new ValueSelectorValue.Class(this, {
					displayName: year.toString(),
					value: year
				});
			}
			]]>
		</method>
		
		<!---
			@keywords private
			
			Updates the selected year by the given delta.
			@param delta the difference to be added to the currently selected value. To decrease the selected
			value, use a negative delta.
		-->
		<method args="delta" name="updateYear">
			<![CDATA[
			var newYear = this.selectedValue.value + delta;
			this.setYear(newYear);
			]]>
		</method>
		
		<!---
			@keywords private
			Updates the values in a drop-down list, making sure when the list is open,
			the year value starts from currently selected year - yearRange, and ends with
			currently selected year + yearRage.
		-->
		<method name="updateYearsInDropDown">
			<![CDATA[
			var currentYear = this.selectedValue.value;
			for (var i = 0, len = 2 * this.yearRange; i <= len; ++i) {
				var year = currentYear + i - this.yearRange;
				var value = this.values[i];
				value.setVariable("displayName", year.toString());
				value.setVariable("value", year);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Handles keyboard shortcuts. Overwrites the default behaviour.
		-->
		<method args="k" name="callOnKeyDown">
			<![CDATA[
			if (k == 37) {
				this.updateYear(-1);
			}
			else if (k == 39) {
				this.updateYear(1);
			}
			]]>
		</method>

		<!---
			@keywords private
			Opens this dropdown, ensuring correct years are populated.
		-->
		<method name="openList">
			<![CDATA[
			this.updateYearsInDropDown();
			this.inherited(arguments);
			this.bringToFront();
			]]>
		</method>
		
		<!---
			@keywords private
			Selects the current year as the dropdown's value.
			@event onselectedValue
		-->
		<method name="selectCurrentYear">
			<![CDATA[
			this.setVariable("selectedValue", this.values[this.yearRange]);
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the value of this dropdown to the given year.
			@param Number year the year to be set to.
		-->
		<method args="year" name="setYear">
			<![CDATA[
			this.selectedValue.value = year;
			this.selectedValue.displayName = year.toString();
			EventUtil.trigger(this, "onselectedValue");
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the the displayed year to the given value. This dropdown's value will
			be updated, but onselectedValue event will not be sent.
			@param Number year the year to be displayed
		-->
		<method args="year" name="changeDisplayedYear">
			<![CDATA[
			if (this.selectedValue) {
				this.selectedValue.value = year;
				this.selectedValue.displayName = year.toString();
			}
			this.updateSelectedValue();
			]]>
		</method>
	</ValueSelector>
	
	<!---
		@keywords private
		This class represents a week in the @{link cmc/foundation/DatePicker}. A week contains seven
		days, each of which represented by {@link cmc/foundation/DatePickerDay}. It also knows which
		date picker panel it is in. A date picker panel is represented by {@link cmc/foundation/DatePickerPopupWindow}.
	-->
	<Component classDefinition="true" definitionName="cmc/foundation/DatePickerWeek">
		<AxisLayout axis="x"/>
		<DatePickerDay name="day0"/>
		<DatePickerDay name="day1"/>
		<DatePickerDay name="day2"/>
		<DatePickerDay name="day3"/>
		<DatePickerDay name="day4"/>
		<DatePickerDay name="day5"/>
		<DatePickerDay name="day6"/>	
	</Component>

	<!---
		@keywords private
		
		This class represents a day interally used by {@link cmc/foundation/DatePicker}. Users clicks on a day
		to select it in a date picker panel. A day can be deactivated if it is displayed in a month
		that it does not belong to. By default, a day is represented as a square box.
	-->
	<FocusableComponent classDefinition="true" definitionName="cmc/foundation/DatePickerDay" focusable="false" width="24" height="24">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="DatePickerPopupWindow" moduleName="cmc/foundation/DatePickerPopupWindow"/>
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<!---
			The value of this day. It is a Javascript Date object. The Date instance's getDay() method
		-->
		<variable name="value" value="${null}"/>
		
		<!---
			True if this instance is active. False otherwise. Only an active instance be manipulated by user.
		-->
		<variable name="active" type="boolean" value="true"/>
		
		<TextComponent fgcolor="${this.parent.active ? '#464646' : '#909090'}" name="dayName" x="${(this.classroot.width - this.width) / 2 }" y="${(this.classroot.height - this.height) / 2}">
			<method name="init">
				<![CDATA[
				this.inherited(arguments);
				this.setVariable("text", this.classroot.value == null ? "" : this.classroot.value.getDate());
				]]>
			</method>
			<handler eventSource="this.classroot" name="onvalue">
				<![CDATA[
				this.setVariable("text", this.classroot.value == null ? "" : this.classroot.value.getDate());
				]]>
			</handler>
		</TextComponent>

		<!---
			@keywords private
		-->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.resetStyleDel = new EventHandler.Class(this, "resetStyle");
			this.resetStyleDel.connect(DatePickerPopupWindow.Singleton, "popupDateChangedEvent");
			this.resetStyle();
			]]>
		</method>

		<!---
			@keywords private
		-->
		<method name="destroy">
			<![CDATA[
			this.resetStyleDel.disconnectAll();
			delete this.resetStyleDel;
			this.inherited(arguments);
			]]>
		</method>

		<!---
			@keywords private
			Sets the year this day is in.
			@param Number year the year to be set
			@event onvalue
		-->
		<method args="year" name="setYear">
			<![CDATA[
			this.value = this.value || DateUtil.Singleton.getCurrentDate();
			this.value.setFullYear(year);
			EventUtil.trigger(this, "onvalue");
			]]>
		</method>

		<!---
			@keywords private
			Sets the month this day is in
			@param Number month the month this day should be in
			@event onvalue
		-->
		<method args="month" name="setMonth">
			<![CDATA[
			this.value = this.value || DateUtil.Singleton.getCurrentDate();
			this.value.setMonth(month);
			EventUtil.trigger(this, "onvalue");
			]]>
		</method>
		
		<!---
			@keywords private
			Sets the date of this day represent in a month
			@param Number date the date to be set
		 -->
		<method args="date" name="setDate">
			<![CDATA[
			this.value = this.value || DateUtil.Singleton.getCurrentDate();
			this.value.setDate(date);
			EventUtil.trigger(this, "onvalue");
			]]>
		</method>
		
		<!---
			@keywords private
			Sets this day with a given date.
			@param Date dateObj the new date this day should represent
		-->
		<method args="dateObj" name="setValue">
			<![CDATA[
			this.value = this.value || DateUtil.Singleton.getCurrentDate();
			with (this.value) {
				setDate(1);
				setFullYear(dateObj.getFullYear());
				setMonth(dateObj.getMonth());
				setDate(dateObj.getDate());
			}
			EventUtil.trigger(this, "onvalue");
			]]>
		</method>

		<!---
			@keywords private
		-->
		<handler name="onmouseover">
			<![CDATA[
			this.setHoverStyle();
			]]>
		</handler>

		<!---
			@keywords private
			Sets the cell with mouse hover look and feel for cells that are active.
		 -->
		<method name="setHoverStyle">
			<![CDATA[
			if (this.active && !DateUtil.Singleton.compareDate(DatePickerPopupWindow.Singleton.selectedDate, this.value)) {
				this.setVariable("bgcolor", "#ffffff");
				this.dayName.setVariable("fgcolor", "#4178be");
			}
			]]>
		</method>

		<!---
			@keywords private
		-->
		<handler name="onmousedown">
			<![CDATA[
			this.setSelectedStyle();
			]]>
		</handler>

		<!---
			@keywords private
			Sets the cell with selected date look and feel for cells that are active.
		 -->
		<method name="setSelectedStyle">
			<![CDATA[
			if (this.active) {
				this.setVariable("bgcolor", "#4178be");
				this.dayName.setVariable("fgcolor", "#ffffff");
			}
			]]>
		</method>

		<!---
			@keywords private
		-->
		<handler name="onactive">
			<![CDATA[
			this.setNormalStyle();
			]]>
		</handler>

		<!--
			@keywords private
			Sets the cell with normal look and feel of the cell. Sets different look and feel for cells from current month and cells from other months.
		 -->
		<method name="setNormalStyle">
			<![CDATA[
			if (this.isinited) {
				if (this.active) {
					this.dayName.setVariable("fgcolor", "#464646");
				}
				else {
					this.dayName.setVariable("fgcolor", "#909090");
				}
				this.setVariable("bgcolor", "#ffffff");
			}
			]]>
		</method>

		<!---
			@keywords private
		-->
		<handler name="onmouseout">
			<![CDATA[
			this.resetStyle();
			]]>
		</handler>

		<!---
			@keywords private
			Resets the cell style.
		 -->
		<method args="e" name="resetStyle">
			<![CDATA[
			if (DateUtil.Singleton.compareDate(DatePickerPopupWindow.Singleton.popupDate, this.value)) {
				if (DateUtil.Singleton.compareDate(DatePickerPopupWindow.Singleton.selectedDate, this.value)) {
					this.setSelectedStyle();
				}
				else {
					this.setHoverStyle();
				}
				this.setVariable("focusable", true);
			}
			else if (DateUtil.Singleton.compareDate(DatePickerPopupWindow.Singleton.selectedDate, this.value)) {
				this.setSelectedStyle();
				this.setVariable("focusable", false);
			}
			else {
				this.setNormalStyle();
				this.setVariable("focusable", false);
			}
			]]>
		</method>

		<!---
			@keywords private
			Updates the selected date with this day when this day is clicked on.
		 -->
		<handler name="onclick">
			<![CDATA[
			var now = DateUtil.Singleton.getCurrentDate();
			with (now) {
				setDate(1);
				setFullYear(this.value.getFullYear());
				setMonth(this.value.getMonth());
				setDate(this.value.getDate());
			}
			DatePickerPopupWindow.Singleton.setVariable("popupDate", now);
			DatePickerPopupWindow.Singleton.dateSelected();
			]]>
		</handler>
		
		<!--- @keywords private -->
		<handler name="onfocus">
			<![CDATA[
			if (!this.indicator) {
				new FocusIndicator.Class(this, {
					name: "indicator",
					focusableView: this,
					indicatorView: this
				});
			}
			]]>
		</handler>

		<!--- @keywords private -->
		<handler args="code" name="onkeydown">
			<![CDATA[
			if (code == 37) {
				DatePickerPopupWindow.Singleton.movePopupDate("left");
			}
			else if (code == 38) {
				DatePickerPopupWindow.Singleton.movePopupDate("above");
			}
			else if (code == 39) {
				DatePickerPopupWindow.Singleton.movePopupDate("right");
			}
			else if (code == 40) {
				DatePickerPopupWindow.Singleton.movePopupDate("below");
			}
			else if (code == 13 || code == 32) {
				EventUtil.trigger(this, "onclick");
			}
			]]>
		</handler>

	</FocusableComponent>
	
	<!---
		@keywords private
		The text used for date picker header
	 -->
	<TextComponent classDefinition="true" definitionName="cmc/foundation/DatePickerHeaderText" width="24" y="2"/>
	
	<!---
		@keywords private
		Button used in a date picker.
	 -->
	<FocusableComponent classDefinition="true" definitionName="cmc/foundation/DatePickerButton" focusable="true" width="${this.text.width + 15}" height="24">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>
		<TextComponent name="text" text="${foundationResources.Singleton.datePickerToday.string}" x="${(this.parent.width - this.width) / 2}" y="${(this.parent.height - this.height) / 2}"/>
		<!--- @keywords private -->
		<handler name="onfocus">
			<![CDATA[
			if (!this.indicator) {
				new FocusIndicator.Class(this, {
					name: "indicator",
					focusableView: this,
					indicatorView: this
				});
			}
			]]>
		</handler>
	</FocusableComponent>
	
	<!---
		@keywords private
		The main panel of a date picker popup. It hosts selectors for users to pick year, month, and
		day. At any moment, an instance of this class displays all the weeks a month occupies.
		If the month is not selected by a user, the month in the current system time will be
		used.
	 -->
	<BaseWindow definitionName="cmc/foundation/DatePickerPopupWindow" focustrap="true" initstage="defer" singletonDefinition="true" visible="false" bgcolor="#ffffff">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>
		<dependency localName="FocusUtil" moduleName="cmc/foundation/FocusUtil"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="PreferenceManager" moduleName="cmc/shell/PreferenceManager"/>
		<!---
			@keywords private
			The date selected by a user
		 -->
		<variable name="selectedDate" value="${null}"/>
		
		<!---
			@keywords private
			The date currently displayed on this window. This value will be
			set to the selectedDate when this panel is closed.
		 -->
		<variable name="popupDate" value="${DateUtil.Singleton.getCurrentDate()}"/>
		
		<!---
			@keywords private
			An object whose method dateSelected() will be called when a user selects a date
			from this panel.
		 -->
		<variable name="callback" value="${null}"/>
		
		<DragState drag_axis="both" drag_min_x="0" drag_min_y="0" name="dragger">
			<variable initialValue="${this.parent.height - this.height}" name="drag_max_y"/>
			<variable initialValue="${this.parent.width - this.width}" name="drag_max_x"/>
		</DragState>

		<Component x="0" y="0" height="24" width="${this.parent.content.width}" bgcolor="#676767"/>
		<Component x="0" y="0" width="1" height="${this.parent.content.height}" bgcolor="#676767"/>
		<Component x="${this.parent.content.width - 1}" y="0" width="1" height="${this.parent.content.height}" bgcolor="#676767"/>
		<Component x="0" y="${this.parent.content.height - 1}" width="${this.parent.content.width}" height="1" bgcolor="#676767"/>
		<Component x="1" y="24" height="24" width="${this.parent.content.width - 2}" bgcolor="#eeeeee"/>
		<Component name="content" width="212">
			<YearSelector name="year" x="8">
				<handler name="onselectedYear">
					<![CDATA[
					this.classroot.setYear(this.getSelectedYear());
					]]>
				</handler>
				<handler args="code" eventSource="this.yearDropDown" name="onkeydown">
					<![CDATA[
					if (code == 13) {
						this.classroot.dateSelected();
					}
					]]>
				</handler>
	   		</YearSelector>
			<MonthSelector name="month" align="right" xoffset="8">
				<handler name="onselectedMonth">
					<![CDATA[
					this.classroot.setMonth(this.getSelectedMonth());
					]]>
				</handler>
				<handler args="code" eventSource="this.monthDropDown" name="onkeydown">
					<![CDATA[
					if (code == 13) {
						this.classroot.dateSelected();
					}
					]]>
				</handler>
			</MonthSelector>
			<DatePickerButton y="24" x="${(this.parent.width - this.width) / 2}">
				<handler name="onclick">
					<![CDATA[
					this.classroot.setVariable("popupDate", DateUtil.Singleton.getCurrentDate());
					]]>
				</handler>
				<handler args="code" name="onkeydown">
					<![CDATA[
					if (code == 32) {
						this.classroot.setVariable("popupDate", DateUtil.Singleton.getCurrentDate());
					}
					else if (code == 13) {
						this.classroot.setVariable("popupDate", DateUtil.Singleton.getCurrentDate());
						this.classroot.dateSelected();
					}
					]]>
				</handler>
			</DatePickerButton>
			<FocusableComponent imageSet="datePickerMonthLeftArrow" name="leftMonthArrow" x="8" y="${(72 + this.parent.weeks.height - this.height) / 2}">
				<handler name="onclick">
					<![CDATA[
					this.classroot.advanceMonth(-1);
					]]>
				</handler>
				<handler args="code" name="onkeydown">
					<![CDATA[
					if (code == 13 || code == 32) {
						EventUtil.trigger(this, "onclick");
					}
					]]>
				</handler>
				<!--- @keywords private -->
				<handler name="onfocus">
					<![CDATA[
					if (!this.indicator) {
						new FocusIndicator.Class(this, {
							name: "indicator",
							focusableView: this,
							indicatorView: this
						});
					}
					]]>
				</handler>
			</FocusableComponent>
	        <Component name="weeks" y="48" x="22">
	        	<AxisLayout axis="y"/>
				<Component name="header" height="24">
					<AxisLayout axis="x" name="headerLayout">
						<method args="e" name="update">
							<![CDATA[
							if (typeof(e) == "undefined") e = null;
							var firstDay = PreferenceManager.Singleton.getPreference("CMCFirstDayOfWeek");
							if (!this.locked && firstDay) {
								this.lock();
								var length = this.components.length - 1;
								while (this.components[0].name != firstDay) this.setLayoutOrder('first', this.components[length]);
								this.locked = false;
							}
							this.inherited(arguments);
							]]>
						</method>
					</AxisLayout>
					<DatePickerHeaderText name="SUN" text="${foundationResources.Singleton.datePickerSun.string}"/>
					<DatePickerHeaderText name="MON" text="${foundationResources.Singleton.datePickerMon.string}"/>
					<DatePickerHeaderText name="TUE" text="${foundationResources.Singleton.datePickerTue.string}"/>
					<DatePickerHeaderText name="WED" text="${foundationResources.Singleton.datePickerWed.string}"/>
					<DatePickerHeaderText name="THU" text="${foundationResources.Singleton.datePickerThu.string}"/>
					<DatePickerHeaderText name="FRI" text="${foundationResources.Singleton.datePickerFri.string}"/>
					<DatePickerHeaderText name="SAT" text="${foundationResources.Singleton.datePickerSat.string}"/>
				</Component>
				<Component width="168" height="1" bgcolor="#d6d6d6"/>
				<DatePickerWeek name="week0"/>
				<DatePickerWeek name="week1"/>
				<DatePickerWeek name="week2"/>
				<DatePickerWeek name="week3"/>
				<DatePickerWeek name="week4"/>
				<DatePickerWeek name="week5"/>
				<Component height="1"/>
	        </Component>
			<FocusableComponent focusable="true" imageSet="datePickerMonthRightArrow" name="rightMonthArrow" y="${(72 + this.parent.weeks.height - this.height) / 2}" align="right" xoffset="8">
				<handler name="onclick">
					<![CDATA[
					this.classroot.advanceMonth(1);
					]]>
				</handler>
				<handler args="code" name="onkeydown">
					<![CDATA[
					if (code == 13 || code == 32) {
						EventUtil.trigger(this, "onclick");
					}
					]]>
				</handler>
				<!--- @keywords private -->
				<handler name="onfocus">
					<![CDATA[
					if (!this.indicator) {
						new FocusIndicator.Class(this, {
							name: "indicator",
							focusableView: this,
							indicatorView: this
						});
					}
					]]>
				</handler>
			</FocusableComponent>
		</Component>
		
		<!---
			@keywords private
			Returns the first day off set value depending on the firstDayOfWeek preference set by the business user.
			@return number
		 -->		
		<method name="getFirstDayOffSet">
			<![CDATA[
			var firstDay = PreferenceManager.Singleton.getPreference("CMCFirstDayOfWeek");
			var offset = 0;
			if (firstDay == 'SUN') offset = 0;
			else if (firstDay == 'MON') offset = 1;
			else if (firstDay == 'TUE') offset = 2;
			else if (firstDay == 'WED') offset = 3;
			else if (firstDay == 'THU') offset = 4;
			else if (firstDay == 'FRI') offset = 5;
			else if (firstDay == 'SAT') offset = 6;
			return offset;
			]]>
		</method>
		
		<!---
			@keywords private
			@return true if the mouse cursor is contained in this panel, including the dropdown of
				 the year selector or the month selector. False otherwise.
		 -->
		<method name="containsMouse">
			<![CDATA[
			if (this.containsPt(this.getMouse("x"), this.getMouse("y"))) {
				return true;
			}
			return this.content.month.containsMouse() || this.content.year.containsMouse();
			]]>
		</method>
		
		<!---
			@keywords private
			Calculates which day in a week at which the month of the given
			date starts. For example, if the given date is 2007-11-01,
			this function will return 6, because 2007-Nov-01 is Saturday.
			@param Date date the date to be used for calculation
			@return Number the day in a week at which the month of the given
			date starts.
		-->
		<method args="date" name="getStartDayOfMonth">
			<![CDATA[
			var day = this.popupDate.getDay() - ((this.popupDate.getDate() - 1) % 7);
			day = (day < 0 ? day + 7 : day) - this.getFirstDayOffSet();
			if (day < 0) day = day + 7;
			return day;
			]]>
		</method>
		
		<!---
			@keywords private
			@return cmc/foundation/Component the area that contains all the works for a particular month
		 -->
		<method name="getWeeksArea">
			<![CDATA[
			return this.content.weeks;
			]]>
		</method>
		
		<!---
			@keywords private
			Searches for a cell in the current month for a given date.
			@param Date currentDate the given date in the current month.
			@param Number dayOffset a signed integer denoting the number of days to add to the given date.
			@param Number weekOffset a signed integer denoting the number of weeks to add to the given date.
			@return cmc/foundation/DatePickerDay the resultant cell. Returns null if the cell is not found.
		-->
		<method args="currentDate, dayOffset, weekOffset" name="findCell">
			<![CDATA[
			var cell = null;
			var weeks = this.getWeeksArea();
			var startDay = this.getStartDayOfMonth(currentDate);
			var cellCount = currentDate.getDate() + startDay - 1 + dayOffset;
			var weekIndex = Math.floor(cellCount / 7) + weekOffset;
			var dayIndex = cellCount % 7;
			if (0 <= weekIndex && weekIndex <= 5 && 0 <= dayIndex && dayIndex <= 6) {
				cell = weeks["week" + weekIndex]["day" + dayIndex];
			}
			return cell;
			]]>
		</method>

		<!---
			@keywords private
			If the first week displayed in this panel contains days from the previous month, populates these
			days to the first week.
		-->
		<method name="populateDaysFromPreviousMonth">
			<![CDATA[
			var date = DateUtil.Singleton.getCurrentDate();
			with (date) {
				setDate(1);
				setFullYear(this.popupDate.getFullYear());
				setMonth(this.popupDate.getMonth() - 1);
			}
			var startDay = this.getStartDayOfMonth(this.popupDate);
			var daysInPrevMonth = DateUtil.Singleton.daysinmonth(date);
			var weeks = this.getWeeksArea();
			for (var day = 0; day < startDay; ++day) {
				date.setDate(daysInPrevMonth + 1 - startDay + day);
				weeks.week0["day" + day].setValue(date);
				weeks.week0["day" + day].setVariable("active", false);
			}
			]]>
		</method>
		
		
		<!---
			@keywords private
			Populates all the days in the current displayed month to this panel.
		-->
		<method name="populateDaysForThisMonth">
			<![CDATA[
			var weeks = this.getWeeksArea();
			var numberOfDays = DateUtil.Singleton.daysinmonth(this.popupDate);
			var startDay = this.getStartDayOfMonth(this.popupDate);
			var date = DateUtil.Singleton.getCurrentDate();
			with (date) {
				setDate(1);
				setFullYear(this.popupDate.getFullYear());
				setMonth(this.popupDate.getMonth());
			}
			var cellCount = startDay;
			for (var day = 1; day <= numberOfDays; ++day) {
				var weekIndex = Math.floor(cellCount / 7);
				var dayIndex = cellCount % 7;
				date.setDate(day);
				weeks["week" + weekIndex]["day" + dayIndex].setValue(date);
				weeks["week" + weekIndex]["day" + dayIndex].setVariable("active", true);
				cellCount++;
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Hides all the unused weeks in this panel. There will be unused weeks
			because the panel holds as many as 6 weeks, but not every month uses
			6 weeks.
		-->
		<method name="hideUnusedWeeks">
			<![CDATA[
			var startDay = this.getStartDayOfMonth(this.popupDate);
			var numberOfDays = DateUtil.Singleton.daysinmonth(this.popupDate);
			var lastWeek = Math.floor((numberOfDays + startDay - 1) / 7);
			var weeks = this.getWeeksArea();
			for (var week = lastWeek + 1; weeks["week" + week]; ++week) {
				weeks["week" + week].setVariable("visible", false);
				for (var i = 0; i < 7; i++) {
					weeks["week" + week]["day" + i].value = null;
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			If the last week contains days for the month next to the currently displayed one, populates
			those days to the last week.
		-->
		<method name="populateDaysForNextMonth">
			<![CDATA[
			var startDay = this.getStartDayOfMonth(this.popupDate);
			var numberOfDays = DateUtil.Singleton.daysinmonth(this.popupDate);
			var weeks = this.getWeeksArea();
			var lastWeek = Math.floor((numberOfDays + startDay - 1) / 7);
			weeks["week" + lastWeek].setVariable("visible", true);
			var date = DateUtil.Singleton.getCurrentDate();
			with (date) {
				setDate(1);
				setFullYear(this.popupDate.getFullYear());
				setMonth(this.popupDate.getMonth() + 1);
			}
			var daysForNextMonth = (lastWeek + 1) * 7 - numberOfDays - startDay;
			for (var day = 0; day < daysForNextMonth; ++day) {
				date.setDate(daysForNextMonth - day);
				var dayOffset = 6 - day;
				weeks["week" + lastWeek]["day" + dayOffset].setValue(date);
				weeks["week" + lastWeek]["day" + dayOffset].setVariable("active", false);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Populates days and update the headers that should be displayed for the currently selected month in this
			panel.
		-->
		<method name="populateDays">
			<![CDATA[
			this.content.weeks.header.headerLayout.update();
			this.populateDaysFromPreviousMonth();
			this.populateDaysForThisMonth();
			this.populateDaysForNextMonth();
			this.hideUnusedWeeks();
			]]>
		</method>

		<!---
			@keywords private
			Sets the displayed month and year on the toolbar view.
		-->
		<method name="setToolbarValues">
			<![CDATA[
			this.content.month.changeDisplayedMonth(this.popupDate.getMonth());
			this.content.year.changeDisplayedYear(this.popupDate.getFullYear());
			]]>
		</method>
		
		<!---
			@keywords private
		-->
		<handler name="onpopupDate">
			<![CDATA[
			this.updateDisplay();
			]]>
		</handler>
		
		<!---
			@keyword private
			Updates the displayed values when the currently selected date is changed.
		 -->
		<method name="updateDisplay">
			<![CDATA[
			this.setToolbarValues();
			this.populateDays();
			EventUtil.trigger(this, "popupDateChangedEvent");
			]]>
		</method>
		
		<!---
			@keyword private
			Updates the toolbar view to reflect the user date format preference
		 -->
		<method name="setToolbarView">
			<![CDATA[
			var month = this.content.month;
			var year = this.content.year;
			var monthPos = this.content.childComponents.indexOf(month);
			var yearPos = this.content.childComponents.indexOf(year);
			if (DateUtil.Singleton.isMonthBeforeYear()) {
				if (monthPos > yearPos) {
					this.content.childComponents.splice(monthPos, 1);
					this.content.childComponents.splice(yearPos, 0, month);
					month.setVariable("align", null);
					month.setVariable("xoffset", 0);
					month.setVariable("x", 4);
					year.setVariable("xoffset", 8);
					year.setVariable("align", "right");
				}
			}
			else {
				if (yearPos > monthPos) {
					this.content.childComponents.splice(yearPos, 1);
					this.content.childComponents.splice(monthPos, 0, year);
					year.setVariable("align", null);
					year.setVariable("xoffset", 0);
					year.setVariable("x", 8);
					month.setVariable("xoffset", 8);
					month.setVariable("align", "right");
				}
			}
			]]>
		</method>
		
		<!---
			@keyword private
			Sets the correct date values when this panel's visibility changes
		 -->
		<handler name="onvisible">
			<![CDATA[
			if (this.visible) {
				this.popupDate = (this.selectedDate ? new Date(this.selectedDate) : DateUtil.Singleton.getCurrentDate());
				this.updateDisplay();
				FocusUtil.setFocus(this.findCell(this.popupDate, 0, 0), false);
			}
			else {
				this.callback = null;
			}
			]]>
		</handler>
		
		<!---
			@keywords private
			Changes the selected month by the given difference.
			@param Number diff the number of months to be changed. Negative value means substraction. Positive means addition.
		 -->
		<method args="diff" name="advanceMonth">
			<![CDATA[
			this.setMonth(this.popupDate.getMonth() + diff);
			]]>
		</method>

		<!---
			@keywords private
			Changes the selected year by the given difference.
			@param Number diff the number years to be changed. Negative value means substraction. Positive means addition.
		 -->
		<method args="diff" name="advanceYear">
			<![CDATA[
			this.setYear(this.popupDate.getFullYear() + diff);
			]]>
		</method>

		<!---
			@keywords private
			Sets the selected year to the given year.
			@param Number year the year to be changed to
		 -->
		<method args="year" name="setYear">
			<![CDATA[
			this.popupDate.setFullYear(year);
			EventUtil.trigger(this, "onpopupDate");
			]]>
		</method>
				
		<!---
			@keywords private
			Sets the selected month to the given month
			@param Number month the month to set
		 -->
		<method args="month" name="setMonth">
			<![CDATA[
			var tempDate = DateUtil.Singleton.copydate(this.popupDate);
			tempDate.setDate(1);
			tempDate.setMonth(month);
			if (this.popupDate.getDate() > DateUtil.Singleton.daysinmonth(tempDate)) {
				this.popupDate.setDate(DateUtil.Singleton.daysinmonth(tempDate));
			}
			this.popupDate.setMonth(month);
			EventUtil.trigger(this, "onpopupDate");
			]]>
		</method>
		
		
		<!---
			@keywords private
			Sets the selected day to the given day
			@param Number day the day to be set to			
		 -->
		<method args="day" name="setDay">
			<![CDATA[
			this.popupDate.setDate(day);
			EventUtil.trigger(this, "onpopupDate");
			]]>
		</method>
		
		<!---
			Notifies that a user finally selects a date, and syncrhonizes the selectedDate with the popupDate.
		 -->
		<method name="dateSelected">
			<![CDATA[
			this.setVariable("selectedDate", this.popupDate);
			this.callback && this.callback.dateSelected && this.callback.dateSelected();
			]]>
		</method>
		
		<!---
			@keywords private
			Moves the popup date in the given direction. Also highlites the new cell.
			@param String direction the direction in which the current popup date has to be moved to.
		 -->
		<method args="direction" name="movePopupDate">
			<![CDATA[
			var dayOffset = 0;
			var weekOffset = 0;
			if (direction == "left") {
				dayOffset = -1;
				weekOffset = 0;
			}
			else if (direction == "above") {
				dayOffset = 0;
				weekOffset = -1;
			}
			else if (direction == "right") {
				dayOffset = 1;
				weekOffset = 0;
			}
			else if (direction == "below") {
				dayOffset = 0;
				weekOffset = 1;
			}
			var nextCell = this.findCell(this.popupDate, dayOffset, weekOffset);
			if (nextCell && DateUtil.Singleton.datemonthsdiff(nextCell.value, this.popupDate) == 0) {
				this.popupDate = nextCell.value;
				EventUtil.trigger(this, "popupDateChangedEvent");
				FocusUtil.setFocus(nextCell, false);
			}
			]]>
		</method>
		<handler name="onmousedown">
			<![CDATA[
			this.dragger.setVariable("active", true);
			]]>
		</handler>
		<handler name="onmouseup">
			<![CDATA[
			this.dragger.setVariable("active", false);
			]]>
		</handler>
	</BaseWindow>
	
	<!---
		@keywords private
		
		The class represents a date picker that allows users to select a date. The selected date will be stored in
		a property bound to this date picker. The selected date can be retrieved by calling {@link cmc/foundation/DatePicker#getDate}.
	-->
	<FocusableComponent classDefinition="true" definitionName="cmc/foundation/DatePicker" focusable="false">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="MouseUtil" moduleName="cmc/foundation/MouseUtil"/>
		<dependency localName="ViewUtil" moduleName="cmc/foundation/ViewUtil"/>
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="DatePickerPopupWindow" moduleName="cmc/foundation/DatePickerPopupWindow"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="FocusUtil" moduleName="cmc/foundation/FocusUtil"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<dependency localName="PreferenceManager" moduleName="cmc/shell/PreferenceManager"/>
		<dependency localName="ModalUtil" moduleName="cmc/foundation/ModalUtil"/>
		<dependency localName="RootComponent" moduleName="cmc/RootComponent"/>
		<dependency localName="KeyUtil" moduleName="cmc/foundation/KeyUtil"/>
		<!--- Reference to cmc/foundation/ModelProperty object that is being edited. -->
		<variable name="property" value="${null}"/>
		<!--- Whether or not to ignore the time when saving the date string value. Default value is <code>false</code>. -->
		<variable name="dateOnly" type="boolean" value="false"/>
		<!---
			When true, the time of day for this date picker will be saved to the server as the end of the day 23:59:59:999
			otherwise start of day is used 00:00:00:001. This attribute is ignored if {@link cmc/foundation/DatePicker#dateOnly} is <code>true</code>.
		-->
		<variable name="endOfDay" type="boolean" value="false"/>

		<!---
			The pattern used to format the date for display. This value should not be
			set directly. It is taken from the current user preference.
		-->
		<variable initialValue="${DateUtil.Singleton.getDatePreferenceFormat()}" name="displayFormat"/>
		<!---
			The prompt text displayed when no date has been entered. This value should not be
			set directly. It is taken from the current user preference.
		-->
		<variable initialValue="${DateUtil.Singleton.getDatePreferenceFormatDisplayKey().string}" name="promptText"/>
		<!--- @keywords private -->
		<variable name="useCompactPadding" type="boolean" value="false"/>
		<!--- @keywords private -->
		<variable name="showReverseImage" type="boolean" value="false"/>
		
		<!---
			@keywords private
		-->
		<method name="destroy">
			<![CDATA[
			if (this.updateValueDel) {
				this.updateValueDel.disconnectAll();
				delete this.updateValueDel;
			}
			if (this.updatePromptDel) {
				this.updatePromptDel.disconnectAll();
				delete this.updatePromptDel;
			}
			this.inherited(arguments);
			]]>
		</method>

		<!---
			@keywords private
		-->
		<handler name="oninit">
			<![CDATA[
			if (this.property) {
				this.updateValue();
			}
			this.updatePrompt();
			]]>
		</handler>

		<!---
			Closes the date picker panel when mouse clicks outside of the date picker panel;
		-->
		<method args="e" name="checkMouse">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (!DatePickerPopupWindow.Singleton.containsMouse()) {
				this.shrinkToIcon();
			}
			]]>
		</method>
		
		<!---
			Opens the date picker panel when user clicks on the date picker button
		 -->
        <method name="expandFromIcon">
			<![CDATA[
			DatePickerPopupWindow.Singleton.completeInstantiation();
			DatePickerPopupWindow.Singleton.setToolbarView();
			DatePickerPopupWindow.Singleton.setVariable("selectedDate", this.getDate() || DateUtil.Singleton.getCurrentDate());
			DatePickerPopupWindow.Singleton.setVariable("callback", this);
			DatePickerPopupWindow.Singleton.setVariable("x", this.getVariableRelative("x", RootComponent.Singleton) + this.width);
			var popupY = this.getVariableRelative("y", RootComponent.Singleton) + this.height;
			DatePickerPopupWindow.Singleton.setVariable("y", popupY);
			var popupX = this.getVariableRelative("x", RootComponent.Singleton);
			DatePickerPopupWindow.Singleton.setVariable("x", popupX);
			DatePickerPopupWindow.Singleton.setVariable("visible", true);
			if ((popupY + DatePickerPopupWindow.Singleton.height) > (RootComponent.Singleton.height - 10)) {
				popupY = RootComponent.Singleton.height - DatePickerPopupWindow.Singleton.height - 10;
				DatePickerPopupWindow.Singleton.setVariable("y", popupY);
			}
			if ((popupX + DatePickerPopupWindow.Singleton.width) > (RootComponent.Singleton.width - 10)) {
				popupX = RootComponent.Singleton.height - DatePickerPopupWindow.Singleton.width - 10;
				DatePickerPopupWindow.Singleton.setVariable("x", popupX);
			}
			DatePickerPopupWindow.Singleton.bringToFront();
			if (!this.checkMouseDel) {
				this.checkMouseDel = new EventHandler.Class(this, "checkMouse");
			}
			if (!this.shrinkToIconDel) {
				this.shrinkToIconDel = new EventHandler.Class(this, "shrinkToIcon");
			}
			this.checkMouseDel.connect(MouseUtil, "onmousedown");
			KeyUtil.callOnKeyCombo(this.shrinkToIconDel, ['esc']);
			ModalUtil.makeModal(DatePickerPopupWindow.Singleton);
			]]>
		</method>

		<!---
			@keywords private
			Closes the date picker panel.
		 -->
		<method args="e" name="shrinkToIcon">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			ModalUtil.release(DatePickerPopupWindow.Singleton);
			DatePickerPopupWindow.Singleton.setVariable("callback", null);
			DatePickerPopupWindow.Singleton.setVariable("visible", false);
			this.checkMouseDel.disconnectAll();
			KeyUtil.removeKeyComboCall(this.shrinkToIconDel, ['esc']);
			FocusUtil.setFocus(this.normal_view.icon, false);
			]]>
		</method>

		<!---
			@keywords private
			Sets the date with the value in date picker panel and closes the panel.
		 -->
		<method name="dateSelected">
			<![CDATA[
			if (this == DatePickerPopupWindow.Singleton.callback) {
				this.setDate(DatePickerPopupWindow.Singleton.selectedDate);
				this.storeValue();
				this.shrinkToIcon();
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Updates the displayed prompt text in the date picker's text box
		 -->
		<method args="e" name="updatePrompt">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (this.updatePromptDel) {
				this.updatePromptDel.disconnectAll();
			}
			else {
				this.updatePromptDel = new EventHandler.Class(this, "updatePrompt");
			}
			this.updatePromptDel.connect(DateUtil.Singleton.getDatePreferenceFormatDisplayKey(), "onstring");
			var dateString = this.getDateString();
			this.promptText = DateUtil.Singleton.getDatePreferenceFormatDisplayKey().string;
			if (this.enabled && dateString == "" && !ViewUtil.Singleton.containsView(this.normal_view.dateview.datestr, FocusUtil.getFocus())) {
				this.normal_view.dateview.datestr.setText(this.promptText);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This handler will update the date field if the user changes their date format preference
		-->
		<handler args="preference" eventSource="PreferenceManager.Singleton" name="preferenceChanged">
			<![CDATA[
			if (preference == "CMCDateFormat") {
				var date = this.getDate();
				this.displayFormat = DateUtil.Singleton.getDatePreferenceFormat();
				if (date != null) {
					this.setDate(date);
				}
				this.updatePrompt();
			}
			]]>
		</handler>
		
		<!---
			@keywords private
			Sets the selected date with the given new date.
			@param Date newDate the given new date
		-->
		<method args="newDate" name="setDate">
			<![CDATA[
			var dateString = "";
			if (newDate != null) {
				dateString = DateUtil.Singleton.format(newDate, this.displayFormat);
			}
			this.setDateString(dateString);
			]]>
		</method>
		
		<!---
			@keywords private
			Gets the selected date
			@return Date the selected date of this date picker
		-->
		<method name="getDate">
			<![CDATA[
			var dateString = this.getDateString();
			return DateUtil.Singleton.parse(dateString, this.displayFormat);
			]]>
		</method>
		
		<!---
			@keywords private
			Gets the selected date as a string.
			@return string the selected date as a string
		-->
		<method name="getDateString">
			<![CDATA[
			var dateString = this.normal_view.dateview.datestr.getText();
			if (dateString == this.promptText) {
				dateString = "";
			}
			return dateString;
			]]>
		</method>
		
		<!---
			Set the date to the specified string.
			@keywords private
		-->
		<method args="dateString" name="setDateString">
			<![CDATA[
			this.normal_view.dateview.datestr.setText(dateString);
			this.updatePrompt();
			]]>
		</method>
		
		<!---
			@keywords private
			Sets a new property object.
			@param cmc/foundation/ModelProperty newProperty the new model property associated with this date picker
		-->
		<method args="newProperty" name="setProperty">
			<![CDATA[
			if (newProperty != this.property) {
				if (typeof (this.updateValueDel) == "undefined") {
					this.updateValueDel = new EventHandler.Class(this, "updateValue");
				}
				this.updateValueDel.disconnectAll();
				this.property = newProperty;
				if (this.property) {
					this.updateValueDel.connect(this.property, "onvalue");
					this.updateValue();
				}
				else if (this.isinited) {
					this.setDateString("");
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Updates the date picker with a new property value.
		-->
		<method args="e" name="updateValue">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this._updateValueLock = true;
			if (this.isinited) {
				var value = this.property.value;
				var newDate = DateUtil.Singleton.parse(value, DateUtil.Singleton.DATE_FORMAT);
				if (newDate != null) {
					this.setDate(newDate);
				}
				else {
					this.setDateString(value);
				}
				this._updateValueLock = false;
			}
			]]>
		</method>

		<!---
			@keywords private
			Stores the property value with the selected date
		-->
		<method name="storeValue">
			<![CDATA[
			var newDate = this.getDate();
			if (newDate != null) {
				this.setDate(newDate);
				if (this.property && !this._updateValueLock) {
					var currentDate = DateUtil.Singleton.parse(this.property.value, DateUtil.Singleton.DATE_FORMAT);
					if (DateUtil.Singleton.normalizeToMilliseconds(newDate) != DateUtil.Singleton.normalizeToMilliseconds(currentDate)) {
						var newValue = null;
						if (this.dateOnly) {
							newValue = DateUtil.Singleton.format(newDate, DateUtil.Singleton.DATE_ONLY_FORMAT);
						}
						else {
							newValue = (this.endOfDay) ? DateUtil.Singleton.format(newDate, DateUtil.Singleton.DATE_FORMAT_END) : DateUtil.Singleton.format(newDate, DateUtil.Singleton.DATE_FORMAT);
						}
						this.property.change(newValue);
						if (Logger.Singleton.enabled) {
							Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/foundation/DatePicker", "storeValue", "updates the model property " + this.property.propertyName + " with new value " + newValue + this.property.o.logString());
						}
					}
				}
			}
			else if (this.property && !this._updateValueLock) {
				this.property.change(this.getDateString());
				if (Logger.Singleton.enabled) {
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/foundation/DatePicker", "storeValue", "updates the model property " + this.property.propertyName + " with new value " + this.getDateString() + this.property.o.logString());
				}
			}
			]]>
		</method>
		
		<Component clickable="${!this.classroot.enabled}" focusable="false" name="normal_view">
			<AxisLayout axis="x" spacing="3"/>
			<Component name="dateview">
				<InputText enabled="${this.classroot.enabled}" name="datestr" width="${this.classroot.useCompactPadding ? 94 : 100}" inputTextPadding="${this.classroot.useCompactPadding ? 5 : 8}" height="${this.classroot.useCompactPadding ? 26 : 30}">
					<handler name="onfocus">
						<![CDATA[
						if (this.enabled && this.getText() == this.classroot.promptText) {
							this.setText("");
						}
						]]>
					</handler>
					
					<handler name="onblur">
						<![CDATA[
						if (this.enabled) {
							this.classroot.storeValue();
							if (this.getText() == "") {
								this.setText(this.classroot.promptText);
							}
						}
						]]>
					</handler>
					
					<handler name="ontext">
						<![CDATA[
						this.classroot.storeValue();
						]]>
					</handler>
					
					<handler name="onenabled">
						<![CDATA[
						if (!this.enabled && this.getText() == this.classroot.promptText) {
							this.setText("");
						}
						else if (this.enabled && this.getText() == "") {
							this.setText(this.classroot.promptText);
						}
						]]>
					</handler>
				</InputText>
		    </Component>
	        <FocusableBaseButton enabled="${this.classroot.enabled}" imageSet="calendarButton" name="icon" valign="middle"
	        		normalImage="${this.classroot.showReverseImage ? 3 : 1}" overImage="${this.classroot.showReverseImage ? 3 : 1}"
					downImage="${this.classroot.showReverseImage ? 3 : 1}" disabledImage="2">	
	            <Tooltip text="${foundationResources.Singleton.datePickerTip.string}"/>	
	            <handler name="onclick">
					<![CDATA[
					if (this.classroot.enabled) {
						this.classroot.expandFromIcon();
					}
					]]>
				</handler>			
	        </FocusableBaseButton>
        </Component>
		<!---
			@keywords private
		-->
    	<method args="property" name="set_property">
			<![CDATA[
			this.setProperty(property);
			]]>
		</method>
	</FocusableComponent>
</Definitions>