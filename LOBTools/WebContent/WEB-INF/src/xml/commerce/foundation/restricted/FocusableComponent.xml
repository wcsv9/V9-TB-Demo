<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<Component classDefinition="true" definitionName="cmc/foundation/FocusableComponent" focusable="true">
		<dependency moduleName="cmc/RootComponent" localName="RootComponent"/>
		<variable name="enabled" value="true" type="boolean"/>
		<variable name="_enabled" value="${this.enabled &amp;&amp; (this._parentcomponent ? this._parentcomponent._enabled : true)}" type="boolean"/>
		<variable name="_focusable" value="true" type="boolean"/>
		<variable name="doesenter" value="false" type="boolean"/>
		<variable name="_parentcomponent" value="null"/>

		<method name="constructor" args="parent, args">
			<![CDATA[
			// initialize internal _parentcomponent attribute
			var p = this.immediateParent;
			while (p != RootComponent.Singleton) {
			    if (p instanceof exports.Class) {
			        this._parentcomponent = p;
			        break;
			    }
			    p = p.immediateParent;
			}
			]]>
		</method>
		
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this._initcomplete = true;
			this._showEnabled();
			]]>
		</method>
		
		<method name="_showEnabled"/>
		
		<method name="set__enabled" args="value">
			<![CDATA[
			this._enabled = value;
			var newFocusable = value && this._focusable;
			if (newFocusable != this.focusable) {
				this.focusable = newFocusable;
				EventUtil.trigger(this, "onfocusable", newFocusable);
			}
			if (this._initcomplete) {
				this._showEnabled();
			}
			EventUtil.trigger(this, "on_enabled", value);
			]]>
		</method>
		
		<method name="set_focusable" args="value">
			<![CDATA[
			this._focusable = value;
			if (this._enabled) {
				this.focusable = this._focusable;
			}
			else {
				this.focusable = false;
			}
			EventUtil.trigger(this, "onfocusable", value); 
			]]>
		</method>
        
	</Component>
</Definitions>