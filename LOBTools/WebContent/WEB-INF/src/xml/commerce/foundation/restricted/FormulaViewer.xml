<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<!---
		@keywords private 

		Formula viewer is a widget that you can use to display a formula. It consists of a list of {@link cmc/foundation/FormulaElement} presented in
		graphical form, and in the order defined by sequence-related parameters in this class.

		The class needs to provide the {@link cmc/foundation/ObjectDefinition#objectType object types} of the child or reference objects to be displayed,
		as well as the start element properties in the formula.

		Instances of this type should not be created, nor should this class be extended. Instead, use {@link cmc/foundation/PropertyFormulaViewer} as needed.
	-->
	<FocusableComponent classDefinition="true" definitionName="cmc/foundation/BaseFormulaViewer" focusable="false" visible="true">
		<dependency localName="SequenceSortComparator" moduleName="cmc/foundation/SequenceSortComparator"/>
		<dependency localName="FormulaElement" moduleName="cmc/foundation/FormulaElement"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<!---
			A comma separated list of {@link cmc/foundation/ObjectDefinition#objectType object types} to be displayed in this formula viewer.
			This is a required attribute.
		-->
		<variable name="objectTypes" type="string"/>

		<!---
			@keywords private
			Model object instance.
		-->
		<variable name="o"/>

		<!---
			When a value for sequencePropertyName is specified, the sequence of elements in the viewer is controlled by the property
			with this name. The property must be a number.
		-->
		<variable name="sequencePropertyName" type="string" value="${null}"/>

		<!---
			When a value for {@link cmc/foundation/BaseFormulaViewer#sequencePropertyName sequencePropertyName} is specified, the
			value of this property will be used to help resolve the property value.
		-->
		<variable name="sequencePropertyPath" type="string" value="${null}"/>

		<!---
			This attribute contains the name of the resource to be used as an icon in the formula viewer for the start element.
		-->
		<variable name="startElementIcon" type="string" value="${null}"/>

		<!---
			This attribute specifies the text to be used as the label text for formula icon in the formula viewer for the start element.
		-->
		<variable name="startElementText" type="string" value="${null}"/>

		<!---
			@keywords private
			A reference to the sorter for the formula. This will be defined when {@link cmc/foundation/BaseFormulaViewer#sequencePropertyName sequencePropertyName}
			is not null.
		-->
		<variable name="formulaViewerSorter" value="${null}"/>

		<!--- @keywords private -->
		<method args="args, parent" name="constructor">
			<![CDATA[
			this.releaseModelObjectDel = new EventHandler.Class(this, "releaseModelObject");
			this.o = null;
			]]>
		</method>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			if (this.sequencePropertyName != null) {
				if (!this.formulaViewerSorter) {
					this.formulaViewerSorter = new SequenceSortComparator.Class(this);
				}
				this.formulaViewerSorter.setVariable("sequencePropertyName", this.sequencePropertyName);
				this.formulaViewerSorter.setVariable("sequencePropertyPath", this.sequencePropertyPath);
			}
			if (this.o) {
				this.o.bindViewToChildren(this.borderView.elements, null, this.objectTypes, this.formulaViewerSorter);
			}
			this.inherited(arguments);
			]]>
		</method>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.o) {
				this.o.releaseViewFromChildren(this.borderView.elements);
			}
			this.releaseModelObjectDel.disconnectAll();
			delete this.releaseModelObjectDel;
			this.inherited(arguments);
			]]>
		</method>

		<!---
			@keywords private
			This method sets the model object for this tree node to the specified object.
			@param cmc/foundation/ModelObject newObject: the new object
		-->
		<method args="newObject" name="setModelObject">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.view", "cmc/foundation/BaseFormulaViewer", "setModelObject(newObject)", [newObject]);
			}
			if (this.o !== newObject) {
				this.releaseModelObjectDel.disconnectAll();
				if (this.o) {
					this.o.releaseViewFromChildren(this.borderView.elements);
				}
				this.o = newObject;
				if (this.o) {
					this.releaseModelObjectDel.connect(this.o, "beingDestroyed");
					if (this.borderView && this.borderView.elements) {
						this.o.bindViewToChildren(this.borderView.elements, null, this.objectTypes, this.formulaViewerSorter);
					}
				}
				EventUtil.trigger(this, "ono", this.o);
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.view", "cmc/foundation/BaseFormulaViewer", "setModelObject(newObject)");
			}
			]]>
		</method>

		<!---
			@keywords private
			This method releases the {@link cmc/foundation/ModelObject model object} from this formula viewer.
		-->
		<method args="e" name="releaseModelObject">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.setVariable("o", null);
			]]>
		</method>

		<BorderedView borderColor="${this.classroot.style.bordercolumnlistcolor}" borderSize="1" name="borderView">
			<Component name="startElement" width="${this.startElementIcon.width &gt; this.startElementText.width ? this.startElementIcon.width + 10 : this.startElementText.width + 10}">
				<Component align="center" imageSet="${this.classroot.startElementIcon}" name="startElementIcon"/>
				<TextComponent align="center" name="startElementText" text="${this.classroot.startElementText}"/>
				<AxisLayout axis="y"/>
			</Component>
			<TextComponent fontsize="30" name="startElementOperator" text="="/>
			<Component name="elements">
				<variable name="objectClass" type="module" value="${FormulaElement}"/>
				<variable name="activeSort" type="boolean" value="true"/>
				<AxisLayout axis="x" spacing="5"/>
			</Component>
			<AxisLayout axis="x" spacing="5"/>
		</BorderedView>
	<method args="o" name="set_o">
			<![CDATA[
			this.setModelObject(o);
			]]>
		</method></FocusableComponent>

	<!---
		@keywords final

		This class defines a formula viewer for use within a properties view. The widget will display a list of formula elements which
		constructs the formula, presented in graphical form, and in the order defined by sequence-related parameters in this class.
	-->
	<PropertiesComponent classDefinition="true" definitionName="cmc/foundation/PropertyFormulaViewer">
		<dependency localName="BaseFormulaViewer" moduleName="cmc/foundation/BaseFormulaViewer"/>
		<!---
			Comma separated list of object types to be displayed in this formula viewer.
			This is a required attribute.
		-->
		<variable name="objectTypes" type="string"/>

		<!---
			Defines a property to use to sequence the elements in the viewer. When this value is provided, the elements will be
			sequenced by the value of this property.
		-->
		<variable name="sequencePropertyName" type="string" value="${null}"/>

		<!---
			This property is used in conjunction with {@link cmc/foundation/PropertyFormulaViewer#sequencePropertyName} to resolve the value of
			the sequence property.
		-->
		<variable name="sequencePropertyPath" type="string" value="${null}"/>

		<!---
			This attribute contains the name of the resource to be used as an icon in the formula viewer for the start element.
		-->
		<variable name="startElementIcon" type="string" value="${null}"/>

		<!---
			This attribute specifies the text to be used as the label text for formula icon in the formula viewer for the start element.
		-->
		<variable name="startElementText" type="string" value="${null}"/>

		<!---
			@keywords private
			This method creates the editor for the given property component.
			@param cmc/foundation/PropertiesComponent parentComponent The parent properties component from which to create the editor.
		-->
		<method args="parentComponent" name="createEditor">
			<![CDATA[
			new BaseFormulaViewer.Class(parentComponent, {
				name: "editor",
				model: parentComponent.model,
				x: parentComponent.promptWidth + parentComponent.xspacing,
				o: parentComponent.o,
				objectTypes: this.objectTypes,
				sequencePropertyName: this.sequencePropertyName,
				sequencePropertyPath: this.sequencePropertyPath,
				startElementIcon: this.startElementIcon,
				startElementText: this.startElementText
			});
			]]>
		</method>
	</PropertiesComponent>

</Definitions>