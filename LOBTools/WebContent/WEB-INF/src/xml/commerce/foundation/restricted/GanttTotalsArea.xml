<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<!--- @keywords private -->
	<Component classDefinition="true" definitionName="cmc/foundation/GanttMonthCell">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="StringUtil" moduleName="cmc/foundation/StringUtil"/>
		<dependency localName="GanttChartStyle" moduleName="cmc/foundation/GanttChartStyle"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<variable name="text" type="string" value="Default Value"/>
		<variable name="startdate" value="${null}"/>
		<variable name="width" value="0"/>
		<variable name="weekheight" value="27"/>
		<variable name="textheight" value="37"/>
		<variable name="totalsArea" value="${null}"/>
		
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updateDel = new EventHandler.Class(this, "update");
			this.update();
			]]>
		</method>
		
		<method name="destroy">
			<![CDATA[
			this.updateDel.disconnectAll();
			delete this.updateDel;
			this.inherited(arguments);
			]]>
		</method>
		
		<method name="update">
			<![CDATA[
			this.updateDel.disconnectAll();
			this.updateDel.connect(this, "onstartdate");
			if (this.startdate != null) {
				this.setVariable("width", DateUtil.Singleton.daysleftinmonth(this.startdate) * 2);
				this.updateDel.connect(foundationResources.Singleton['monthYear' + this.startdate.getMonth()], "onstring");
				this.content.monthtextview.monthtext.setVariable('text', StringUtil.Singleton.substituteparameters(foundationResources.Singleton['monthYear' + this.startdate.getMonth()].string, this.startdate.getFullYear()));
			}
			]]>
		</method>
			
		<AxisLayout axis="x"/>
		<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="${this.classroot.height}" width="1"/>
		<Component clip="true" height="${this.classroot.weekheight + this.classroot.textheight + 2}" name="content" width="${this.classroot.width}">
			<AxisLayout axis="y"/>
			<Component height="${this.classroot.textheight}" name="monthtextview" width="${this.parent.width}">	
				<TextComponent align="center" valign="middle" name="monthtext"/>
				<handler name="onclick">
					<![CDATA[
					this.classroot.clickMonth();
					]]>
				</handler>
				<handler name="onmouseout">
					<![CDATA[
					this.classroot.doTextMouseOut(this);
					]]>
				</handler>
				<handler name="onmouseover">
					<![CDATA[
					this.classroot.doTextMouseOver(this);
					]]>
				</handler>
			</Component>
			<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="1" width="${this.parent.width}"/>	
			<Component height="${this.classroot.weekheight}">
				<AxisLayout axis="x"/>
				<Component height="${this.parent.height}" width="13">
					<handler name="onclick">
						<![CDATA[
						this.classroot.clickWeek(1, 7);
						]]>
					</handler>
					<handler name="onmouseout">
						<![CDATA[
						this.classroot.doMouseOut(this);
						]]>
					</handler>
					<handler name="onmouseover">
						<![CDATA[
						this.classroot.doMouseOver(this);
						]]>
					</handler>
				</Component>
				<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="${this.parent.height}" width="1"/>
				<Component height="${this.parent.height}" width="13">
					<handler name="onclick">
						<![CDATA[
						this.classroot.clickWeek(8, 14);
						]]>
					</handler>
					<handler name="onmouseout">
						<![CDATA[
						this.classroot.doMouseOut(this);
						]]>
					</handler>
					<handler name="onmouseover">
						<![CDATA[
						this.classroot.doMouseOver(this);
						]]>
					</handler>
				</Component>								
				<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="${this.parent.height}" width="1"/>
				<Component height="${this.parent.height}" width="13">
					<handler name="onclick">
						<![CDATA[
						this.classroot.clickWeek(15, 21);
						]]>
					</handler>
					<handler name="onmouseout">
						<![CDATA[
						this.classroot.doMouseOut(this);
						]]>
					</handler>
					<handler name="onmouseover">
						<![CDATA[
						this.classroot.doMouseOver(this);
						]]>
					</handler>
				</Component>
				<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="${this.parent.height}" width="1"/>
				<Component height="${this.parent.height}" width="13">
					<handler name="onclick">
						<![CDATA[
						this.classroot.clickWeek(22, 28);
						]]>
					</handler>
					<handler name="onmouseout">
						<![CDATA[
						this.classroot.doMouseOut(this);
						]]>
					</handler>
					<handler name="onmouseover">
						<![CDATA[
						this.classroot.doMouseOver(this);
						]]>
					</handler>
				</Component>
				<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="${this.parent.height}" width="1"/>
				<Component height="${this.parent.height}" width="13">
					<handler name="onclick">
						<![CDATA[
						this.classroot.clickWeek(29, 31);
						]]>
					</handler>
					<handler name="onmouseout">
						<![CDATA[
						this.classroot.doMouseOut(this);
						]]>
					</handler>
					<handler name="onmouseover">
						<![CDATA[
						this.classroot.doMouseOver(this);
						]]>
					</handler>
				</Component>												
			</Component>
			<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="1" width="${this.parent.width}"/>
		</Component>
		
		<method args="v" name="doMouseOver">
			<![CDATA[
			v.setVariable("bgcolor", GanttChartStyle.Singleton.ganttselectedarea);
			]]>
		</method>
		
		<method args="v" name="doTextMouseOver">
			<![CDATA[
			v.setVariable("bgcolor", GanttChartStyle.Singleton.ganttselectedarea);
			]]>
		</method>
		
		<method args="v" name="doMouseOut">
			<![CDATA[
			v.setVariable("bgcolor", null);
			]]>
		</method>
		
		<method args="v" name="doTextMouseOut">
			<![CDATA[
			v.setVariable("bgcolor", null);
			]]>
		</method>
		
		<method args="start, end" name="clickWeek">
			<![CDATA[
			start = start - 1;
			end = end + this.startdate.getDate() - 1;
			var numDaysInMonth = DateUtil.Singleton.daysinmonth(this.startdate);
			if (end > numDaysInMonth) {
				end = numDaysInMonth;
			}
			var newStartDate = DateUtil.Singleton.copydate(this.startdate);
			var newEndDate = new Date(this.startdate.getFullYear(), this.startdate.getMonth(), end);
			DateUtil.Singleton.adddays(newStartDate, start);
			newEndDate.setDate(end);
			this.totalsArea.updateSelectedDates(newStartDate, newEndDate);
			]]>
		</method>
		
		<method name="clickMonth">
			<![CDATA[
			var newStartDate = DateUtil.Singleton.copydate(this.startdate);
			var numDaysInMonth = DateUtil.Singleton.daysinmonth(this.startdate);
			var newEndDate = DateUtil.Singleton.copydate(newStartDate);
			DateUtil.Singleton.adddays(newEndDate, numDaysInMonth - 1);
			this.totalsArea.updateSelectedDates(newStartDate, newEndDate);
			]]>
		</method>
		
		<method args="text" name="setText">
			<![CDATA[
			this.monthtext.setAttribute('text', text);
			]]>
		</method>
		
	</Component>
	
	<!--- @keywords private -->
	<Component classDefinition="true" definitionName="cmc/foundation/GanttMonthArea">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="GanttMonthCell" moduleName="cmc/foundation/GanttMonthCell"/>
		<variable name="startdate" value="${null}"/>
		<variable name="enddate" value="${null}"/>
		<variable name="totalsArea" value="${null}"/>
		
		<method name="renderMonthCells">
			<![CDATA[
			if (this.startdate != null && this.enddate != null) {
				var numberMonths = DateUtil.Singleton.datemonthsdiff(this.startdate, this.enddate) + 1;
				var date = this.startdate.getDate();
				var month = this.startdate.getMonth();
				var year = this.startdate.getFullYear();
				for (var i = 0; i < numberMonths; i++) {
					if (i >= this.container.childComponents.length) {
						var mc = new GanttMonthCell.Class(this.container, {
							startdate: new Date(year, month, date),
							totalsArea: this.totalsArea,
							height: this.height
						});
					}
					else {
						this.container.childComponents[i].setVariable("startdate", new Date(year, month, date));
					}
					month += 1;
					if (month == 12) {
						year += 1;
						month = 0;
					}
					date = 1;
				}
				for (var i = numberMonths; i < this.container.childComponents.length; i++) {
					this.container.childComponents[i].setVariable("visible", false);
				}
			}
			]]>
		</method>
		<Component name="container">
			<AxisLayout axis="x"/>
		</Component>
		
	</Component>
	
	<!--- @keywords private -->
	<Component classDefinition="true" definitionName="cmc/foundation/GanttSelectedAreaDivider">
		<dependency localName="CursorUtil" moduleName="cmc/foundation/CursorUtil"/>
		<variable name="resizing" type="boolean" value="false"/>
		<variable name="minDragRange" type="number" value="${-1}"/>
		<variable name="maxDragRange" type="number" value="${-1}"/>
	
		<method name="startDragging">
			<![CDATA[
			this.deltaX = this.parent.getMouse("x") - this.getVariableRelative("x", this.parent);
			this.dragging.setVariable("active", true);
			]]>
		</method>	    
	
		<method name="stopDragging">
			<![CDATA[
			this.dragging.setVariable("active", false);
			]]>
		</method>	    
	    
		<handler name="onmouseover">
			<![CDATA[
			CursorUtil.setCursorGlobal("col-resize");
			]]>
		</handler>
		<handler name="onmouseout">
			<![CDATA[
			CursorUtil.restoreCursor();
			]]>
		</handler>
		<handler name="onmousedown">
			<![CDATA[
			CursorUtil.lock();
			this.startDragging();
			this.resizing = true;
			]]>
		</handler>
		<handler name="onmouseup">
			<![CDATA[
			CursorUtil.unlock();
			this.stopDragging();
			this.resizing = false;
			]]>
		</handler>
		<method args="mouseX" name="checkDrag">
			<![CDATA[
			if (this.maxDragRange != -1 && mouseX > this.maxDragRange) {
				return this.maxDragRange - 1;
			}
			if (this.minDragRange != -1 && mouseX < this.minDragRange) {
				return this.minDragRange + 1;
			}
			return mouseX;
			]]>
		</method>
	    <State name="dragging">
	    	<variable name="x" value="${this.checkDrag(this.parent.getMouse('x') - this.deltaX)}"/>
	    </State>
	</Component>
	
	<!--- @keywords private -->
	<Component bgcolor="${GanttChartStyle.Singleton.ganttnonselectedareabackground}" classDefinition="true" definitionName="cmc/foundation/GanttUnselectedArea" opacity="0.65">
		<dependency localName="GanttChartStyle" moduleName="cmc/foundation/GanttChartStyle"/>
	</Component>
	
	<!--- @keywords private -->
	<Component classDefinition="true" definitionName="cmc/foundation/GanttTotalsSelectArea">
		<dependency localName="CursorUtil" moduleName="cmc/foundation/CursorUtil"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="Timer" moduleName="cmc/foundation/Timer"/>
		<variable name="totalsArea" value="${null}"/>
		
		<method args="leftX, rightX" name="setDividerPositions">
			<![CDATA[
			this.leftDivider.setVariable('x', leftX - this.leftDivider.width);
			this.rightDivider.setVariable('x', rightX);
			]]>
		</method>
		
		<Component imageSet="horizontalScrollBack" name="scrollback" stretches="width" width="${this.classroot.width}" x="0" y="${this.classroot.height - this.height}"/>	
		
		<GanttUnselectedArea height="${this.classroot.height - 66 - this.classroot.scrollback.height}" name="leftUnselectedArea" width="${this.classroot.leftDivider.x + this.classroot.leftDivider.width}" x="0" y="66"/>
		
		<GanttUnselectedArea height="${this.classroot.height - 66 - this.classroot.scrollback.height}" name="rightUnselectedArea" width="${this.classroot.width - this.x}" x="${this.classroot.rightDivider.x}" y="66"/>
		
		<GanttSelectedAreaDivider height="${this.classroot.scrollback.y - this.y}" maxDragRange="${this.classroot.rightDivider.x}" name="leftDivider" y="0">
			<method name="stopDragging">
				<![CDATA[
				var update = this.resizing;
				this.inherited(arguments);
				if (update) {
					this.classroot.totalsArea.setLeftX(this.x + this.width);
					this.classroot.totalsArea.updatevisiblelist();
				}
				]]>
			</method>	
			<Component width="2" height="this.parent.height" bgcolor="#4178be" x="${this.parent.ganttFilterGripLeft.width - this.width}"/>
			<Component name="ganttFilterGripLeft" imageSet="ganttFilterGripLeft" y="${(this.parent.height / 2) - (this.height / 2)}"/>
		</GanttSelectedAreaDivider>
		
		<GanttSelectedAreaDivider height="${this.classroot.scrollback.y - this.y}" minDragRange="${this.classroot.leftDivider.x}" name="rightDivider" y="0">
			<method name="stopDragging">
				<![CDATA[
				var update = this.resizing;
				this.inherited(arguments);
				if (update) {
					this.classroot.totalsArea.setRightX(this.x);
					this.classroot.totalsArea.updatevisiblelist();
				}
				]]>
			</method>	
			<Component width="2" height="this.parent.height" bgcolor="#4178be"/>
			<Component name="ganttFilterGripRight" imageSet="ganttFilterGripRight" y="${(this.parent.height / 2) - (this.height / 2)}"/>
		</GanttSelectedAreaDivider>

		<Component width="${this.classroot.rightDivider.x - this.x}" height="2" bgcolor="#4178be" x="${this.classroot.leftDivider.x + this.classroot.leftDivider.width}" y="0"/>

		<Component width="${this.classroot.rightDivider.x - this.x}" height="2" bgcolor="#4178be" x="${this.classroot.leftDivider.x + this.classroot.leftDivider.width}" y="${this.classroot.scrollback.y - this.height}"/>

		<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="${this.classroot.totalsArea.height}" width="1" x="${-this.classroot.totalsArea.x}" y="0"/>

		<Component imageSet="horizontalScroller" name="ganttScroll" stretches="width" width="${this.classroot.rightDivider.x - (this.classroot.leftDivider.x + this.classroot.leftDivider.width) + 4}" x="${(this.classroot.leftDivider.x + this.classroot.leftDivider.width) - 2}" y="${this.classroot.height - this.height - 2}">
			
			<handler name="oninit">
				<![CDATA[
				this.setVariable("currentImage", 1);
				]]>
			</handler>

			<method name="destroy">
				<![CDATA[
				this.inherited(arguments);
				]]>
			</method>
		    
			<handler name="onmouseover">
				<![CDATA[
				this.setVariable("currentImage", 2);
				]]>
			</handler>
			
			<handler name="onmouseout">
				<![CDATA[
				this.setVariable("currentImage", 1);
				]]>
			</handler>
			
			<handler name="onmousedown">
				<![CDATA[
				CursorUtil.lock();
				this.classroot.leftDivider.startDragging();
				this.classroot.rightDivider.startDragging();
				]]>
			</handler>	    
		
			<handler name="onmouseup">
				<![CDATA[
				CursorUtil.unlock();
				this.classroot.leftDivider.stopDragging();
				this.classroot.rightDivider.stopDragging();
				this.classroot.totalsArea.setLeftX(this.classroot.leftDivider.x + this.classroot.leftDivider.width);
				this.classroot.totalsArea.setRightX(this.classroot.rightDivider.x);
				this.classroot.totalsArea.updatevisiblelist();
				]]>
			</handler>	    
		</Component>

		<BaseButton imageSet="horizontalScrollLeftArrow" x="${-this.classroot.totalsArea.x}" y="${this.classroot.height - this.height}" overImage="2">
			<handler name="onclick">
				<![CDATA[
				var delta = this.classroot.rightDivider.x - this.classroot.leftDivider.x - this.classroot.leftDivider.width;
				this.classroot.leftDivider.x -= delta;
				this.classroot.rightDivider.x -= delta;
				this.classroot.leftDivider.setVariable('x', this.classroot.leftDivider.x);
				this.classroot.rightDivider.setVariable('x', this.classroot.rightDivider.x);
				this.classroot.totalsArea.setLeftX(this.classroot.leftDivider.x + this.classroot.leftDivider.width);
				this.classroot.totalsArea.setRightX(this.classroot.rightDivider.x);
				this.classroot.totalsArea.updatevisiblelist();
				]]>
			</handler>	    
		</BaseButton>
			
		<BaseButton name="horizontalScrollRightArrow" imageSet="horizontalScrollRightArrow" x="${-this.classroot.totalsArea.x + this.classroot.totalsArea.parent.width - this.width - 21}" y="${this.classroot.height - this.height}" overImage="2">
			<handler name="onclick">
				<![CDATA[
				var delta = this.classroot.rightDivider.x - this.classroot.leftDivider.x - this.classroot.leftDivider.width;
				this.classroot.leftDivider.x += delta;
				this.classroot.rightDivider.x += delta;
				this.classroot.leftDivider.setVariable('x', this.classroot.leftDivider.x);
				this.classroot.rightDivider.setVariable('x', this.classroot.rightDivider.x);
				this.classroot.totalsArea.setLeftX(this.classroot.leftDivider.x + this.classroot.leftDivider.width);
				this.classroot.totalsArea.setRightX(this.classroot.rightDivider.x);
				this.classroot.totalsArea.updatevisiblelist();
				]]>
			</handler>	    
		</BaseButton>
		
		<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="1" width="${this.classroot.totalsArea.width}" x="0" y="0"/>
		<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="1" width="${this.classroot.totalsArea.width}" x="0" y="${this.classroot.height - this.height}"/>
		
		<Component bgcolor="${GanttChartStyle.Singleton.ganttselectedarea}" height="${this.classroot.totalsArea.height}" width="1" x="${this.parent.horizontalScrollRightArrow.x + this.parent.horizontalScrollRightArrow.width}" y="0"/>
		<Component bgcolor="${GanttChartStyle.Singleton.ganttfiltercontrolsbackground}" height="${this.classroot.totalsArea.height}" width="20" x="${(this.parent.horizontalScrollRightArrow.x + this.parent.horizontalScrollRightArrow.width) + 1}" y="0"/>
	
	</Component>
	
	<!--- @keywords private -->
	<DrawComponent classDefinition="true" definitionName="cmc/foundation/GanttTotalsChart">
		<dependency localName="GanttChartStyle" moduleName="cmc/foundation/GanttChartStyle"/>
		<variable name="currentPos" type="number" value="0"/>
		
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.strokeStyle = GanttChartStyle.Singleton.ganttbarchartcolor;
			]]>
		</method>
		
		<method name="clearBars">
			<![CDATA[
			this.clear();
			this.currentPos = 0;
			this.beginPath();
			]]>
		</method>
		
		<method name="addBar" args="height">
			<![CDATA[
			if (height > 0) {
				this.moveTo(this.currentPos, this.height - height);
				this.lineTo(this.currentPos, this.height - 1);
			}
			this.currentPos += 2;
			]]>
		</method>
		
		<method name="update">
			<![CDATA[
			this.stroke();
			]]>
		</method>
	</DrawComponent>
	
	<!--- @keywords private -->
	<Component classDefinition="true" clip="true" definitionName="cmc/foundation/GanttTotalsArea" height="170">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="CallbackUtil" moduleName="cmc/foundation/CallbackUtil"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
	
		<variable name="ganttControl" value="${null}"/>
	
		<variable name="startDate" value="${null}"/>
		<variable name="endDate" value="${null}"/>
		<variable name="selectedStartDate" value="${null}"/>
		<variable name="selectedEndDate" value="${null}"/>
		
		<variable name="countsDatapath" value="${null}"/>
		<variable name="maximumCount" type="number" value="1"/>
		<variable name="numberOfDays" type="number" value="1"/>
		
		<method name="init">
			<![CDATA[
			this.renderMonthRangeDel = new EventHandler.Class(this, "renderMonthRange");
			this.inherited(arguments);
			]]>
		</method>
		
		<method name="destroy">
			<![CDATA[
			delete this.renderMonthRangeDel;
			this.inherited(arguments);
			]]>
		</method>
		
		<GanttMonthArea height="66" name="montharea" totalsArea="${this.classroot}" valign="top"/>
		
		<!-- 30 is the sum of the week height and month height -->
		<GanttTotalsChart height="${this.classroot.height - 66 - this.classroot.selectarea.scrollback.height}" name="barchart" y="66"/>
		
		<GanttTotalsSelectArea height="170" name="selectarea" totalsArea="${this.classroot}" valign="bottom"/>

	
		<method name="updateTotalsArea">
			<![CDATA[
			this.calculateCounts();
			]]>
		</method>
		
		<method name="getLeftX">
			<![CDATA[
			return DateUtil.Singleton.datedaysdiff(this.selectedStartDate, this.startDate) * 2;
			]]>
		</method>
		
		<method name="getRightX">
			<![CDATA[
			return (DateUtil.Singleton.datedaysdiff(this.selectedEndDate, this.startDate) + 1) * 2;
			]]>
		</method>
		
		<method args="leftX" name="setLeftX">
			<![CDATA[
			this.selectedStartDate = DateUtil.Singleton.copydate(this.startDate);
			DateUtil.Singleton.adddays(this.selectedStartDate, Math.floor(leftX / 2));
			]]>
		</method>
		
		<method args="rightX" name="setRightX">
			<![CDATA[
			this.selectedEndDate = DateUtil.Singleton.copydate(this.startDate);
			DateUtil.Singleton.adddays(this.selectedEndDate, Math.floor((rightX - 1) / 2));
			]]>
		</method>
		
		<method name="rescale">
			<![CDATA[
			this.ganttControl.rescale(this.selectedStartDate, this.selectedEndDate);
			]]>
		</method>
		
		<method args="newStartDate, newEndDate" name="updateSelectedDates">
			<![CDATA[
			this.selectedStartDate = newStartDate;
			this.selectedEndDate = newEndDate;
			this.selectarea.setDividerPositions(this.getLeftX(), this.getRightX());
			this.updatevisiblelist();
			]]>
		</method>
	
		<method name="updatevisiblelist">
			<![CDATA[
			this.ganttControl.updatevisiblelist(this.selectedStartDate, this.selectedEndDate);
			]]>
		</method>
		
		<method name="getDatesList">
			<![CDATA[
			var resultDatesList = [];
			if (this.ganttControl.grid.oList != null) {
				var modelObjects = this.ganttControl.grid.oList.getMatchingModelObjects();
				for (var i = 0; i < modelObjects.length; i++) {
					var cellDescriptor = this.ganttControl.grid.getCellDescriptor(modelObjects[i]);
					var dates = new Object();
					dates.startDate = DateUtil.Singleton.getCachedTimeDay(modelObjects[i].getPropertyValue(cellDescriptor.propertyName, cellDescriptor.objectPath));
					dates.endDate = DateUtil.Singleton.getCachedTimeDay(modelObjects[i].getPropertyValue(cellDescriptor.propertyName2, cellDescriptor.objectPath));
					resultDatesList.push(dates);
				}
			}
			return resultDatesList;
			]]>
		</method>
		
		<method args="a, s, e" name="updateDataNums">
			<![CDATA[
			var totalDays = 0;
			var i = 0;
			var startIndexFound = s < 0;
			var endIndexFound = e < 0;
			while (i < a.length && !endIndexFound) {
				if (startIndexFound) {
					a[i].count++;
				}
				else {
					if (s > (totalDays - 1) && s < (totalDays + a[i].days)) {
						startIndexFound = true;
						if (s > totalDays) {
							var aiCount = a[i].count;
							var aiDays = a[i].days;
							a.splice(i + 1, 0, {
								count: (aiCount + 1),
								days: (totalDays + aiDays - s)
							});
							a[i].days = aiDays - a[i + 1].days;
							totalDays += a[i].days;
							i++;
						}
						else {
							a[i].count++;
							if (i > 0 && a[i - 1].count == a[i].count) {
								totalDays -= a[i - 1].days;
								a[i - 1].days = a[i - 1].days + a[i].days;
								a.splice(i, 1);
								i--;
							}
							if (i < (a.length - 1) && a[i].count == a[i + 1].count) {
								a[i].days = a[i].days + a[i + 1].days;
								a.splice(i + 1, 1);
							}
						}
					}
				}
				if (startIndexFound && e > (totalDays - 1) && e < (totalDays + a[i].days)) {
					endIndexFound = true;
					if (e < (totalDays + a[i].days - 1)) {
						var aiCount = a[i].count;
						var aiDays = a[i].days;
						a.splice(i + 1, 0, {
							count: aiCount - 1,
							days: (totalDays + aiDays - e - 1)
						});
						a[i].days = aiDays - a[i + 1].days;
						i++;
					}
				}
				totalDays += a[i].days;
				i++;
			}
			]]>
		</method>
		
		<method args="e" name="renderMonthRange">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var startDateTime = DateUtil.Singleton.getTimeDay(this.startDate);
			var endDateTime = DateUtil.Singleton.getTimeDay(this.endDate);
			this.numberOfDays = endDateTime - startDateTime + 1;
			var ganttChartDataNums = [];
			ganttChartDataNums.push({
				count: 0,
				days: this.numberOfDays
			});
			var datesList = this.getDatesList();
			for (var i = 0; i < datesList.length; i++) {
				var startCountIndex = -1;
				if (datesList[i].startDate != null) {
					startCountIndex = datesList[i].startDate - startDateTime;
				}
				var endCountIndex = this.numberOfDays;
				if (datesList[i].endDate != null) {
					endCountIndex = datesList[i].endDate - startDateTime;
				}
				this.updateDataNums(ganttChartDataNums, startCountIndex, endCountIndex);
			}
			this.maximumCount = 1;
			for (var i = 0; i < ganttChartDataNums.length; i++) {
				if (ganttChartDataNums[i].count > this.maximumCount) {
					this.maximumCount = ganttChartDataNums[i].count;
				}
			}
			var scaleH = this.barchart.height / this.maximumCount;
			var totalDays = 0;
			this.barchart.clearBars();
			for (var i = 0; i < ganttChartDataNums.length; i++) {
				var newHeight = scaleH * ganttChartDataNums[i].count;
				for (var j = 0; j < ganttChartDataNums[i].days; j++) {
					this.barchart.addBar(newHeight);
					totalDays++;
				}
			}
			this.barchart.update();
			var renderMonthCells = false;
			if (this.montharea.startdate != this.startDate) {
				this.montharea.setVariable("startdate", this.startDate);
				renderMonthCells = true;
			}
			if (this.montharea.enddate != this.endDate) {
				this.montharea.setVariable("enddate", this.endDate);
				renderMonthCells = true;
			}
			if (renderMonthCells) {
				this.montharea.renderMonthCells();
			}
			var newAreaWidth = this.numberOfDays * 2;
			if (this.selectarea.width != newAreaWidth) {
				this.selectarea.setVariable('width', newAreaWidth);
			}
			this.selectarea.setDividerPositions(this.getLeftX(), this.getRightX());
			if (this.width != newAreaWidth) {
				this.setVariable('width', newAreaWidth);
			}
			]]>
		</method>
		
		<method name="calculateCounts">
			<![CDATA[
			if (this.startDate) {
				CallbackUtil.Singleton.cancelCallback(this.renderMonthRangeDel);
				CallbackUtil.Singleton.addDeferredCallback(this.renderMonthRangeDel, null, CallbackUtil.Singleton.PRIORITY_BACKGROUND);
			}
			]]>
		</method>
	
	</Component>
	
</Definitions>