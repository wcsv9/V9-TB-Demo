<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords final
		<p>This class defines a widget that allows child objects to be created, deleted and edited within a single grid cell.</p>
		
		<p>If the object associated with the cell is editable, then the user can select the edit icon which
		will launch a dialog that displays a list of child objects. The user can add, remove and edit
		the child objects in the list.</p>

		<p>The following example demonstrates the declaration of a grid column that will create
		and delete a child objects with object type "Element". The business user will be able to
		provide values for the poperty named "value".
		
		@START_CODE
			<GridChildObjectText
				childObjectType="Element"
				childPropertyName="value"
				text="${resourceBundle.displayToCustomers}"
				visible="true"
				width="140"/>
		@END_CODE
	-->
	<GridColumn classDefinition="true" definitionName="cmc/foundation/GridChildObjectText" propertyName="">
		<dependency localName="GridChildObjectTextViewer" moduleName="cmc/foundation/GridChildObjectTextViewer"/>
		<dependency localName="GridChildObjectTextEditor" moduleName="cmc/foundation/GridChildObjectTextEditor"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridChildObjectTextViewer" to create cell viewer instances.
		-->
		<variable name="cellViewerClass" value="${GridChildObjectTextViewer}"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridChildObjectTextEditor" to create cell editor instances.
		-->
		<variable name="cellEditorClass" value="${GridChildObjectTextEditor}"/>
		<!---
			The {@link cmc/foundation/ObjectDefinition#objectType object type} of the child object that will be created and deleted.
			This attribute is required.
		-->
		<variable name="childObjectType" type="string"/>
		<!---
			The name of the property of the object specified by <code>childObjectType</code>
			to be edited by the user.
			This attribute is required.
		-->
		<variable name="childPropertyName" type="string"/>
		<!---
			Indicates that the value is numeric.
		-->
		<variable name="numeric" type="boolean" value="false"/>
		<!---
			Number of decimal places to use if the value is numeric. If not specified, the default is 0 meaning no padding.
			There is no truncation.
		-->
		<variable name="numDecimalPlaces" type="number" value="${null}"/>

		<!---
			@keywords private
			This method returns the viewer initialization arguments.
		-->
		<method name="getViewerInitArgs">
			<![CDATA[
			return {
				childObjectType: this.childObjectType,
				childPropertyName: this.childPropertyName
			};
			]]>
		</method>
		
		<!---
			@keywords private
			This method returns the editor initialization arguments.
		-->
		<method name="getEditorInitArgs">
			<![CDATA[
			return {
				childObjectType: this.childObjectType,
				childPropertyName: this.childPropertyName,
				numeric: this.numeric,
				numDecimalPlaces: this.numDecimalPlaces
			};
			]]>
		</method>
		
		<!---
			@keywords private
			Get the column filter display value.
			@param cmc/foundation/ModelObject o: the model object instance
		-->
		<method args="o" name="getColumnFilterDisplayValue">
			<![CDATA[
			var value = null;
			if (o != null) {
				if (this.objectPath != null) {
					o = o.getObject(this.objectPath);
				}
				if (o != null) {
					var childObjects = o.getObjects(this.childObjectType);
					for (var i = 0; i < childObjects.length; i++) {
						var propertyValue = childObjects[i].getPropertyValue(this.childPropertyName);
						if (value == null) {
							value = propertyValue;
						}
						else {
							value += ", " + propertyValue;
						}
					}
				}
			}
			return value;
			]]>
		</method>
	</GridColumn>
	
	<!---
		@keywords final
		Use this class to define a widget that allows child objects to be created, deleted and edited within a single grid cell.
		Use this class instead of cmc/foundation/GridChildObjectText if you
		need to display a this widget for some rows and something else for other rows.
	-->
	<GridCellDescriptor classDefinition="true" definitionName="cmc/foundation/GridChildObjectTextCellDescriptor" propertyName="">
		<dependency localName="GridChildObjectTextViewer" moduleName="cmc/foundation/GridChildObjectTextViewer"/>
		<dependency localName="GridChildObjectTextEditor" moduleName="cmc/foundation/GridChildObjectTextEditor"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridChildObjectTextViewer" to create cell viewer instances.
		-->
		<variable name="cellViewerClass" value="${GridChildObjectTextViewer}"/>
		<!---
			@keywords private
			Use "cmc/foundation/GridChildObjectTextEditor" to create cell editor instances.
		-->
		<variable name="cellEditorClass" value="${GridChildObjectTextEditor}"/>
		<!---
			The {@link cmc/foundation/ObjectDefinition#objectType object type} of the child object to be created and deleted.
			This attribute is required.
		-->
		<variable name="childObjectType" type="string"/>
		<!---
			The name of the property of the object specified by <code>childObjectType</code>
			to be edited by the user.
			This attribute is required.
		-->
		<variable name="childPropertyName" type="string"/>
		<!---
			Indicates that the value is numeric.
		-->
		<variable name="numeric" type="boolean" value="false"/>
		<!---
			Number of decimal places to use if the value is numeric. If not specified, the default is 0 meaning no padding.
			There is no truncation.
		-->
		<variable name="numDecimalPlaces" type="number" value="${null}"/>

		<!---
			@keywords private
			This method returns the viewer initialization arguments.
		-->
		<method name="getViewerInitArgs">
			<![CDATA[
			return {
				childObjectType: this.childObjectType,
				childPropertyName: this.childPropertyName
			};
			]]>
		</method>
		
		<!---
			@keywords private
			This method returns the editor initialization arguments.
		-->
		<method name="getEditorInitArgs">
			<![CDATA[
			return {
				childObjectType: this.childObjectType,
				childPropertyName: this.childPropertyName,
				numeric: this.numeric,
				numDecimalPlaces: this.numDecimalPlaces
			};
			]]>
		</method>
		
		<!---
			@keywords private
			Get the column filter display value.
			@param cmc/foundation/ModelObject o: the model object instance
		-->
		<method args="o" name="getColumnFilterDisplayValue">
			<![CDATA[
			var value = null;
			if (o != null) {
				if (this.objectPath != null) {
					o = o.getObject(this.objectPath);
				}
				if (o != null) {
					var childObjects = o.getObjects(this.childObjectType);
					for (var i = 0; i < childObjects.length; i++) {
						var propertyValue = childObjects[i].getPropertyValue(this.childPropertyName);
						if (value == null) {
							value = propertyValue;
						}
						else {
							value += ", " + propertyValue;
						}
					}
				}
			}
			return value;
			]]>
		</method>
	</GridCellDescriptor>
	
	<!---
		@keywords private
		
		Child object viewer viewer.
	-->
	<GridTextViewer classDefinition="true" definitionName="cmc/foundation/GridChildObjectTextViewer">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<!--- {@link cmc/foundation/ModelObject} instance associated with this viewer. -->
		<variable name="o" value="${null}"/>
		<!---
			The {@link cmc/foundation/ObjectDefinition#objectType object type} of the child object to be created and deleted.
			This attribute is required.
		-->
		<variable name="childObjectType" type="string"/>
		<!---
			The name of the property of the object specified by <code>childObjectType</code>
			to be edited by the user.
			This attribute is required.
		-->
		<variable name="childPropertyName" type="string"/>

		<!--- @keywords private -->
		<method args="newProperty" name="setProperty">
			<![CDATA[

			]]>
		</method>

		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updateValue();
			]]>
		</method>

		<!---
			Update and refresh cmc/foundation/GridTextViewer value with a new {@link cmc/foundation/ModelProperty} value.			
		-->
		<method args="e" name="updateValue">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (typeof (this.updateValueDel) == "undefined") {
				this.updateValueDel = new EventHandler.Class(this, "updateValue");
			}
			this.updateValueDel.disconnectAll();
			this.updateValueDel.connect(this, "ono");
			var newText = "";
			if (this.o != null) {
				var childObjects = this.o.getObjects(this.childObjectType, this.updateValueDel);
				for (var i = 0; i < childObjects.length; i++) {
					var prop = childObjects[i].getProperty(this.childPropertyName);
					this.updateValueDel.connect(prop, "onvalue");
					if (newText != "") {
						newText += ", ";
					}
					newText += prop.value;
				}
			}
			if (this.text != newText) {
				this.setVariable("text", newText);
			}
			]]>
		</method>
	</GridTextViewer>
	
	<!---
		@keywords private
		
		Child object editor class for internal use by {@link cmc/foundation/GridChildObjectText}.
		
		In edit mode, a dialog {@link cmc/foundation/Dialog} named cmc/foundation/ChildObjectTextDialog is opened that contains a
		list of child objects that can be added, removed and edited by the user.
	-->
	<FocusableComponent classDefinition="true" definitionName="cmc/foundation/GridChildObjectTextEditor" focusable="false" width="${this.immediateParent.availableWidth}">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>	
		<!---
			The {@link cmc/foundation/ObjectDefinition#objectType object type} of the child object that will be created and deleted.
			This attribute is required.
		-->
		<variable name="childObjectType" type="string"/>
		<!---
			The name of the property of the object specified by <code>childObjectType</code>
			to be edited by the user.
			This attribute is required.
		-->
		<variable name="childPropertyName" type="string"/>
		<!---
			Indicates that the value is numeric.
		-->
		<variable name="numeric" type="boolean" value="false"/>
		<!---
			Number of decimal places to use if the value is numeric. If not specified, the default is 0 meaning no padding.
			There is no truncation.
		-->
		<variable name="numDecimalPlaces" type="number" value="${null}"/>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updateValue();
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.updateValueDel) {
				this.updateValueDel.disconnectAll();
				delete this.updateValueDel;
			}
			this.inherited(arguments);
			]]>
		</method>
		
		<!---
			@keywords private			
		-->
		<method args="e" name="updateValue">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (typeof (this.updateValueDel) == "undefined") {
				this.updateValueDel = new EventHandler.Class(this, "updateValue");
			}
			this.updateValueDel.disconnectAll();
			this.updateValueDel.disable();
			this.updateValueDel.connect(this, "ono");
			this.updateValueDel.connect(this, "onenabled");
			var count = 0;
			var prop = null;
			var newText = "";
			if (this.o != null) {
				var childObjects = this.o.getObjects(this.childObjectType, this.updateValueDel);
				count = childObjects.length;
				if (count == 0 && this.enabled) {
					childObjects.push(this.o.getObject(this.childObjectType, true));
					count = 1;
				}
				if (count == 1 && this.enabled) {
					prop = childObjects[0].getProperty(this.childPropertyName);
				}
				else {
					for (var i = 0; i < count; i++) {
						prop = childObjects[i].getProperty(this.childPropertyName);
						this.updateValueDel.connect(prop, "onvalue");
						if (newText != "") {
							newText += ", ";
						}
						newText += prop.value;
					}
				}
			}
			if (count == 1 && this.enabled) {
				if (this.numeric) {
					this.textEditor.setVariable("visible", false);
					this.numericEditor.setVariable("visible", true);
					this.textEditor.setVariable("property", null);
					this.numericEditor.setVariable("property", prop);
				}
				else {
					this.numericEditor.setVariable("visible", false);
					this.textEditor.setVariable("visible", true);
					this.numericEditor.setVariable("property", null);
					this.textEditor.setVariable("property", prop);
				}
				this.textView.setVariable("visible", false);
			}
			else {
				if (!this.textView.visible) {
					this.textEditor.setVariable("visible", false);
					this.numericEditor.setVariable("visible", false);
					this.textEditor.setVariable("property", null);
					this.numericEditor.setVariable("property", null);
					this.textView.setVariable("visible", true);
				}
				if (this.textView.text != newText) {
					this.textView.setVariable("text", newText);
				}
			}
			this.updateValueDel.enable();
			]]>
		</method>
		
		<!---
			@keywords private			
		-->
		<method args="del" name="getValidationErrors">
			<![CDATA[
			if (typeof(del) == "undefined") del = null;
			var validationErrors = null;
			if (this.o != null) {
				var childObjects = this.o.getObjects(this.childObjectType, del);
				for (var i = 0; i < childObjects.length; i++) {
					validationErrors = childObjects[i].getValidationErrors();
					if (del) {
						del.connect(childObjects[i], "onvalidationErrors");
					}
					if (validationErrors != null && validationErrors.length > 0) {
						break;
					}
					var prop = childObjects[i].getProperty(this.childPropertyName);
					validationErrors = prop.getValidationErrors();
					if (del) {
						del.connect(prop, "onvalidationErrors");
					}
					if (validationErrors != null && validationErrors.length > 0) {
						break;
					}
				}
			}
			return validationErrors;
			]]>
		</method>
		
		<handler name="onselected" eventSource="this.parent.row">
			<![CDATA[
			if (this.openDialogButton) {
				if (this.openDialogButton.indicator) {
					this.openDialogButton.indicator.setVariable("focusIndicatorColor", this.parent.row.selected ? "#ffffff" : "#000000");
				}
				var image = this.parent.row.selected ? 3 : 1;
				this.openDialogButton.downImage = image;
				this.openDialogButton.overImage = image;
				this.openDialogButton.setVariable("normalImage", image);
			}
			]]>
		</handler>
		
		<AxisLayout axis="x" spacing="0"/>
		
		<TextComponent multiline="true" name="textView" width="${this.parent.width - this.parent.openDialogButton.width}"/>
		<TextEditor name="textEditor" visible="false" width="${this.parent.width - this.parent.openDialogButton.width}" inputTextPadding="5" height="25"/>
		<NumericEditor name="numericEditor" numDecimalPlaces="${this.parent.numDecimalPlaces}" visible="false" width="${this.parent.width - this.parent.openDialogButton.width}" inputTextPadding="5" height="25"/>

		<BaseButton enabled="${this.classroot.enabled}" focusable="true" imageSet="rteGridIcon" name="openDialogButton">
			<!--
				@keyword private
			-->
			<handler name="onclick">
				<![CDATA[
				var caller = this;
				require(["cmc/foundation/ChildObjectTextDialog"], function(ChildObjectTextDialog) {
					ChildObjectTextDialog.Singleton.openChildObjectTextDialog(caller.classroot);
				});
				]]>
			</handler>
			
			<!---
				@keywords private
				Handle focus.
			-->
			<handler name="onfocus">
				<![CDATA[
				if (!this.indicator) {
					new FocusIndicator.Class(this, {
						name: "indicator",
						focusableView: this,
						indicatorView: this
					});
				}
				]]>
			</handler>
		</BaseButton>
	</FocusableComponent>
	
	<!---
		@keywords private
		
		Multiple selector dialog.
	-->
	<Dialog definitionName="cmc/foundation/ChildObjectTextDialog" minWidth="100" singletonDefinition="true" title="${foundationResources.Singleton.gridChildObjectTextValue.string}">
		<dependency localName="foundationResources" moduleName="cmc/foundation/FoundationResources"/>
		<dependency localName="NewChildButton" moduleName="cmc/foundation/NewChildButton"/>
		<dependency localName="DeleteChildButton" moduleName="cmc/foundation/DeleteChildButton"/>
		<!---
			Reference to grid editor from which this dialog was launched.
		-->
		<variable name="gridEditor"/>
		<!---
			@keywords private
			Indicates that the delete action is enabled.
		-->
		<variable name="deleteEnabled" type="boolean" value="false"/>
		<!---
			@keywords private
			Indicates that the delete action is not available.
		-->
		<variable name="hideDeleteAction" type="boolean" value="false"/>
		<!---
			@keywords private
			Indicates that the add action is enabled.
		-->
		<variable name="addEnabled" type="boolean" value="true"/>
		<!---
			@keywords private
			Instance of new button {@link cmc/foundation/NewChildButton}
		-->
		<variable name="newButton" value="${null}"/>
		<!---
			@keywords private
			Instance of delete button {@link cmc/foundation/DeleteChildButton}
		-->
		<variable name="deleteButton" value="${null}"/>
		<!--- @keywords private -->
		<variable name="model"/>

		<!---
			Open the child object editor dialog.
			@param cmc/foundation/GridChildObjectTextEditor gridEditor grid cell editor
		 -->
		<method args="gridEditor" name="openChildObjectTextDialog">
			<![CDATA[
			this.model = gridEditor.o.model;
			if (this.borderedView && this.borderedView.list) {
				this.borderedView.list.model = this.model;
			}
			this.openWindow();
			this.gridEditor = gridEditor;
			this.borderedView.list.valueColumn.setVariable("visible", !gridEditor.numeric);
			this.borderedView.list.numericValueColumn.setVariable("visible", gridEditor.numeric);
			this.borderedView.list.numericValueColumn.setVariable("numDecimalPlaces", gridEditor.numDecimalPlaces);
			var childDefinition = gridEditor.o.model.getObjectDefinition(gridEditor.o, gridEditor.childObjectType, true);
			if (childDefinition != null) {
				if (this.newButton == null) {
					this.newButton = new NewChildButton.Class(this.actionArea, {
						editor: this,
						actionDefinitions: null
					});
				}
				if (childDefinition.isCreatable(gridEditor.o)) {
					this.setVariable("addEnabled", true);
					this.newButton.setVariable("actionDefinitions", [childDefinition]);
				}
				if (this.deleteButton == null) {
					this.deleteButton = new DeleteChildButton.Class(this.actionArea, {
						editor: this
					});
				}
				this.borderedView.list.valueColumn.setVariable("propertyName", gridEditor.childPropertyName);
				this.borderedView.list.numericValueColumn.setVariable("propertyName", gridEditor.childPropertyName);
				gridEditor.o.bindViewToChildren(this.borderedView.list, null, gridEditor.childObjectType);
				this.borderedView.list.setVariable("activated", true);
				this.borderedView.list.checkShortcutKeys();
				this.checkEnabled();
			}
			]]>
		</method>

		<!---
			Close the dialog.
		 -->
		<method name="closeWindow">
			<![CDATA[
			this.inherited(arguments);
			this.gridEditor.o.releaseViewFromChildren(this.borderedView.list);
			this.newButton.setVariable("actionDefinitions", null);
			this.setVariable("addEnabled", false);
			this.borderedView.list.setVariable("activated", false);
			this.borderedView.list.checkShortcutKeys();
			this.gridEditor = null;
			]]>
		</method>
		
		<!---
			@keywords private
			Create a new child object for the specified object definition.
			@param Object childDefinition: The child object definition
		-->
		<method args="childDefinition" name="createChild">
			<![CDATA[
			var newChild = this.model.createNewObject(childDefinition, this.gridEditor.o, true);
			this.gridEditor.o.updateChildObjects(true);
			this.borderedView.list.showObjectInView(newChild, true);
			]]>
		</method>
		
		<!---
			@keywords private
			Invoke delete.
		-->
		<method name="doDelete">
			<![CDATA[
			var objects = this.borderedView.list.getSelectedObjects();
			var deleteObjects = [];
			for (var i = 0; i < objects.length; i++) {
				deleteObjects.push(objects[i]);
			}
			for (var i = 0; i < deleteObjects.length; i++) {
				var o = deleteObjects[i];
				o.deleteObject();
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method checks the current enablement of the available actions.
		-->
		<method name="checkEnabled">
			<![CDATA[
			var objects = this.borderedView.list.getSelectedObjects();
			var newDeleteEnabled = objects.length > 0;
			if (newDeleteEnabled) {
				for (var i = 0; i < objects.length; i++) {
					if (!objects[i].isDeletable()) {
						newDeleteEnabled = false;
						break;
					}
				}
			}
			if (newDeleteEnabled != this.deleteEnabled) {
				this.setVariable("deleteEnabled", newDeleteEnabled);
			}
			]]>
		</method>

		<variable name="availableHeight" type="number" value="200"/>
		<variable name="availableWidth" type="number" value="200"/>
		<AxisLayout axis="y" spacing="5"/>
		<Component name="actionArea">
			<AxisLayout axis="x" spacing="3"/>
		</Component>
		<BorderedView borderBottomSize="1" borderRightSize="1" borderColor="#d9d9d9" name="borderedView">
			<ObjectGrid dragEnabled="false" isConfigurable="false" listBorderSize="1" name="list" padding="0">
				<GridText name="valueColumn" text="${foundationResources.Singleton.gridChildObjectTextValue.string}" width="160"/>
				<GridNumeric name="numericValueColumn" text="${foundationResources.Singleton.gridChildObjectTextValue.string}" width="160"/>
				<handler name="onselect">
					<![CDATA[
					this.classroot.checkEnabled();
					]]>
				</handler>
				<method args="o" name="activateObject">
					<![CDATA[

					]]>
				</method>
			</ObjectGrid>
		</BorderedView>
		
		<Component name="buttonSection" placement="footer">
			<Button name="closeButton" text="${foundationResources.Singleton.closeButtonText.string}">
				<handler name="onclick">
					<![CDATA[
					this.parent.parent.closeWindow();
					]]>
				</handler>
			</Button>
		</Component>

	</Dialog>
</Definitions>