<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<!---
		@keywords private
		
		This class extends cmc/foundation/InputTextComponent and is used by the various input widgets in the code.
		It should not be used directly.
	-->
	<InputTextComponent classDefinition="true" definitionName="cmc/foundation/EditText">
	
		<!--- @keywords private -->
		<method args="parent, args" name="constructor">
			<![CDATA[
			if (parent.multiline != null) {
				this.multiline = parent.multiline;
			}
			if (parent.password != null) {
				this.password = parent.password;
			}
			]]>
		</method>

			
		<!--- @keywords private -->
		<method args="start, end, replacementText" name="replaceText">
			<![CDATA[
			var oldString = this.getText();
			var newString = oldString.slice(0, start) + replacementText + oldString.slice(end, oldString.length);
			this.setText(newString);
			]]>
		</method>
	</InputTextComponent>
	
	<!---
		This class can be used to create a simple text editor. Use the "getText" method to
		retrieve the text.
		
		Sample usage:
		@START_CODE
			<InputText name="sampleInputText" width="280"/>
		@END_CODE
	-->
	<FocusableComponent classDefinition="true" definitionName="cmc/foundation/InputText" focusable="false">
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="RootComponent" moduleName="cmc/RootComponent"/>
		<!---
			@keywords private
			This is a boolean attribute that indicates whether the text in the input text field is plain text, or
			password text (all asterisks).
			
			The default value for this attribute is "false" which is normal text.
		-->
		<variable name="password" type="boolean" value="false"/>
		<!---
			@keywords private
			The border color used when the input text box is disabled.
		-->
		<variable name="disabledBorderColor" type="string" value="#b1b1b1"/>
		<!---
			@keywords private
			The border color used when the input text box is enabled.
		-->
		<variable name="enabledBorderColor" type="string" value="#959595"/>
		<!---
			@keywords private
			The background color used when the input text box is disabled.
		-->
		<variable name="disabledBGColor" type="string" value="#ffffff"/>
		<!---
			@keywords private
			The background color used when the input text box is enabled.
		-->
		<variable name="enabledBGColor" type="string" value="#ffffff"/>
		<!---
			@keywords private
			The borderSize attribute is a number which indicates the desired width of the input text field's border in
			pixels.
		-->
		<variable name="borderSize" type="number" value="1"/>
		<!---
			@keywords private
			The borderColor attribute indicates which color to use as the border for the input text field.
		-->
		<variable name="borderColor" type="string" value="${this._enabled ? this.enabledBorderColor : this.disabledBorderColor}"/>
		<!---
			@keywords private
			This attribute specifies the background color to use for the input text field.
		-->
		<variable name="bgcolor" type="string" value="${this._enabled ? this.enabledBGColor : this.disabledBGColor}"/>
		<!---
			This is a boolean indicator as to whether this text input field is multi-line. The default value for this attribute
			is "false".
		-->
		<variable name="multiline" type="boolean" value="false"/>
        <!---
			@keywords private
        	This attribute lets a user provide a regexp describing set of characters allowed in this field.
        -->
		<variable name="pattern" type="string" value=""/>
		<!---
			@keywords private
			This attribute provides the value for the height of the input field.
		-->
		<variable name="height" value="30"/>
		<!---
			This attribute provides the value for the width of the input field. The default value is 230.
			@type int
		-->
		<variable name="width" value="230"/>
		<!---
			@keywords private
			This attribute provides a minimum text area height. The default value is 100.
		-->
		<variable name="textAreaHeight" type="number" value="100"/>
		<!---
			@keywords private
			The size of the padding for the input text widget. The default value is 8.
		-->
		<variable name="inputTextPadding" type="number" value="8"/>
		<!---
			@keywords private
			This is a boolean variable that indicates if the instance allows the available height of text area to grow as needed.
			The default value of this attribute is "true."
		-->
		<variable name="expandingHeight" type="boolean" value="true"/>
		<!---
			@keywords private
			This attribute provides a maximum text area height.
		-->
		<variable name="maximumHeight" value="${null}"/>
		<!---
			@keywords private
			The initial text used before the intialization of this component is completed. The default value is the empty string.
       	-->
        <variable name="initialText" type="string" value=""/>

		<!--- @keywords private -->
		<handler eventSource="this.inputText" name="onfocus">
			<![CDATA[
			if (!this.indicator) {
				new FocusIndicator.Class(this, {
					name: "indicator",
					focusableView: this.inputText,
					indicatorView: this,
					offset: 1
				});
			}
			]]>
		</handler>

		<EditText bgcolor="${this.parent.bgcolor}" height="${this.parent.height - 2 * this.parent.borderSize}" name="inputText" pattern="${this.parent.pattern}" width="${this.parent.width - 2 * this.parent.inputTextPadding}" x="${this.parent.inputTextPadding}" y="${this.parent.borderSize}">
						
			<method name="init">
				<![CDATA[
				this.inherited(arguments);
				this.updateInputTextHeight();
				]]>
			</method>
			
			<handler name="ontext">
				<![CDATA[
				EventUtil.trigger(this.parent, "ontext");
				this.updateInputTextHeight();
				]]>
			</handler>

			<handler args="kc" name="onkeyup">
				<![CDATA[
				EventUtil.trigger(this.parent, "onkeyup", kc);
				]]>
			</handler>

			<handler args="kc" name="onkeydown">
				<![CDATA[
				EventUtil.trigger(this.parent, "onkeydown", kc);
				]]>
			</handler>

			<handler name="onwidth">
				<![CDATA[
				this.updateInputTextHeight();
				]]>
			</handler>

			<!---
				Update the height to match the current text size.
			-->
			<method name="updateInputTextHeight">
				<![CDATA[
				if (this.parent.expandingHeight && this.multiline) {
					EventUtil.disconnectAll(this, "updateInputTextHeight");
					var invisibleParent = this.getInvisibleParent();
					if (invisibleParent) {
						EventUtil.connect(invisibleParent, "onvisible", this, "updateInputTextHeight");
					}
					else {
						if (this.height != this.parent.textAreaHeight) {
							this.setVariable("height", this.parent.textAreaHeight);
						}
						var newHeight = this.getContentHeight();
						if (newHeight > this.parent.textAreaHeight) {
							if (this.parent.maximumHeight != null && newHeight > this.parent.maximumHeight) {
								newHeight = this.parent.maximumHeight;
							}
							if (this.height != newHeight) {
								this.setVariable("height", newHeight);
							}
						}
					}
				}
				]]>
			</method>
			
			<handler name="onblur">
				<![CDATA[
				EventUtil.trigger(this.parent, "onblur");
				]]>
			</handler>

			<handler name="onfocus">
				<![CDATA[
				EventUtil.trigger(this.parent, "onfocus");
				]]>
			</handler>

			<handler name="onmousedown">
				<![CDATA[
				EventUtil.trigger(this.parent, "onmousedown");
				]]>
			</handler>
		</EditText>

		<Component height="${this.parent.height}" bgcolor="${this.parent.borderColor}" width="${this.parent.borderSize}"  x="0" y="0"/>
		<Component height="${this.parent.height}" bgcolor="${this.parent.borderColor}" width="${this.parent.borderSize}"  x="${this.parent.width - this.width}" y="0"/>
		<Component bgcolor="${this.parent.borderColor}" height="${this.parent.borderSize}"  width="${this.parent.width }" x="0" y="0"/>
		<Component bgcolor="${this.parent.borderColor}" height="${this.parent.borderSize}" width="${this.parent.width}" x="0" y="${this.parent.height - this.height}"/>
		
		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.setText(this.initialText);
			if (this.expandingHeight && this.multiline) {
				this.updateEditorHeightDel = new EventHandler.Class(this, "updateEditorHeight");
				this.updateEditorHeightDel.connect(this.inputText, "onheight");
				this.updateEditorHeight();
			}
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.updateEditorHeightDel) {
				this.updateEditorHeightDel.disconnectAll();
				delete this.updateEditorHeightDel;
			}
			this.inherited(arguments);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getFocusRect">
			<![CDATA[
			return [this.getVariableRelative("x", RootComponent.Singleton), this.getVariableRelative("y", RootComponent.Singleton), this.getVariableRelative("width", RootComponent.Singleton), this.getVariableRelative("height", RootComponent.Singleton)];
			]]>
		</method>
		
		<!---
			@keywords private
			This method updates the height. It is only used if the editor has {@link cmc/foundation/InputText#expandingHeight} is true.
		-->
		<method args="e" name="updateEditorHeight">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var newHeight = this.inputText.height + 2 * this.borderSize;
			var newInputTextY = this.borderSize;
			if (this.inputTextPadding > 5) {
				newHeight += 13;
				newInputTextY += 6.5;
			}
			else {
				newHeight += 9;
				newInputTextY += 4.5;
			}
			if (newHeight != this.height) {
				this.setVariable("height", newHeight);
			}
			if (newInputTextY != this.inputText.y) {
				this.inputText.setVariable("y", newInputTextY);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method updates the enablement of the editor.
		-->
		<method name="_showEnabled">
			<![CDATA[
			this.inputText.setVariable('enabled', this._enabled);
			this.inputText.setVariable("fgcolor", this._enabled ? "#464646" : "#676767");
			]]>
		</method>
		
		<!---
			@keywords private
			This method sets the HTML flag on the widget.
			@param String htmlp The HTML string to set as the content of the input field.
		-->
		<method args="htmlp" name="setHTML">
			<![CDATA[
			this.inputText.setHTML(htmlp);
			]]>
		</method>
		
		<!---
			This method sets the value of the text for this input field.
			
			@param string t The text to set as the value for the input field. This method is used as the setter for {@link cmc/foundation/InputText#text}.
		-->
		<method args="t" name="setText">
			<![CDATA[
			if (this._initcomplete) {
				this.inputText.setVariable('text', t);
			}
			else {
				this.initialText = t;
			}
			]]>
		</method>

		<!---
			@keywords private
		-->
		<method name="updateData">
			<![CDATA[
			this.inputText.updateData();
			]]>
		</method>
		
		<!--- 	
			This method returns the text that is in this input field.
			@return string The text that is contained in this input field.
		-->
		<method name="getText">
			<![CDATA[
			if (this._initcomplete) {
				return this.inputText.getText();
			}
			return this.initialText;
			]]>
		</method>
	</FocusableComponent>
	
</Definitions>