<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords private
		This cmc/foundation/ObjectHeader class displays an icon with the object header name.
		The object header name will be stored in a property bound to this object header. 
		The icon is retrieved from the object definition.
	-->
	<Component classDefinition="true" definitionName="cmc/foundation/ObjectHeader">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
			
			<!--- 
				Reference to {@link cmc/foundation/ModelProperty} object that is being edited. 
			-->
			<variable name="property" value="${null}"/>
			
			<!---
			@keywords private
			text color
			-->
			<variable name="textColor" type="string" value="#0"/>
	
			<!---
				@keywords private
				text style
			-->
			<variable name="textStyle" type="string" value="plain"/>
			
			<!--- @keywords private -->
			<handler name="oninit">
			<![CDATA[
			this._initcomplete = true;
			this.updateValue();
			]]>
		</handler>
		
			<!--- @keywords private -->
			<method name="destroy">
			<![CDATA[
			if (this.updateValueDel) {
				this.updateValueDel.disconnectAll();
				delete this.updateValueDel;
			}
			this.inherited(arguments);
			]]>
		</method>		
			
			<!--- @keywords private -->
			<method args="newProperty" name="setProperty">
			<![CDATA[
			if (typeof (this.property) == "undefined" || newProperty != this.property) {
				if (typeof (this.updateValueDel) == "undefined") {
					this.updateValueDel = new EventHandler.Class(this, "updateValue");
				}
				this.updateValueDel.disconnectAll();
				this.property = newProperty;
				if (this.property) {
					this.updateValueDel.connect(this.property, "onvalue");
					this.updateValue();
				}
			}
			]]>
		</method>
			
			<!--- 
				Update and refresh the text value with a new {@link cmc/foundation/ModelProperty} value. 
			-->
			<method args="e" name="updateValue">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (this.property && this._initcomplete) {
				var value = this.property.value;
				this.titleArea.headerIcon.setVariable("imageSet", this.property.o.objectDefinition.headerIcon);
				if (this.titleArea.title.headerText != null) {
					if (value != this.titleArea.title.headerText.text) {
						this.titleArea.title.headerText.setVariable("text", value);
					}
				}
			}
			]]>
		</method>
			
			<DividerLine y="8"/>
			<Component clip="true" name="titleArea" width="300" x="${-10}" y="14">
				<AxisLayout axis="x" spacing="2"/>	
				<Component name="headerIcon" y="${-5}"/>	
				<Component name="title" width="300" x="${-1}">
					<AxisLayout axis="y" spacing="2"/>
					<Component height="5" name="headerPaddingAbove"/>				
					<TextComponent fgcolor="${this.classroot.textColor}" fontsize="16" fontstyle="${this.classroot.textStyle}" multiline="true" name="headerText" text=""/>
				</Component>
			</Component>
		
		<method args="property" name="set_property">
			<![CDATA[
			this.setProperty(property);
			]]>
		</method></Component>

</Definitions>