<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		<p>A cmc/foundation/ObjectTemplate defines a set of default property values and child objects that users can select 
		for an object definition. To declare that a cmc/foundation/ObjectTemplate can be applied to an object, 
		you must create an instance of that template as a child of the {@link cmc/foundation/ObjectDefinition object definition}.</P>

		<p>The object definition must contain a property that specifies the templates that can be applied 
		to the object. It is identified by the value of the {@link cmc/foundation/ObjectDefinition#templateTypeProperty} 
		attribute of the object definition. The possible values for this property are derived from the 
		{@link cmc/foundation/ObjectTemplate#displayName displayName} of each cmc/foundation/ObjectTemplate beneath the object 
		definition. When this property is displayed in the user interface, users can select a template 
		to apply to the instance of the object being edited. </p>

		<p>When a template type is changed, the objects specified with the previous template are 
		deleted before the new object template is applied.</p>

		<p>A cmc/foundation/ObjectTemplate class should declare a child node of "xml"
		with the name <code>"template"</code>. The template "xml" node 
		can be used to declare default values for business object properties. It can also be used to 
		declare child objects that will be instantiated with the new business object. The syntax for the 
		template dataset is the same as the XML syntax for business objects that are loaded from the server. 
		The following example demonstrates the declaration of a template dataset. The template provides 
		a default value for a property named referenceType and indicates that a child object of object 
		type CatalogEntryListPrice is to be created when new instances of the business object are created.</p>
		
		<p>A single instance of {@link cmc/foundation/EnablementCondition} can be declared as a child of an object template. If
		the enablement condition evaluates to false for an object template instance, then the object template will not be available.</p>
		
		@START_CODE
		<dataset name="template">
			<referenceType>MerchandisingAssociations</referenceType>
			<object objectType="CatalogEntryListPrice" />
		</dataset> 	
		@END_CODE
	
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/ObjectTemplate">
		<!---
			The template type of this template.
		-->
		<variable name="templateType" type="string" value=""/>	
	
		<!---
			The display name of this template.
		-->
		<variable name="displayName" type="string" value=""/>
		<!---
			The description of this template.
		-->
		<variable name="description" type="string" value=""/>
		<!---
			@keywords private
			
			When this template object is unselected, the specified object types will be deleted.  This is created from the template
			during instantiation.
		-->
		<variable name="deleteObjectTypes" type="string" value=""/>
		<!---
			@keywords private
			The enablement condition for this object template.
		-->
		<variable name="enablementCondition" value="${null}"/>

		<!---
			@keywords private
		-->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			if (!this._definition) {
				this.postCreateDefinitionChildren();
			}
			]]>
		</method>

		<!---
			@keywords private
		-->
		<method name="postCreateDefinitionChildren">
			<![CDATA[
			this.parent.objectTemplates[this.templateType] = this;
			this.parent.objectTemplatesArray.push(this);
			if (this.template) {
				this.deleteObjectTypes = "";
				var elements = this.template.getElementsByTagName("object");
				for (var i = 0; i < elements.length; i++) {
					if (this.deleteObjectTypes != "") {
						this.deleteObjectTypes += ",";
					}
					this.deleteObjectTypes += elements[i].getAttribute("objectType");
				}
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getTemplate">
			<![CDATA[
			return this.template;
			]]>
		</method>
		
	</Node>
</Definitions>