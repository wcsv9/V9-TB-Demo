<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		The class cmc/foundation/BaseRadioGroup applies WeSphere Commerce own visual design. 
		Radio groups are used to group a set of radio buttons and making sure that from that group or radio
		buttons there is only one that can remain selected.
		
		<p>Use cmc/foundation/BaseRadioGroup when implementing a basic radio group that has the WeSphere Commerce look and feel.
		
		<p>The example below will help allow business users to select a value of one to three.
		@START_CODE	
		<BaseRadioGroup name="number">
		   	<BaseRadioButton value="1" text="${resourceBundle.valueOne}"/>
		   	<BaseRadioButton value="2" text="${resourceBundle.valueTwo}"/>
	    	<BaseRadioButton value="3" text="${resourceBundle.valueThree}" selected="true"/>
		</BaseRadioGroup>
		@END_CODE	
	-->
	<BaseListComponent classDefinition="true" definitionName="cmc/foundation/BaseRadioGroup" layoutProperties="&quot;axis&quot;: &quot;y&quot;, &quot;inset&quot;: 3, &quot;spacing&quot;: 5">
		<variable name="value" value="${null}"/>
		<dependency localName="FocusIndicator" moduleName="cmc/foundation/FocusIndicator"/>
		<dependency localName="FocusUtil" moduleName="cmc/foundation/FocusUtil"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="PropertyValueRadioButton" moduleName="cmc/foundation/PropertyValueRadioButton"/>
		<!---
			@keywords private
			Sets cmc/foundation/BaseRadioGroup to use {@link cmc/foundation/BaseRadioButton} for it's selectable options
		-->
		<variable name="itemClass" value="${PropertyValueRadioButton}"/>
		
		<!--- @keywords private -->
		<method args="kc" name="_dokeydown">
			<![CDATA[
			this.inherited(arguments);
			this.setVariable('doesenter', false);
			]]>
		</method>
		
		<!---
			@keywords private
			Handle onselect event. 
		-->
		<handler name="onselect">
			<![CDATA[
			if (this.isinited && FocusUtil.getFocus() == this) {
				this.setHilite(this.getSelection());
			}
			]]>
		</handler>
		<!---
			@keywords private
			Handle onfocus event. 
		-->
		<handler name="onfocus">
			<![CDATA[
			if (this.getSelection() != null) {
				this.setHilite(this.getSelection());
			}
			else {
				this.setHilite(this.getItemAt(0));
			}
			if (!this.indicator) {
				new FocusIndicator.Class(this, {
					name: "indicator",
					focusableView: this,
					indicatorView: this,
					placement: "interior"
				});
			}
			]]>
		</handler>
		
		
		<method args="val" name="set_value">
			<![CDATA[
			if (val == this.value) {
				return;
			}
			else {
				this.value = val;
				EventUtil.trigger(this, "onvalue", val);
			}
			]]>
		</method>
	</BaseListComponent>

	<!---
		@keywords private
		Used in {@link cmc/foundation/BaseRadioButton} when multiline is false
	-->
	<TextComponent classDefinition="true" definitionName="cmc/foundation/RadioButtonText" multiline="false" text="${this.parent.text}"/>
	
	<!---
		@keywords private
		Used in {@link cmc/foundation/BaseRadioButton} when multiline is true, width must also be set for multiline to work
	-->
	<TextComponent classDefinition="true" definitionName="cmc/foundation/RadioButtonMulitlineText" multiline="true" text="${this.parent.text}" width="${this.parent.width - this.x}"/>
	
	<!---
		The class cmc/foundation/BaseRadioButton applies WeSphere Commerce own visual design providing a very 
		simple two-state button with a label. It is to be used in conjunction with {@link cmc/foundation/BaseRadioGroup}.
		
		<p>Use cmc/foundation/BaseRadioButton when implementing a basic radio button that has the WeSphere Commerce look and feel. 
		
		<p>The example below will help allow business users to select a value of one to three.
		@START_CODE	
		<BaseRadioGroup name="number">
		   	<BaseRadioButton value="1" text="${resourceBundle.valueOne}"/>
		   	<BaseRadioButton value="2" text="${resourceBundle.valueTwo}"/>
	    	<BaseRadioButton value="3" text="${resourceBundle.valueThree}" selected="true"/>
		</BaseRadioGroup>
		@END_CODE	
	-->
	<BaseListItem classDefinition="true" clickable="true" definitionName="cmc/foundation/BaseRadioButton" focusable="false">
		<variable name="width" value="${null}"/>
		<dependency localName="RadioButtonMulitlineText" moduleName="cmc/foundation/RadioButtonMulitlineText"/>
		<dependency localName="RadioButtonText" moduleName="cmc/foundation/RadioButtonText"/>
		<dependency localName="Component" moduleName="cmc/foundation/Component"/>
		<!--- 
			@keywords private 
			Sets the text in the radio button to multiline
		-->
		<variable name="multiline" type="boolean" value="false"/>
		<!--- 
			Sets the source for the buttons image
		-->
		<variable name="imageSrc" type="string" value="${null}"/>
		
		<!---
			@keywords private
			Radio button descriptor.
		-->
		<variable name="descriptor" value="${null}"/>
		
		<AxisLayout axis="x" spacing="3"/>
        <StateButton imageSet="radioButton" maxstate="1" name="rb" reference="${this.parent}" statelength="2" downImage="1" disabledImage="2" statenum="${this.parent.selected ? 1 : 0}">
        </StateButton>
        <Component imageSource="${this.classroot.imageSrc}" name="buttonImage" visible="${this.classroot.imageSrc != null}"/>
        
        <!--- 
			@keywords private 
		-->
		<method name="init">
			<![CDATA[
			if (this.descriptor != null) {
				this._title = this.descriptor.createTitle(this);
			}
			else if (this.multiline) {
				this._title = new RadioButtonMulitlineText.Class(this);
			}
			else {
				this._title = new RadioButtonText.Class(this);
			}
			new Component.Class(this, {
				width: 10
			});
			this.inherited(arguments);
			]]>
		</method>
        <!--- 
			@keywords private 
			Updates the radio button label color to use for both enabled and disabled states. 
		-->
		<method args="s" name="_applystyle">
			<![CDATA[
			if (this.style != null) {
				if (this.hilited) {
					this.setVariable("bgcolor", "#e6effb");
				}
				else {
					this.setVariable("bgcolor", "#ffffff");
				}
				if (this._enabled) {
					if (this.hilited) {
						this._title.setVariable("fgcolor", this.style.texthilitecolor);
					}
					else {
						this._title.setVariable("fgcolor", this.style.textcolor);
					}
				}
				else {
					if (this.hilited) {
						this._title.setVariable("fgcolor", "#9d9d9d");
					}
					else {
						this._title.setVariable("fgcolor", this.style.textdisabledcolor);
					}
				}
			}
			]]>
		</method>
    </BaseListItem>
	<!---
		@keywords final
		This class defines a widget that displays a radio group containing a list of radio buttons that the user can select. 
		For more information on radio group see {@link cmc/foundation/BaseRadioGroup}.

		<p>The name of the property specified by the {@link cmc/foundation/PropertyEditor#propertyName propertyName} attribute is resolved to 
		the associated {@link cmc/foundation/PropertyDefinition}. A radio button is created for each {@link cmc/foundation/PropertyValue possible value}
		of this associated {@link cmc/foundation/PropertyDefinition} and put into the radio group.
		
		<p>Instances of this class may only be declared as immediate sub-nodes of {@link cmc/foundation/PropertyPane} or {@link cmc/foundation/PropertyGroup}.
		
		<p>The code snippet below demonstrates how this class is used:

		@START_CODE
			...
			<PropertyDefinition propertyName="unitOfMeasure">
				<PropertyValue displayName="Kilogram" value="KGM"/>
				<PropertyValue displayName="milligram" value="LBR"/>
				<PropertyValue displayName="1 Unit" value="C62"/>
			</PropertyDefinition>
			...
			<PropertyGroup>
				<PropertyRadioGroup propertyName="unitOfMeasure"	promptText="Select the Unit of Measure"/>
			</PropertyGroup>
		@END_CODE
		
		<p>In the above code, a radio group with three radio buttons will be created. The text and value
		of each of the three radio buttons correspond to the displayName and value of the three <code>cmc/foundation/PropertyValue</code>
		pairs above.
	-->
	<PropertyEditor classDefinition="true" definitionName="cmc/foundation/PropertyRadioGroup">
		<dependency localName="RadioGroup" moduleName="cmc/foundation/RadioGroup"/>
		
		<!---
			@keywords private
			Array of radio button descriptors.
		-->
		<variable name="radioButtonDescriptors" value="${null}"/>
		<!---	
			@keywords private
			Create the radio group editor for the given property component. This method overrides the createEditor method in 
			the {@link cmc/foundation/PropertiesComponent} class.
			@param cmc/foundation/PropertiesComponent parentComponent The parent properties component from which to create the editor.
		-->
		<method args="parentComponent" name="createEditor">
			<![CDATA[
			if (this.sizeToAvailableWidth) {
				new RadioGroup.Class(parentComponent, {
					name: "editor",
					x: parentComponent.promptWidth + parentComponent.xspacing,
					property: parentComponent.property,
					enabled: parentComponent.enabled,
					width: parentComponent.width - parentComponent.promptWidth - parentComponent.xspacing,
					radioButtonDescriptors: this.radioButtonDescriptors
				});
			}
			else {
				new RadioGroup.Class(parentComponent, {
					name: "editor",
					x: parentComponent.promptWidth + parentComponent.xspacing,
					property: parentComponent.property,
					enabled: parentComponent.enabled,
					radioButtonDescriptors: this.radioButtonDescriptors
				});
			}
			]]>
		</method>
		
	</PropertyEditor>
	
	<!---
		@keywords private
		Base class for radio button content. This is used to display the title and any additional content for the radio button.
	-->
	<Component classDefinition="true" definitionName="cmc/foundation/RadioButtonContent" x="17">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<!--- Radio button descriptor -->
		<variable name="descriptor"/>
		<AxisLayout axis="y" spacing="2"/>
		<TextComponent text="${this.parent.descriptor.text}"/>

		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updatePropertyDel = new EventHandler.Class(this, "updateProperty");
			this.updatePropertyDel.connect(this.parent.parent, "onproperty");
			this.updateValueDel = new EventHandler.Class(this, "updateValue");
			this.updateProperty();
			this.updateContentWidthDel = new EventHandler.Class(this, "updateContentWidth");
			this.updateContentWidthDel.connect(this.parent.parent, "onwidth");
			]]>
		</method>

		<method name="destroy">
			<![CDATA[
			this.updatePropertyDel.disconnectAll();
			delete this.updatePropertyDel;
			this.updateValueDel.disconnectAll();
			delete this.updateValueDel;
			this.updateContentWidthDel.disconnectAll();
			delete this.updateContentWidthDel;
			this.inherited(arguments);
			]]>
		</method>

		<method args="e" name="updateProperty">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.descriptor.updateProperty(this, this.parent.parent.property);
			this.updateValueDel.disconnectAll();
			if (this.parent.parent.property != null) {
				this.updateValueDel.connect(this.parent.parent.property, "onvalue");
				this.updateValue();
			}
			]]>
		</method>

		<method args="e" name="updateValue">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.descriptor.updateValue(this, this.parent.parent.property);
			]]>
		</method>

		<method args="e" name="updateContentWidth">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.descriptor.updateContentWidth(this);
			]]>
		</method>
	</Component>

	<!---
		This class defines a radio button descriptor that can be used with {@link cmc/foundation/PropertyRadioGroup}. Radio groups
		defined with instances of cmc/foundation/RadioButtonDescriptor must define all of the available choices through the descriptors.
		The property values of the property associated with the radio group will not be used to create radio buttons.

		<p>The following example demonstrates the use of two radio button descriptors

		@START_CODE
			<PropertyRadioGroup propertyName="useDefault" promptText="useDefault">
				<RadioButtonDescriptor value="true" text="Use default"/>
				<RadioButtonDescriptor value="false" text="Override default"/>
			</PropertyRadioGroup>
		@END_CODE
		
		<p>In the above code, a radio group with two radio buttons will be created.
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/RadioButtonDescriptor">
		<dependency localName="RadioButtonContent" moduleName="cmc/foundation/RadioButtonContent"/>
		<!--- Radio button value -->
		<variable name="value" type="string"/>

		<!--- Radio button text -->
		<variable name="text" type="string" value=""/>

		<!--- @keywords private -->
		<variable name="sizeToAvailableWidth" type="boolean" value="false"/>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			if (this.parent.radioButtonDescriptors == null) {
				this.parent.radioButtonDescriptors = [];
			}
			this.parent.radioButtonDescriptors.push(this);
			if (this.sizeToAvailableWidth && !this.parent.sizeToAvailableWidth) {
				this.parent.setVariable("sizeToAvailableWidth", true);
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method args="radioButton" name="createTitle">
			<![CDATA[
			return new RadioButtonContent.Class(radioButton, {
				name: "content",
				descriptor: this
			});
			]]>
		</method>

		<!--- @keywords private -->
		<method args="content, property" name="updateProperty">
			<![CDATA[

			]]>
		</method>

		<!--- @keywords private -->
		<method args="content, property" name="updateValue">
			<![CDATA[

			]]>
		</method>

		<!--- @keywords private -->
		<method args="content" name="updateContentWidth">
			<![CDATA[
			if (this.sizeToAvailableWidth && content.editor) {
				content.editor.setVariable("width", content.parent.parent.width - content.x);
			}
			]]>
		</method>
	</Node>

	<!---
		This class defines a radio button descriptor that can be used with {@link cmc/foundation/PropertyRadioGroup}. The radio
		button will display a property viewer below the radio button title.
	-->
	<RadioButtonDescriptor classDefinition="true" definitionName="cmc/foundation/RadioButtonWithPropertyViewerDescriptor" sizeToAvailableWidth="true">
		<dependency localName="TextViewer" moduleName="cmc/foundation/TextViewer"/>
		<!--- The name of the property to be displayed in the property viewer. -->
		<variable name="viewerPropertyName" type="string"/>

		<!--- @keywords private -->
		<method args="content, property" name="updateProperty">
			<![CDATA[
			var viewerProperty = null;
			if (property != null) {
				viewerProperty = property.o.getProperty(this.viewerPropertyName);
			}
			if (typeof (content.editor) == "undefined") {
				new TextViewer.Class(content, {
					name: "editor",
					fgcolor: "#676767",
					property: viewerProperty,
					width: content.parent.parent.width - content.x
				});
			}
			else {
				content.editor.setVariable("property", viewerProperty);
			}
			]]>
		</method>
	</RadioButtonDescriptor>

	<!---
		@keywords private
		This class defines the text editor that is used inside the radio button content defined by an instance of {@link cmc/foundation/RadioButtonWithInputTextDescriptor}.
	-->
	<TextEditor classDefinition="true" definitionName="cmc/foundation/RadioButtonTextEditor">
		<handler name="onmousedown">
			<![CDATA[
			var radioButton = this.parent.parent;
			if (radioButton.parent.enabled) {
				radioButton.parent.selectItem(radioButton.value);
			}
			]]>
		</handler>
	</TextEditor>
	
	<!---
		This class defines a radio button descriptor that can be used with {@link cmc/foundation/PropertyRadioGroup}. The radio
		button will display a property input text field below the radio button title.
	-->
	<RadioButtonDescriptor classDefinition="true" definitionName="cmc/foundation/RadioButtonWithInputTextDescriptor" sizeToAvailableWidth="true">
		<dependency localName="RadioButtonTextEditor" moduleName="cmc/foundation/RadioButtonTextEditor"/>
		<!--- The name of the property to be edited by the property editor. -->
		<variable name="editorPropertyName" type="string"/>
		<!--- Indicates that the editor is a multi-line input text field. -->
		<variable name="multiline" type="boolean" value="false"/>
		
		<!--- @keywords private -->
		<method args="content, property" name="updateProperty">
			<![CDATA[
			var editorProperty = null;
			if (property != null) {
				editorProperty = property.o.getProperty(this.editorPropertyName);
			}
			if (typeof content.editor == "undefined") {
				var editorArgs = {
					name: "editor",
					property: editorProperty,
					width: content.parent.parent.width - content.x,
					enabled: property.value == this.value
				};
				if (this.multiline) {
					editorArgs.multiline = true;
					editorArgs.maximumHeight = 200;
				}
				new RadioButtonTextEditor.Class(content, editorArgs);
			}
			else {
				content.editor.setVariable("property", editorProperty);
			}
			]]>
		</method>	
				
		<!--- @keywords private -->
		<method args="content, property" name="updateValue">
			<![CDATA[
			var editorEnabled = property.value == this.value;
			content.editor.setVariable("enabled", editorEnabled);
			if (!editorEnabled && property.dirty) {
				var editorProperty = property.o.getProperty(this.editorPropertyName);
				editorProperty.change("");
			}
			]]>
		</method>
		
	</RadioButtonDescriptor>
	
	<!---
		@keywords private
		
		This radio group implementation is for internal use by both {@link cmc/foundation/PropertyRadioGroup} and {@link cmc/foundation/GridRadioGroup} 
		to bind a {@link cmc/foundation/ModelProperty} with the radio group. Given a {@link cmc/foundation/PropertyDefinition} as an input,
		this class generates a set of radio buttons which supports the object properties model.
	-->
	<BaseRadioGroup classDefinition="true" definitionName="cmc/foundation/RadioGroup">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="BaseRadioButton" moduleName="cmc/foundation/BaseRadioButton"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
	
		<!---
			@keywords private
			Array of radio button descriptors.
		-->
		<variable name="radioButtonDescriptors" value="${null}"/>
		<!--- Reference to {@link cmc/foundation/ModelProperty} object that is being edited. -->
		<variable name="property" value="${null}"/>

		<!--- 
			@keywords private
			Cleanup delegates when this widget is destroyed  
		-->
		<method name="destroy">
			<![CDATA[
			if (this.updateValueDel) {
				this.updateValueDel.disconnectAll();
				delete this.updateValueDel;
			}
			if (this.propValueDel) {
				this.propValueDel.disconnectAll();
				delete this.propValueDel;
			}
			this.inherited(arguments);
			]]>
		</method>

		<!---
			@keywords private
			Set the {@link cmc/foundation/ModelProperty} to be associated with this radio group. Listeners are created to
			watch the property value. If the property changes at anytime, the updateValue method will be called.
			@param cmc/foundation/ModelProperty newProperty: New Property associated with this radio group.
		-->
		<method args="newProperty" name="setProperty">
			<![CDATA[
			if (typeof (this.property) == "undefined" || newProperty != this.property) {
				if (typeof (this.updateValueDel) == "undefined") {
					this.updateValueDel = new EventHandler.Class(this, "updateValue");
				}
				this.updateValueDel.disconnectAll();
				this.property = newProperty;
				if (this.property) {
					if (this.isinited) {
						this.createRadioButtons();
					}
					this.updateValueDel.connect(this.property, "onvalue");
					this.updateValue();
				}
				else {
					this.clearSelection();
					this.value = "";
				}
				EventUtil.trigger(this, "onproperty");
			}
			]]>
		</method>

		<!--- 
			@keywords private
			Create the radio buttons once the widget is initialized.
		-->
		<handler name="oninit">
			<![CDATA[
			if (this.property) {
				this.createRadioButtons();
			}
			]]>
		</handler>

		<!--- Create the actual radio group and child radio buttons -->
		<method args="e" name="createRadioButtons">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (this.radioButtonDescriptors != null && this.radioButtonDescriptors.length > 0) {
				if (!this._buttonsCreated) {
					this._buttonsCreated = true;
					for (var i = 0; i < this.radioButtonDescriptors.length; i++) {
						var descriptor = this.radioButtonDescriptors[i];
						new BaseRadioButton.Class(this, {
							value: descriptor.value,
							descriptor: descriptor
						});
					}
				}
				if (this.property) {
					this.updateValue();
				}
			}
			else if (this.property && this.property.propertyDefinition != null) {
				var propDef = this.property.propertyDefinition;
				if (!this.propValueDel) {
					this.propValueDel = new EventHandler.Class(this, "createRadioButtons");
				}
				else {
					this.propValueDel.disconnectAll();
				}
				var propertyValues = this.property.propertyDefinition.getPropertyValues(this.property.o, this.propValueDel);
				var createItems = false;
				if (!this._propertyValues) {
					createItems = true;
				}
				if (!createItems && this._propertyValues.length != propertyValues.length) {
					createItems = true;
				}
				if (!createItems) {
					for (var i = 0; i < this._propertyValues.length; i++) {
						if (this._propertyValues[i].value != propertyValues[i].value || this._propertyValues[i].displayName != propertyValues[i].displayName) {
							createItems = true;
							break;
						}
					}
				}
				if (createItems) {
					this._propertyValues = propertyValues;
					for (var i = this.getNumItems() - 1; i >= 0; i--) {
						this.removeItemAt(i);
					}
					for (var i = 0; i < propertyValues.length; i++) {
						var propertyValue = propertyValues[i];
						this.addItem(propertyValue.displayName, propertyValue.value);
						var newItem = this.getItem(propertyValue.value);
						newItem.setVariable("propertyValue", propertyValue);
					}
				}
				this.updateValue();
			}
			]]>
		</method>

		<!--- Update the widget with a new property value. -->
		<method args="e" name="updateValue">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var value = this.property.value;
			if (value != this.value) {
				if (value != null && value != "") {
					this.selectItem(value);
				}
				else {
					this.clearSelection();
					this.value = value;
				}
			}
			]]>
		</method>

		<!--- 
			Set the cmc/foundation/ModelProperty to represent the value of the selected radio button from this
			radio group. This method is called when the radio button selection from this radio group 
			has changed.
		-->
		<method name="storeValue">
			<![CDATA[
			if (this.property) {
				this.property.change(this.getValue());
				if (Logger.Singleton.enabled) {
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.view", "INFO", "cmc/foundation/RadioGroup", "storeValue", "updates the model property " + this.property.propertyName + " with new value " + this.getValue() + this.property.o.logString());
				}
			}
			]]>
		</method>

		<!--- 
			When the selection of the radio group is changed by the business user, storeValue method will be called.
		-->
		<handler name="onvalue">
			<![CDATA[
			if (this._initcomplete) {
				this.storeValue();
			}
			]]>
		</handler>

		<method args="property" name="set_property">
			<![CDATA[
			this.setProperty(property);
			]]>
		</method>
	</BaseRadioGroup>
	
	<!---
		@keywords private
	 -->
	<BaseRadioButton classDefinition="true" definitionName="cmc/foundation/PropertyValueRadioButton">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
        <variable name="propertyValue"/>
        
		<method args="v" name="set_propertyValue">
			<![CDATA[
			if (this.propertyValue != v) {
				this.propertyValue = v;
				if (this.updateTextDel) {
					this.updateTextDel.disconnectAll();
				}
				else {
					this.updateTextDel = new EventHandler.Class(this, "updateText");
				}
				if (this.propertyValue != null) {
					this.updateTextDel.connect(this.propertyValue, "ondisplayName");
				}
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.updateTextDel) {
				this.updateTextDel.disconnectAll();
				delete this.updateTextDel;
			}
			this.inherited(arguments);
			]]>
		</method>
		
		<!---
			@keywords private
		-->
		<method args="e" name="updateText">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.setVariable("text", this.propertyValue.displayName);
			]]>
		</method>
    </BaseRadioButton>
</Definitions>