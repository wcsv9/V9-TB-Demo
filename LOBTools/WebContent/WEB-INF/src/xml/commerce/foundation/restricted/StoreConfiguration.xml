<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2019 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords private

		Base class for store configuration information.
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/StoreConfiguration">
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<!---
			Parse the specified data element and populate the attributes in this instance
			with the data elements.
			@param XML e: the data element
		-->
		<method args="e" name="parseDataElement">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/StoreConfiguration", "parse(e)", [e]);
			}
			var nodes = e.childNodes;
			for (var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				var textNode = node.firstChild;
				if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
					this.setVariable(node.nodeName, textNode.nodeValue);
				}
				else {
					this.setVariable(node.nodeName, null);
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/StoreConfiguration", "parse(e)");
			}
			]]>
		</method>
	</Node>

	<!---
		@keywords private

		Store language information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreLanguage">
		<!---
			Language description.
		-->
		<variable name="languageDescription" type="string" value=""/>
		<!---
			Language ID.
		-->
		<variable name="languageId" type="string" value=""/>
		<!---
			Locale name.
		-->
		<variable name="localeName" type="string" value=""/>
		<!---
			Language.
		-->
		<variable name="language" type="string" value=""/>
		<!---
			Indicates that this language is the default language.
		-->
		<variable name="isDefault" type="boolean" value="false"/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store currency information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreCurrency">
		<!---
			Currency description.
		-->
		<variable name="currencyDescription" type="string" value=""/>
		<!---
			Currency code.
		-->
		<variable name="currencyCode" type="string" value=""/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store default currency information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreDefaultCurrency">
		<!---
			Currency description.
		-->
		<variable name="currencyDescription" type="string" value=""/>
		<!---
			Currency code.
		-->
		<variable name="currencyCode" type="string" value=""/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store static content information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreStaticContent">

		<!---
			Static content URI prefix. For example, "/wcsstore/Madisons/".
		-->
		<variable name="uriPrefix" type="string" value=""/>
		<!---
			Static content URL prefix. For example, "http://servername:80/wcsstore/Madisons/".
		-->
		<variable name="urlPrefix" type="string" value=""/>
		<!---
			Static content directory. For example, "Madisons".
		-->
		<variable name="directory" type="string" value=""/>
		<!---
			Store web server port. For example, "80".
		-->
		<variable name="webServerPort" type="string" value=""/>
		<!---
			Store SSL web server port. For example, "443".
		-->
		<variable name="webServerSSLPort" type="string" value=""/>
		<!---
			Store context path. For example, "/webapp/wcs/stores".
		-->
		<variable name="contextPath" type="string" value=""/>
		<!---
			Store servlet mapping path. For example, "/servlet".
		-->
		<variable name="urlMappingPath" type="string" value=""/>
		<!---
			Store level. For example, "MOBILE".
		-->
		<variable name="storeLevel" type="string" value=""/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store fulfillment center information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreFulfillmentCenter">
		<!---
			Fulfillment center name.
		-->
		<variable name="fulfillmentCenterName" type="string" value=""/>
		<!---
			Fulfillment center ID.
		-->
		<variable name="fulfillmentCenterId" type="string" value=""/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store inventory information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreInventorySystem">
		<!---
			Inventory system.
		-->
		<variable name="inventorySystem" type="string" value=""/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store shipping mode information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreShippingMode">
		<!---
			Shipping mode description
		-->
		<variable name="shippingModeDescription" type="string" value=""/>
		<!---
			Shipping mode ID.
		-->
		<variable name="shippingModeId" type="string" value=""/>
		<!---
			Shipping mode code.
		-->
		<variable name="code" type="string" value=""/>
		<!---
			Shipping mode carrier.
		-->
		<variable name="carrier" type="string" value=""/>
	</StoreConfiguration>


	<!---
		@keywords private

		Store remote widget information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreRemoteWidgets">
		<!---
			Whether or not remote widgets is enabled. "true" or "false"
		-->
		<variable name="isEnabled" type="string" value="false"/>
		<!---
			The context path of the REST servlet.
		-->
		<variable name="restContextPath" type="string" value=""/>
		<!---
			The secure port of the REST servlet.
		-->
		<variable name="restSSLPort" type="string" value=""/>
		<!---
			The non-secure port of the REST servlet.
		-->
		<variable name="restNonSSLPort" type="string" value=""/>
		<!---
			The context path of the REST preview servlet.
		-->
		<variable name="restPreviewContextPath" type="string" value=""/>
		<!---
			The secure port of the REST preview servlet.
		-->
		<variable name="restPreviewSSLPort" type="string" value=""/>
		<!---
			The non-secure port of the REST preview servlet.
		-->
		<variable name="restPreviewNonSSLPort" type="string" value=""/>
	</StoreConfiguration>
	<!---
		@keywords private

		Store list price list information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreListPriceList">
		<!---
			Whether or not list price list is enabled. "true" or "false"
		-->
		<variable name="isEnabled" type="string" value="false"/>
	</StoreConfiguration>
	<!---
		@keywords private

		Store is remote information.
	-->

	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/IsRemoteStore">
		<!---
			Whether or not the store is a remote store. "true" or "false"
		-->
		<variable name="isRemote" type="string" value="true"/>
	</StoreConfiguration>
	<!---
		@keywords private

		Store SEO information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreSEO">
		<!---
			Whether or not seo is enabled. "true" or "false"
		-->
		<variable name="isEnabled" type="string" value="false"/>
	</StoreConfiguration>
	<!---
		@keywords private

		Store Remote Configuration information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/RemoteStoreServerConfig">
		<!---
			Remote server host.
		-->
		<variable name="remoteWebServerHostName" type="string" value=""/>
		<!---
			Remote server port.
		-->
		<variable name="remoteWebServerPort" type="string" value=""/>
		<!---
			Remote server ssl port.
		-->
		<variable name="remoteWebServerSSLPort" type="string" value=""/>
		<!---
			Remote context path.
		-->
		<variable name="remoteWebServerContextPath" type="string" value=""/>
		<!---
			Remote previewContext path.
		-->
		<variable name="remotePreviewContextPath" type="string" value=""/>
		<!---
			Remote store is headless store.
		-->
		<variable name="headlessStore" type="string" value=""/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store analytics information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreAnalytics">
		<!---
			Analytics provider
		-->
		<variable name="provider" type="string" value=""/>
		<!---
			Analytics url
		-->
		<variable name="url" type="string" value=""/>
		<!---
			Whether or not analytics is enabled. "true" or "false"
		-->
		<variable name="isEnabled" type="string" value="false"/>
		<!---
			Marketing Center URL
		-->
		<variable name="marketingCenterUrl" type="string" value=""/>
		<!---
			Whether or not marketing center is enabled. "true" or "false"
		-->
		<variable name="isMarketingCenterEnabled" type="string" value="false"/>
	</StoreConfiguration>
	<!---
		@keywords private
		Store Sterling configurator information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreSterlingConfig">
		<!--- Whether or not Sterling configurator is enabled. "true" or "false" -->
		<variable name="isEnabled" type="string" value="false"/>
		<!--- Visual Modeler Server URL -->
		<variable name="visualModelerServer" type="string" value=""/>
		<!--- Visual Modeler Server ID -->
		<variable name="visualModelerId" type="string" value=""/>
		<!--- Visual Modeler Server password -->
		<variable name="visualModelerPassword" type="string" value=""/>
		<!--- Sterling Configurator Server URL -->
		<variable name="configuratorURL" type="string" value=""/>
		<!--- Sterling Organization code  -->
		<variable name="sterlingOrganization" type="string" value=""/>
	</StoreConfiguration>

<!---
		@keywords private
		Watston Content Hub information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreWCHConfig">
		<!--- Whether or not Watson Content Hub is enabled. "true" or "false" -->

		<!--- Watson Content Hub Id -->
		<variable name="WCHTenantId" type="string" value=""/>
		<!--- Watson Content Hub user name -->
		<variable name="WCHUserName" type="string" value=""/>
		<!--- Watson Content Hub password -->
		<variable name="WCHPassword" type="string" value=""/>

	</StoreConfiguration>

	<!---
		@keywords private

		CKEditor Substitution tags to be use for CKEditor
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/CKEditorSubstitutionTags">
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<!---
			The tags
		-->
		<variable name="tags" value="${{}}"/>
		<!---
			Parse the specified data element and populate the attributes in this instance
			with the data elements.
			@param XML e: the data element
		-->
		<method args="e" name="parseDataElement">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/CKEditorSubstitutionTags", "parseDataElement(e)", [e]);
			}
			this.tags = {};
			var nodes = e.childNodes;
			for (var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				var textNode = node.firstChild;
				if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
					this.tags["\'[" + node.nodeName + "]\'"] = textNode.nodeValue;
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/CKEditorSubstitutionTags", "parseDataElement(e)");
			}
			]]>
		</method>
	</Node>

	<!---
		@keywords private

		Store resolve content URL information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreResolveContentURL">
		<!---
			The content management system host.
		-->
		<variable name="cmsHost" type="string" value="${null}"/>
		<!---
			The content management system preview host.
		-->
		<variable name="cmsPreviewHost" type="string" value="${null}"/>
		<!---
			Content path.
		-->
		<variable name="cmsPath" type="string" value="${null}"/>
		<!---
			Content preview path.
		-->
		<variable name="cmsPreviewPath" type="string" value="${null}"/>
		<!---
			URL encode indicator.
		-->
		<variable name="encode" type="string" value="${null}"/>
		<!---
			URL encode for preview indicator.
		-->
		<variable name="encodeForPreview" type="string" value="${null}"/>
	</StoreConfiguration>

	<!---
		@keywords private

		Store flow option information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreFlowOptions">
		<!---
			UseCommerceComposer store flow option.
		-->
		<variable name="UseCommerceComposer" type="string" value="${null}"/>
	</StoreConfiguration>


	<!---
		@keywords private

		Store CSS information.
	-->
	<StoreConfiguration classDefinition="true" definitionName="cmc/foundation/StoreCSS">
		<!---
			url store css url
		-->
		<variable name="url" type="string" value="${null}"/>

		<!---
			locales store css locales
		-->
		<variable name="locales" type="string" value="${null}"/>
	</StoreConfiguration>


	<!---
		@keywords private

		Store information.
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/Store">
		<dependency localName="StoreShippingMode" moduleName="cmc/foundation/StoreShippingMode"/>
		<dependency localName="StoreRemoteWidgets" moduleName="cmc/foundation/StoreRemoteWidgets"/>
		<dependency localName="StoreResolveContentURL" moduleName="cmc/foundation/StoreResolveContentURL"/>
		<dependency localName="StoreCSS" moduleName="cmc/foundation/StoreCSS"/>
		<dependency localName="StoreFulfillmentCenter" moduleName="cmc/foundation/StoreFulfillmentCenter"/>
		<dependency localName="StoreFlowOptions" moduleName="cmc/foundation/StoreFlowOptions"/>
		<dependency localName="StoreSEO" moduleName="cmc/foundation/StoreSEO"/>
		<dependency localName="RemoteStoreServerConfig" moduleName="cmc/foundation/RemoteStoreServerConfig"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="StoreUtil" moduleName="cmc/foundation/StoreUtil"/>
		<dependency localName="StoreStaticContent" moduleName="cmc/foundation/StoreStaticContent"/>
		<dependency localName="StoreInventorySystem" moduleName="cmc/foundation/StoreInventorySystem"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<dependency localName="StoreDefaultCurrency" moduleName="cmc/foundation/StoreDefaultCurrency"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<dependency localName="StoreListPriceList" moduleName="cmc/foundation/StoreListPriceList"/>
		<dependency localName="IsRemoteStore" moduleName="cmc/foundation/IsRemoteStore"/>
		<dependency localName="StoreLanguage" moduleName="cmc/foundation/StoreLanguage"/>
		<dependency localName="StoreCurrency" moduleName="cmc/foundation/StoreCurrency"/>
		<dependency localName="StoreAnalytics" moduleName="cmc/foundation/StoreAnalytics"/>
		<dependency localName="CKEditorSubstitutionTags" moduleName="cmc/foundation/CKEditorSubstitutionTags"/>
		<dependency localName="StoreSterlingConfig" moduleName="cmc/foundation/StoreSterlingConfig"/>
		<dependency localName="StoreWCHConfig" moduleName="cmc/foundation/StoreWCHConfig"/>
		<dependency localName="ContextUtil" moduleName="cmc/foundation/ContextUtil"/>
		<dependency localName="StoreConfigService" moduleName="cmc/foundation/StoreConfigService"/>
		<!---
			Store ID.
		-->
		<variable name="storeId" type="string" value=""/>
		<!---
			Store name.
		-->
		<variable name="storeName" type="string" value=""/>

		<!---
			Store type
		-->
		<variable name="storeType" type="string" value=""/>

		<!---
			Assert Store ID.
		-->
		<variable name="assetStoreId" type="string" value=""/>

		<!---
			Indicates that the store configuration information has been loaded.
		-->
		<variable name="configurationLoaded" type="boolean" value="false"/>
		<!---
			The request identifier of the load configuration service.
		-->
		<variable name="configurationRequestIdentifier" type="number" value="${null}"/>
		<!---
			The locale used to load this configuration.
		-->
		<variable name="configurationLocale" type="string" value=""/>
		<!---
			The identity ID used to load this configuration.
		-->
		<variable name="configurationIdentityId" type="string" value=""/>
		<!---
			Display name.
		-->
		<variable name="displayName" type="string" value="${this.storeName}"/>
		<!---
			Default language for the store. This is an instance of cmc/foundation/StoreLanguage.
		-->
		<variable name="defaultLanguage" value="${null}"/>
		<!---
			Supported languages for the store. This is an array of cmc/foundation/StoreLanguage instances.
		-->
		<variable name="supportedLanguages" value="${[]}"/>
		<!---
			Array of cmc/foundation/StoreLanguage objects available for re-use.
		-->
		<variable name="availableLanguages" value="${[]}"/>
		<!---
			Default currency for the store. This is an instance of cmc/foundation/StoreDefaultCurrency.
		-->
		<variable name="defaultCurrency" value="${null}"/>
		<!---
			Supported currencies for the store. This is an array of cmc/foundation/StoreCurrency instances.
		-->
		<variable name="supportedCurrencies" value="${[]}"/>
		<!---
			Array of cmc/foundation/StoreCurrency objects available for re-use.
		-->
		<variable name="availableCurrencies" value="${[]}"/>
		<!---
			Static content information. This is an instance of cmc/foundation/StoreStaticContent.
		-->
		<variable name="staticContent" value="${null}"/>
		<!---
			Fulfillment center information. This is an instance of cmc/foundation/StoreFulfillmentCenter.
		-->
		<variable name="fulfillmentCenter" value="${null}"/>
		<!---
			Inventory system. This is an instance of cmc/foundation/StoreInventorySystem.
		-->
		<variable name="inventorySystem" value="${null}"/>
		<!---
			Shipping modes. This is an array of cmc/foundation/StoreShippingMode instances.
		-->
		<variable name="shippingModes" value="${[]}"/>
		<!---
			Array of cmc/foundation/StoreShippingMode objects available for re-use.
		-->
		<variable name="availableShippingModes" value="${[]}"/>
		<!---
			Analytics information. This is an instance of cmc/foundation/StoreAnalytics.
		-->
		<variable name="analytics" value="${null}"/>
		<!---
			 Remote Widgets information. This is an instance of cmc/foundation/StoreRemoteWidgets.
		-->
		<variable name="remoteWidgets" value="${null}"/>
		<!---
			 List Price List enablement information. This is an instance of cmc/foundation/StoreListPriceList.
		-->
		<variable name="listPriceList" value="${null}"/>
		<!---
			 Is Remote Store information. This is an instance of cmc/foundation/IsRemoteStore.
		-->
		<variable name="isRemoteStore" value="${null}"/>
		<!---
			 Sterling Configurator information. This is an instance of cmc/foundation/StoreSterlingConfig.
		-->
		<variable name="sterlingConfig" value="${null}"/>

		<!---
			 Watson Content Hub information. This is an instance of cmc/foundation/StoreWCHConfig.
		-->
		<variable name="wchConfig" value="${null}"/>

		<!---
			 SEO enablement information. This is an instance of cmc/foundation/StoreSEO.
		-->
		<variable name="seo" value="${null}"/>
		<!---
			 Remote Configurartion information. This is an instance of cmc/foundation/RemoteStoreServerConfig.
		-->
		<variable name="remoteStoreServerConfig" value="${null}"/>
		<!---
			 Resolve content URL information. This is an instance of cmc/foundation/StoreResolveContentURL.
		-->
		<variable name="resolveContentURL" value="${null}"/>
		<!---
			 Resolve store flow options. This is an instance of cmc/foundation/StoreFlowOptions.
		-->
		<variable name="storeFlowOptions" value="${null}"/>
		<!---
			 Resolve store css. This is an instance of cmc/foundation/StoreCSS.
		-->
		<variable name="storeCSS" value="${null}"/>
		<!---
			 The tags that the CKEditor should replace
		-->
		<variable name="CKEditorSubstitutionTags" value="${null}"/>

		<!---
			Dump the store information.
		-->
		<method name="dump">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				var msg = "storeId:" + this.storeId + " storeName:" + this.storeName;
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				msg = "\t------------------------<supportedLanguages>------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				for (var i = 0; i < this.supportedLanguages.length; i++) {
					var language = this.supportedLanguages[i];
					msg = "\tlocaleName:" + language.localeName + " language:" + language.language + " languageId:" + language.languageId + " languageDescription:" + language.languageDescription;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<supportedCurrencies>-----------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				for (var i = 0; i < this.supportedCurrencies.length; i++) {
					var currency = this.supportedCurrencies[i];
					msg = "\tcurrencyDescription:" + currency.currencyDescription + " currencyCode:" + currency.currencyCode;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<defaultCurrency>---------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.defaultCurrency != null) {
					msg = "\tcurrencyDescription:" + this.defaultCurrency.currencyDescription + " currencyCode:" + this.defaultCurrency.currencyCode;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<staticContent>-----------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.staticContent != null) {
					msg = "\turlPrefix:" + this.staticContent.urlPrefix + " directory:" + this.staticContent.directory;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<fulfillmentCenter>-------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.fulfillmentCenter != null) {
					msg = "\tfulfillmentCenterId:" + this.fulfillmentCenter.fulfillmentCenterId + " fulfillmentCenterName:" + this.fulfillmentCenter.fulfillmentCenterName;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<inventorySystem>---------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.inventorySystem != null) {
					msg = "\tinventorySystem:" + this.inventorySystem.inventorySystem;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<shippingModes>-----------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				for (var i = 0; i < this.shippingModes.length; i++) {
					var shippingMode = this.shippingModes[i];
					msg = "\tshippingModeId:" + shippingMode.shippingModeId + " code:" + shippingMode.code + " carrier:" + shippingMode.carrier;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<analytics>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.analytics != null) {
					msg = "\tprovider: " + this.analytics.provider + ", url:" + this.analytics.url + ", isEnabled: " + this.analytics.isEnabled + ", marketingCenterUrl:" + this.analytics.marketingCenterUrl + ", isMarketingCenterEnabled: " + this.analytics.isMarketingCenterEnabled;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<remoteWidgets>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.remoteWidgets != null) {
					msg = "\tisEnabled: " + this.remoteWidgets.isEnabled;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<listPriceList>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.listPriceList != null) {
					msg = "\tisEnabled: " + this.listPriceList.isEnabled;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<sterlingConfig>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.sterlingConfig != null) {
					var msg1 = "\tisEnabled: " + this.sterlingConfig.isEnabled;
					var msg2 = "\tvisualModelerServer: " + this.sterlingConfig.visualModelerServer;
					var msg3 = "\tvisualModelerId: " + this.sterlingConfig.visualModelerId;
					var msg4 = "\tconfiguratorURL: " + this.sterlingConfig.configuratorURL;
					var msg5 = "\tsterlingOrganization: " + this.sterlingConfig.sterlingOrganization;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg1);
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg2);
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg3);
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg4);
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg5);
				}
				msg = "\t------------------------<wchConfig>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.wchConfig != null) {
					var msg1 = "\WCHTenantId: " + this.wchConfig.WCHTenantId;
					var msg2 = "\WCHUserName: " + this.wchConfig.WCHUserName;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg1);
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg2);
				}

				msg = "\t------------------------<seo>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.seo != null) {
					msg = "\tisEnabled: " + this.seo.isEnabled;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<resolveContentURL>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.resolveContentURL != null) {
					msg = "\tcmsHost: " + this.resolveContentURL.cmsHost;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
					msg = "\tcmsPreviewHost: " + this.resolveContentURL.cmsPreviewHost;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
					msg = "\tcmsPath: " + this.resolveContentURL.cmsPath;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
					msg = "\tcmsPreviewPath: " + this.resolveContentURL.cmsPreviewPath;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<storeFlowOptions>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.storeFlowOptions != null) {
					msg = "\tUseCommerceComposer: " + this.storeFlowOptions.UseCommerceComposer;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				msg = "\t------------------------<storeCSS>---------------------------------";
				Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				if (this.storeCSS != null) {
					msg = "\tStoreCSSURL: " + this.storeCSS.url;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
					msg = "\tStoreCSSLocales: " + this.storeCSS.locales;
					Logger.Singleton.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "cmc/foundation/Store", "dump", msg);
				}
				Logger.Singleton.flush();
			}
			]]>
		</method>

		<!---
			Get the language information for the specified language ID.
			@param string languageId: the language ID
			@return cmc/foundation/StoreLanguage: language information
		-->
		<method args="languageId" name="getLanguageById">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/Store", "getLanguageById(languageId)", [languageId]);
			}
			var result = null;
			for (var i = 0; i < this.supportedLanguages.length; i++) {
				var language = this.supportedLanguages[i];
				if (language.languageId == languageId) {
					result = language;
					break;
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/Store", "getLanguageById(languageId)", result);
			}
			return result;
			]]>
		</method>

		<!---
			Get the language information for the specified locale.
			@param string locale: The locale value. For example, "en_US".
			@return cmc/foundation/StoreLanguage: Language information or <code>null</code> if the locale can not be found.
		-->
		<method args="locale" name="getLanguageByLocale">
			<![CDATA[
			var result = null;
			for (var i = 0; i < this.supportedLanguages.length; i++) {
				var language = this.supportedLanguages[i];
				if (language.localeName == locale) {
					result = language;
					break;
				}
			}
			return result;
			]]>
		</method>

		<!---
			Returns an array of cmc/foundation/StoreLanguage objects that match the
			specified list of language IDs.
			@param string languageIds: comma separated list of language IDs
			@return cmc/foundation/StoreLanguage: language information
		-->
		<method args="languageIds" name="getLanguagesById">
			<![CDATA[
			var languages = [];
			if (languageIds.length > 0) {
				var ids = languageIds.split(",");
				for (var i = 0; i < ids.length; i++) {
					languages.push(this.getLanguageById(ids[i]));
				}
			}
			return languages;
			]]>
		</method>

		<!---
			Get the default language information.
		-->
		<method name="getDefaultLanguage">
			<![CDATA[
			return this.defaultLanguage;
			]]>
		</method>

		<!---
			Get the non default language Ids as a list of comma separated value.
		-->
		<method name="getStoreLanguageIds">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/Store", "getStoreLanguageIds");
			}
			var result = "";
			for (var i = 0; i < this.supportedLanguages.length; i++) {
				result += this.supportedLanguages[i].languageId;
				if (i < (this.supportedLanguages.length - 1)) {
					result += ",";
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/Store", "getStoreLanguageIds", result);
			}
			return result;
			]]>
		</method>

		<!---
			Get the supported currency codes as a list of comma separated value.
		-->
		<method name="getCurrencyCodes">
			<![CDATA[
			var result = "";
			for (var i = 0; i < this.supportedCurrencies.length; i++) {
				var currency = this.supportedCurrencies[i];
				result += currency.currencyCode;
				if (i < (this.supportedCurrencies.length - 1)) {
					result += ",";
				}
			}
			return result;
			]]>
		</method>

		<!---
			@keywords private

			Initialization method for this class.
		-->
		<method name="init">
			<![CDATA[
			this.loadDel = new EventHandler.Class(this, "loadConfiguration");
			this.inherited(arguments);
			]]>
		</method>

		<!---
			@keywords private

			Destroy method for this class.
		-->
		<method name="destroy">
			<![CDATA[
			this.loadDel.disconnectAll();
			delete this.loadDel;
			this.inherited(arguments);
			]]>
		</method>
		<!---
			Trigger load of the store configuration information.
		-->
		<method args="e" name="loadConfiguration">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var localeContext = ContextUtil.Singleton.findContextValue(null, "locale");
			var identityIdContext = ContextUtil.Singleton.findContextValue(null, "identityId");
			this.loadDel.disconnectAll();
			this.loadDel.connect(localeContext, "onvalue");
			this.loadDel.connect(identityIdContext, "onvalue");
			if (identityIdContext.value != null && identityIdContext.value != "") {
				if (this.configurationLocale != localeContext.value || this.configurationIdentityId != identityIdContext.value) {
					this.configurationLocale = localeContext.value;
					this.configurationIdentityId = identityIdContext.value;
					StoreConfigService.Singleton.doRequest(this, {
						storeId: this.storeId
					});
					this.configurationRequestIdentifier = StoreConfigService.Singleton.requestIdentifier;
				}
			}
			else {
				this.configurationLoaded = false;
			}
			]]>
		</method>

		<!---
			Reset the configuration before parsing in the new configuration.
		-->
		<method name="resetConfiguration">
			<![CDATA[
			this.defaultLanguage = null;
			while (this.supportedLanguages.length > 0) {
				this.availableLanguages.push(this.supportedLanguages.shift());
			}
			while (this.supportedCurrencies.length > 0) {
				this.availableCurrencies.push(this.supportedCurrencies.shift());
			}
			while (this.shippingModes.length > 0) {
				this.availableShippingModes.push(this.shippingModes.shift());
			}
			]]>
		</method>

		<!---
			Set the configuration loaded flag.
			@param boolean newValue: the new value
		-->
		<method args="newValue" name="setConfigurationLoaded">
			<![CDATA[
			this.configurationLoaded = newValue;
			if (!newValue) {
				this.configurationLocale = "";
				this.configurationIdentityId = "";
			}
			EventUtil.trigger(this, "onconfigurationLoaded", this);
			]]>
		</method>

		<!---
			Parse the specified data element and add the attributes to this store object.
		-->
		<method args="dataElement" name="parseStore">
			<![CDATA[
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var e = dataElement.childNodes[i];
				if (e.nodeName == "object") {
					var storeConfigObject = null;
					var objectType = e.getAttribute("objectType");
					if (objectType == "StoreLanguage") {
						storeConfigObject = StoreUtil.Singleton.getStoreConfiguration(this.availableLanguages, "languageId", StoreUtil.Singleton.parseStoreConfigurationKey(e, "languageId"));
						if (!storeConfigObject) {
							storeConfigObject = new StoreLanguage.Class(this);
						}
						if (this.defaultLanguage == null) {
							this.defaultLanguage = storeConfigObject;
						}
						storeConfigObject.setVariable("isDefault", this.defaultLanguage == storeConfigObject);
						this.supportedLanguages.push(storeConfigObject);
					}
					else if (objectType == "StoreCurrency") {
						storeConfigObject = StoreUtil.Singleton.getStoreConfiguration(this.availableCurrencies, "currencyCode", StoreUtil.Singleton.parseStoreConfigurationKey(e, "currencyCode"));
						if (!storeConfigObject) {
							storeConfigObject = new StoreCurrency.Class(this);
						}
						this.supportedCurrencies.push(storeConfigObject);
					}
					else if (objectType == "StoreDefaultCurrency") {
						storeConfigObject = this.defaultCurrency;
						if (!storeConfigObject) {
							storeConfigObject = new StoreDefaultCurrency.Class(this);
							this.defaultCurrency = storeConfigObject;
						}
					}
					else if (objectType == "StoreStaticContent") {
						storeConfigObject = this.staticContent;
						if (!storeConfigObject) {
							storeConfigObject = new StoreStaticContent.Class(this);
							this.staticContent = storeConfigObject;
						}
					}
					else if (objectType == "StoreFulfillmentCenter") {
						storeConfigObject = this.fulfillmentCenter;
						if (!storeConfigObject) {
							storeConfigObject = new StoreFulfillmentCenter.Class(this);
							this.fulfillmentCenter = storeConfigObject;
						}
					}
					else if (objectType == "StoreInventorySystem") {
						storeConfigObject = this.inventorySystem;
						if (!storeConfigObject) {
							storeConfigObject = new StoreInventorySystem.Class(this);
							this.inventorySystem = storeConfigObject;
						}
					}
					else if (objectType == "StoreShippingMode") {
						storeConfigObject = StoreUtil.Singleton.getStoreConfiguration(this.availableShippingModes, "shippingModeId", StoreUtil.Singleton.parseStoreConfigurationKey(e, "shippingModeId"));
						if (!storeConfigObject) {
							storeConfigObject = new StoreShippingMode.Class(this);
						}
						this.shippingModes.push(storeConfigObject);
					}
					else if (objectType == "StoreAnalytics") {
						storeConfigObject = this.analytics;
						if (!storeConfigObject) {
							storeConfigObject = new StoreAnalytics.Class(this);
							this.analytics = storeConfigObject;
						}
					}
					else if (objectType == "StoreRemoteWidgets") {
						storeConfigObject = this.remoteWidgets;
						if (!storeConfigObject) {
							storeConfigObject = new StoreRemoteWidgets.Class(this);
							this.remoteWidgets = storeConfigObject;
						}
					}
					else if (objectType == "StoreListPriceList") {
						storeConfigObject = this.listPriceList;
						if (!storeConfigObject) {
							storeConfigObject = new StoreListPriceList.Class(this);
							this.listPriceList = storeConfigObject;
						}
					}
					else if (objectType == "IsRemoteStore") {
						storeConfigObject = this.isRemoteStore;
						if (!storeConfigObject) {
							storeConfigObject = new IsRemoteStore.Class(this);
							this.isRemoteStore = storeConfigObject;
						}
					}
					else if (objectType == "StoreSterlingConfig") {
						storeConfigObject = this.sterlingConfig;
						if (!storeConfigObject) {
							storeConfigObject = new StoreSterlingConfig.Class(this);
							this.sterlingConfig = storeConfigObject;
						}
					}
					else if (objectType == "StoreWCHConfig") {
						storeConfigObject = this.wchConfig;
						if (!storeConfigObject) {
							storeConfigObject = new StoreWCHConfig.Class(this);
							this.wchConfig = storeConfigObject;
						}
					}
					else if (objectType == "StoreSEO") {
						storeConfigObject = this.seo;
						if (!storeConfigObject) {
							storeConfigObject = new StoreSEO.Class(this);
							this.seo = storeConfigObject;
						}
					}
					else if (objectType == "RemoteStoreServer") {
						storeConfigObject = this.remoteStoreServerConfig;
						if (!storeConfigObject) {
							storeConfigObject = new RemoteStoreServerConfig.Class(this);
							this.remoteStoreServerConfig = storeConfigObject;
						}
					}
					else if (objectType == "StoreResolveContentURL") {
						storeConfigObject = this.resolveContentURL;
						if (!storeConfigObject) {
							storeConfigObject = new StoreResolveContentURL.Class(this);
							this.resolveContentURL = storeConfigObject;
						}
					}
					else if (objectType == "StoreFlowOptions") {
						storeConfigObject = this.storeFlowOptions;
						if (!storeConfigObject) {
							storeConfigObject = new StoreFlowOptions.Class(this);
							this.storeFlowOptions = storeConfigObject;
						}
					}
					else if (objectType == "StoreCSS") {
						storeConfigObject = this.storeCSS;
						if (!storeConfigObject) {
							storeConfigObject = new StoreCSS.Class(this);
							this.storeCSS = storeConfigObject;
						}
					}
					else if (objectType == "CKEditorSubstitutionTags") {
						storeConfigObject = this.CKEditorSubstitutionTags;
						if (!storeConfigObject) {
							storeConfigObject = new CKEditorSubstitutionTags.Class(this);
							this.CKEditorSubstitutionTags = storeConfigObject;
						}
					}
					if (storeConfigObject) {
						storeConfigObject.parseDataElement(e);
					}
				}
				else {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						this.setVariable(e.nodeName, textNode.nodeValue);
					}
				}
			}
			]]>
		</method>
	<method args="configurationLoaded" name="set_configurationLoaded">
			<![CDATA[
			this.setConfigurationLoaded(configurationLoaded);
			]]>
		</method></Node>

	<!--- Get StoreConfig service. -->
	<Service definitionName="cmc/foundation/StoreConfigService" retryOnError="true" sendWorkspaceContext="false" singletonDefinition="true" url="/cmc/GetStoreConfiguration">
		<method args="requestParent, dataElement, reqIdentifier" name="parseObject">
			<![CDATA[
			if (reqIdentifier == requestParent.configurationRequestIdentifier) {
				requestParent.resetConfiguration();
				requestParent.parseStore(dataElement);
				requestParent.setVariable("configurationLoaded", true);
			}
			]]>
		</method>
	</Service>

	<!---
		@keywords private

		Object store information.
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/ObjectStore">
		<dependency localName="StringUtil" moduleName="cmc/foundation/StringUtil"/>
		<dependency localName="ModelUtil" moduleName="cmc/foundation/ModelUtil"/>
		<dependency localName="StoreUtil" moduleName="cmc/foundation/StoreUtil"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<!---
			Store ID.
		-->
		<variable name="storeId" type="string" value=""/>
		<!---
			@keywords private
			Usage is a string identifier that is unique to the tool.

			The "usage" attribute is used to filter the stores available to the current user for the
			business object editor.
		-->
		<variable name="usage" type="string" value=""/>
		<!---
			Indicates that the access right information of the store has been checked.
		-->
		<variable name="accessRightChecked" type="boolean" value="false"/>
		<!---
			Indicate that user has access rights to the store.
		-->
		<variable name="hasAccessRight" type="boolean" value="false"/>

		<!---
			@keywords private
			@param Object args An object whose properties will be copied to this model object.
		-->
		<method args="args" name="initializeObjectStore">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "initializeObjectStore");
			}
			for (var key in args) {
				this[key] = args[key];
			}
			this.checkAccessRight();
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "initializeObjectStore");
			}
			]]>
		</method>

		<!---
			This method checks if the user has access right to the store.
		-->
		<method name="checkAccessRight">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "checkAccessRight", [this.usage, this.storeId]);
			}
			if (StringUtil.Singleton.isInteger(this.storeId)) {
				var caller = this;
				require(["cmc/foundation/GetObjectStoreByIdService"], function(GetObjectStoreByIdService) {
					GetObjectStoreByIdService.Singleton.doRequest(caller, {
						usage: caller.usage,
						storeId: caller.storeId
					});
				});
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "checkAccessRight");
			}
			]]>
		</method>

		<!---
			This method gets the information for the store.
		-->
		<method name="getStoreInfo">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "getStoreInfo", [this.storeId]);
			}
			if (StoreUtil.Singleton.storeMap[this.storeId] == null && StringUtil.Singleton.isInteger(this.storeId)) {
				var caller = this;
				require(["cmc/foundation/GetStoreByIdService"], function(GetStoreByIdService) {
					GetStoreByIdService.Singleton.doRequest(caller, {
						usage: "",
						storeId: caller.storeId
					});
				});
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "getStoreInfo");
			}
			]]>
		</method>

		<!---
			Parse the specified data element to get the information needecd for the object store.
		-->
		<method args="dataElement" name="parseObjectStores">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "parseObjectStores(dataElement)", [this.storeId]);
			}
			var store = null;
			if (dataElement.childNodes.length > 0) {
				store = StoreUtil.Singleton.parseStore(dataElement.firstChild);
			}
			if (!this.accessRightChecked) {
				if (store == null) {
					this.setVariable("hasAccessRight", false);
				}
				else {
					this.setVariable("hasAccessRight", true);
				}
				this.setVariable("accessRightChecked", true);
			}
			this.getStoreInfo();
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "parseObjectStores(dataElement)", [this.accessRightChecked, this.hasAccessRight]);
			}
			]]>
		</method>

		<!---
			Parse the specified data element and return a cmc/foundation/Store instance.
		-->
		<method args="dataElement" name="parseStores">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "parseStores(dataElement)", [this.storeId]);
			}
			var store = null;
			if (dataElement.childNodes.length > 0) {
				store = StoreUtil.Singleton.parseStore(dataElement.firstChild);
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.util", "cmc/foundation/ObjectStore", "parseStores(dataElement)", [store]);
			}
			]]>
		</method>

		<!---
			Release this object store instance and make it available for re-use.
		-->
		<method name="release">
			<![CDATA[
			this.storeId = "";
			this.usage = "";
			this.accessRightChecked = false;
			this.hasAccessRight = false;
			ModelUtil.Singleton.releaseObjectStore(this);
			]]>
		</method>
	</Node>

	<!--- Get object store by store ID service. -->
	<Service definitionName="cmc/foundation/GetObjectStoreByIdService" retryOnError="true" sendWorkspaceContext="false" singletonDefinition="true" url="/cmc/GetStoreById">
		<!---
			Parse the store objects.
		-->
		<method args="requestParent, dataElement, hasMoreRecordsFlag, reqIdentifier, startIndex" name="parseObjects">
			<![CDATA[
			requestParent.parseObjectStores(dataElement);
			]]>
		</method>
	</Service>

	<!--- Get store by store ID service. -->
	<Service definitionName="cmc/foundation/GetStoreByIdService" retryOnError="true" sendWorkspaceContext="false" singletonDefinition="true" url="/cmc/GetStoreById">
		<!---
			Parse the store objects.
		-->
		<method args="requestParent, dataElement, hasMoreRecordsFlag, reqIdentifier, startIndex" name="parseObjects">
			<![CDATA[
			requestParent.parseStores(dataElement);
			]]>
		</method>
	</Service>

	<!---
		@keywords private

		Store utility methods.
	-->
	<Node definitionName="cmc/foundation/StoreUtil" singletonDefinition="true">
		<dependency localName="Store" moduleName="cmc/foundation/Store"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<!---
			Map of all of store objects that have been loaded.
		-->
		<variable name="storeMap" value="${{}}"/>
		<!---
			Event that notifies listeners that a new store has been loaded.
		-->

		<!---
			Parse the specified data element and return a new instance of cmc/foundation/Store.
		-->
		<method args="dataElement" name="parseStore">
			<![CDATA[
			var store = null;
			var storeId = null;
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				var e = dataElement.childNodes[i];
				if (e.nodeName == "storeId") {
					var textNode = e.firstChild;
					if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4)) {
						storeId = textNode.nodeValue;
						break;
					}
				}
			}
			if (storeId != null) {
				store = this.getStore(storeId);
				store.parseStore(dataElement);
				EventUtil.trigger(this, "storeLoaded", store);
			}
			return store;
			]]>
		</method>

		<!---
			Get the cmc/foundation/Store instance with the specified ID. If the store does not exist
			it will be created.
		-->
		<method args="storeId" name="getStore">
			<![CDATA[
			var store = this.storeMap[storeId];
			if (store == null) {
				store = new Store.Class(this, {
					storeId: storeId
				});
				this.storeMap[storeId] = store;
			}
			return store;
			]]>
		</method>

		<!---
			Parse the specified data element and return an array of cmc/foundation/Store instances.
		-->
		<method args="dataElement" name="parseStores">
			<![CDATA[
			var stores = [];
			for (var i = 0; i < dataElement.childNodes.length; i++) {
				stores.push(this.parseStore(dataElement.childNodes[i]));
			}
			return stores;
			]]>
		</method>
		<!---
			@keywords private
		-->
		<method args="e, key" name="parseStoreConfigurationKey">
			<![CDATA[
			var nodes = e.childNodes;
			for (var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				var textNode = node.firstChild;
				if (textNode != null && (textNode.nodeType == 3 || textNode.nodeType == 4) && node.nodeName == key) {
					return textNode.nodeValue;
				}
			}
			return null;
			]]>
		</method>
		<!---
			@keywords private
		-->
		<method args="array, keyName, keyValue" name="getStoreConfiguration">
			<![CDATA[
			var result = null;
			for (var i = 0; i < array.length; i++) {
				if (keyValue == array[i][keyName]) {
					result = array[i];
					array.splice(i, 1);
					break;
				}
			}
			return result;
			]]>
		</method>
	</Node>
</Definitions>