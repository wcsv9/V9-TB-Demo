<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords private
		
		This is a base class for displaying a floating tooltip. Tooltip can be used in any view simply by writing the 
		{@link cmc/foundation/Tooltip} tag within the view. Following is an example for creating a simple tooltip for a button:
		
		@START_CODE
			<button resource="newIcon">
            	<Tooltip text="Create new" extendedText="Create a new marketing activity for the current campaign." />
        	</button>
		@END_CODE

		In the above example, {@link cmc/foundation/Tooltip#text} is the short tooltip text. You can have a long description of the 
		object in the tooltip which can be specified in {@link cmc/foundation/Tooltip#extendedText}. You can also put a link to the 
		Information	Center in the tooltip.
		
		The display of extended tooltip can be controlled in User Preference. The look and feel of the tooltip is defined 
		in a single instance of {@link cmc/foundation/BorderedView}. cmc/foundation/ToolTipView is reused to display
		the tooltip for all objects in the Management Center. 
	-->
	<Node classDefinition="true" definitionName="cmc/foundation/Tooltip" initstage="late">
		<dependency localName="ViewUtil" moduleName="cmc/foundation/ViewUtil"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<!--- 
			The short tooltip text. If it is set to null or an empty string then the tooltip will not be displayed. 
		-->
		<variable name="text" type="string" value=""/>
		<!--- 
			(Optional) The extended text that appears as the tooltip. Extended tooltip is displayed only if "Enable detailed tooltips"
			preference is selected in User Preference.
		-->
		<variable name="extendedText" type="string" value=""/>
		<!--- 
			(Optional) The text in the link that appears in the tooltip when "Enable detailed tooltips" preference is selected in 
			User Preference. If it is set to null or an empty string then the default value which is "More details..." will be displayed.
		-->
		<variable name="linkText" type="string" value=""/>
		<!--- 
			(Optional) The relative URL of the link which refers to the Information Center page that describes the object in greater 
			detail. If it is set to null or an empty string then the link will not be displayed.
		-->
		<variable name="linkURL" type="string" value=""/>
		<!---
			@keywords private 
			(Optional) Image url for the tooltip.If it is set to null or an empty string then the image tooltip will not be displayed.
		-->
		<variable name="imageURL" type="string" value=""/>
	
		<!---
			@keywords private 
			Flag that indicates whether the object that has the tooltip is currently visible.
		-->
		<variable name="parentVisible" type="boolean" value="false"/>
		<!--- 
			Flag which controls the enablement of the tooltip.  
		-->
		<variable name="enabled" type="boolean" value="true"/>

		<!--- 
			@keywords private
			Initialization method for this class.	
		-->
		<handler name="oninit">
			<![CDATA[
			this.setVisibilityDel = new EventHandler.Class(this, "setVisibility");
			ViewUtil.Singleton.registerVisibilityDelegate(this, this.setVisibilityDel);
			this.setVisibility();
			var caller = this;
			require(["cmc/foundation/TooltipView"], function(TooltipView) {
				TooltipView.Singleton.registerTooltipSource(caller);
			});
			]]>
		</handler>

		<!--- 
			@keywords private
			Destroy method for this class.	
		-->
		<method name="destroy">
			<![CDATA[
			var caller = this;
			require(["cmc/foundation/TooltipView"], function(TooltipView) {
				TooltipView.Singleton.unregisterTooltipSource(caller);
			});
			if (this.setVisibilityDel) {
				this.setVisibilityDel.disconnectAll();
				delete this.setVisibilityDel;
			}
			this.inherited(arguments);
			]]>
		</method>		
		
		<!--- 
			@keywords private
			Determines the visibility of the object that needs the tooltip.
		-->
		<method args="e" name="setVisibility">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.parentVisible = ViewUtil.Singleton.getInvisibleAncestor(this) == null;
			]]>
		</method>
	</Node>
</Definitions>