<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<!---
		<p>Properties view snippet for common selections of date and day ranges. This view provides a drop-down selection
		to choose between:
			<ol>
				<li>At any time</li>
				<li>Within a number of days</li>
				<li>Prior to a number of days</li>
				<li>Before a specific date</li>
				<li>After a specific date</li>
				<li>Within a date range</li>
				<li>On a specific date</li>
			</ol>
		Based on the selection, the appropriate inputs for the number of days and date ranges will appear.
		</p>
		
		<p>The following property names are managed by this view:
			<ul>
				<li>daysOperator</li>
				<li>days</li>
				<li>beforeAfterOnDate</li>
				<li>beforeDate</li>
				<li>date1</li>
				<li>date2</li>
			</ul>
		</p>
	-->
	<PropertyGroup classDefinition="true" collapsable="false" definitionName="cmc/marketing/BaseDateProperties">
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<!---
			This attribute provides the help text for this properties view component. The helpText will be used for creating tooltips.
			The default value of this attribute is the empty string.
		-->
		<variable name="helpText" type="string" value=""/>
		
		<MultiValueSelector helpText="${this.classroot.helpText}" name="date" promptText="${marketingResources.Singleton.timeFrame.string}">
			<MultiValueSelection displayName="${marketingResources.Singleton.anyTime.string}" name="anyTime">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.beforeDate.string}" name="beforeDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[<]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.afterDate.string}" name="afterDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[>]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.onDate.string}" name="onDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[=]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.withinDates.string}" name="withinDates">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[>=]]></beforeAfterOnDate>
					<beforeDate><![CDATA[<=]]></beforeDate>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.withinDays.string}" name="withinDays">
				<Xml name="values">
					<daysOperator><![CDATA[<=]]></daysOperator>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.priorDays.string}" name="priorDays">
				<Xml name="values">
					<daysOperator><![CDATA[>]]></daysOperator>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
		</MultiValueSelector>

		<PropertyGroup collapsable="false" name="daysGroup">
			<EnablementOrCondition conditionId="condDays">
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;=" propertyName="daysOperator"/>
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;" propertyName="daysOperator"/>
			</EnablementOrCondition>
			<PropertyStepper minimumValue="1" promptText="${marketingResources.Singleton.days.string}" propertyName="days"/>
		</PropertyGroup>

		<PropertyGroup collapsable="false" name="dateGroup">
			<EnablementOrCondition conditionId="condDate">
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;" propertyName="beforeAfterOnDate"/>
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;" propertyName="beforeAfterOnDate"/>
			</EnablementOrCondition>
			<PropertyDateTimePicker promptText="${marketingResources.Singleton.date.string}" propertyName="date1"/>
		</PropertyGroup>

		<PropertyGroup collapsable="false" name="datesGroup">
			<EnablementAndCondition conditionId="condDates">
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;=" propertyName="beforeAfterOnDate"/>
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;=" propertyName="beforeDate"/>
			</EnablementAndCondition>
			<PropertyDateTimePicker promptText="${marketingResources.Singleton.date1.string}" propertyName="date1"/>
			<PropertyDateTimePicker endOfDay="true" promptText="${marketingResources.Singleton.date2.string}" propertyName="date2"/>
		</PropertyGroup>
		
		<PropertyGroup collapsable="false" name="onDateGroup">
			<EnablementCondition conditionId="condEqual" enablementValue="=" propertyName="beforeAfterOnDate"/>
			<PropertyDatePicker promptText="${marketingResources.Singleton.date.string}" propertyName="date1"/>
		</PropertyGroup>
	</PropertyGroup>

	<!---
		<p>Properties view snippet for common selections of date and day ranges for use with flow elements that are triggers.
		This view provides a drop-down selection to choose between:
			<ol>
				<li>At any time</li>
				<li>Within a number of days</li>
				<li>Before a specific date</li>
				<li>After a specific date</li>
				<li>Within a date range</li>
				<li>On a specific date</li>
			</ol>
		Based on the selection, the appropriate inputs for the number of days and date ranges will appear.
		</p>
		
		<p>The following property names are managed by this view:
			<ul>
				<li>daysOperator</li>
				<li>days</li>
				<li>beforeAfterOnDate</li>
				<li>beforeDate</li>
				<li>date1</li>
				<li>date2</li>
			</ul>
		</p>
	-->
	<PropertyGroup classDefinition="true" collapsable="false" definitionName="cmc/marketing/BaseTriggerDateProperties">
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<!---
			This attribute provides the help text for this properties view component. The helpText will be used for creating tooltips.
			The default value of this attribute is the empty string.
		-->
		<variable name="helpText" type="string" value=""/>
		
		<MultiValueSelector helpText="${this.classroot.helpText}" name="date" promptText="${marketingResources.Singleton.timeFrame.string}">
			<MultiValueSelection displayName="${marketingResources.Singleton.anyTime.string}" name="anyTime">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.beforeDate.string}" name="beforeDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[<]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.afterDate.string}" name="afterDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[>]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.onDate.string}" name="onDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[=]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.withinDates.string}" name="withinDates">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[>=]]></beforeAfterOnDate>
					<beforeDate><![CDATA[<=]]></beforeDate>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.withinDays.string}" name="withinDays">
				<Xml name="values">
					<daysOperator><![CDATA[<=]]></daysOperator>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
		</MultiValueSelector>

		<PropertyGroup collapsable="false" name="daysGroup">
			<EnablementOrCondition conditionId="condDays">
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;=" propertyName="daysOperator"/>
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;" propertyName="daysOperator"/>
			</EnablementOrCondition>
			<PropertyStepper minimumValue="1" promptText="${marketingResources.Singleton.days.string}" propertyName="days"/>
		</PropertyGroup>

		<PropertyGroup collapsable="false" name="dateGroup">
			<EnablementOrCondition conditionId="condDate">
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;" propertyName="beforeAfterOnDate"/>
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;" propertyName="beforeAfterOnDate"/>
			</EnablementOrCondition>
			<PropertyDateTimePicker promptText="${marketingResources.Singleton.date.string}" propertyName="date1"/>
		</PropertyGroup>

		<PropertyGroup collapsable="false" name="datesGroup">
			<EnablementAndCondition conditionId="condDates">
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;=" propertyName="beforeAfterOnDate"/>
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;=" propertyName="beforeDate"/>
			</EnablementAndCondition>
			<PropertyDateTimePicker promptText="${marketingResources.Singleton.date1.string}" propertyName="date1"/>
			<PropertyDateTimePicker endOfDay="true" promptText="${marketingResources.Singleton.date2.string}" propertyName="date2"/>
		</PropertyGroup>
		
		<PropertyGroup collapsable="false" name="onDateGroup">
			<EnablementCondition conditionId="condEqual" enablementValue="=" propertyName="beforeAfterOnDate"/>
			<PropertyDatePicker promptText="${marketingResources.Singleton.date.string}" propertyName="date1"/>
		</PropertyGroup>
	</PropertyGroup>

	<!---
		<p>Properties view snippet for common selections of date and day ranges. This view provides a drop-down selection
		to choose between:
			<ol>
				<li>At any time</li>
				<li>Number of previous orders</li>
				<li>Within a number of days</li>
				<li>Prior to a number of days</li>
				<li>Before a specific date</li>
				<li>After a specific date</li>
				<li>Within a date range</li>
				<li>On a specific date</li>
			</ol>
		Based on the selection, the appropriate inputs for the number of days and date ranges will appear.
		</p>
		
		<p>The following property names are managed by this view:
			<ul>
				<li>daysOperator</li>
				<li>days</li>
				<li>beforeAfterOnDate</li>
				<li>beforeDate</li>
				<li>date1</li>
				<li>date2</li>
			</ul>
		</p>
	-->
	<PropertyGroup classDefinition="true" collapsable="false" definitionName="cmc/marketing/PurchaseHistoryBaseDateProperties">
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<!---
			This attribute provides the help text for this properties view component. The helpText will be used for creating tooltips.
			The default value of this attribute is the empty string.
		-->
		<variable name="helpText" type="string" value=""/>
		
		<MultiValueSelector helpText="${this.classroot.helpText}" name="date" promptText="${marketingResources.Singleton.timeFrame.string}">
			<MultiValueSelection displayName="${marketingResources.Singleton.anyTime.string}" name="anyTime">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.previousOrders.string}" name="previousOrders">
				<Xml name="values">
					<daysOperator>previousOrders</daysOperator>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>			
			<MultiValueSelection displayName="${marketingResources.Singleton.beforeDate.string}" name="beforeDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[<]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.afterDate.string}" name="afterDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[>]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.onDate.string}" name="onDate">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[=]]></beforeAfterOnDate>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.withinDates.string}" name="withinDates">
				<Xml name="values">
					<daysOperator/>
					<days/>
					<beforeAfterOnDate><![CDATA[>=]]></beforeAfterOnDate>
					<beforeDate><![CDATA[<=]]></beforeDate>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.withinDays.string}" name="withinDays">
				<Xml name="values">
					<daysOperator><![CDATA[<=]]></daysOperator>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
			<MultiValueSelection displayName="${marketingResources.Singleton.priorDays.string}" name="priorDays">
				<Xml name="values">
					<daysOperator><![CDATA[>]]></daysOperator>
					<beforeAfterOnDate/>
					<date1/>
					<beforeDate/>
					<date2/>
				</Xml>
			</MultiValueSelection>
		</MultiValueSelector>

		<PropertyGroup collapsable="false" name="previousOrdersGroup">
			<EnablementCondition conditionId="condPreviousOrders" enablementValue="previousOrders" propertyName="daysOperator"/>
			<PropertyStepper minimumValue="1" promptText="${marketingResources.Singleton.numberOfOrders.string}" propertyName="days"/>
		</PropertyGroup>
		
		<PropertyGroup collapsable="false" name="daysGroup">
			<EnablementOrCondition conditionId="condDays">
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;=" propertyName="daysOperator"/>
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;" propertyName="daysOperator"/>
			</EnablementOrCondition>
			<PropertyStepper minimumValue="1" promptText="${marketingResources.Singleton.days.string}" propertyName="days"/>
		</PropertyGroup>

		<PropertyGroup collapsable="false" name="dateGroup">
			<EnablementOrCondition conditionId="condDate">
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;" propertyName="beforeAfterOnDate"/>
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;" propertyName="beforeAfterOnDate"/>
			</EnablementOrCondition>
			<PropertyDateTimePicker promptText="${marketingResources.Singleton.date.string}" propertyName="date1"/>
		</PropertyGroup>

		<PropertyGroup collapsable="false" name="datesGroup">
			<EnablementAndCondition conditionId="condDates">
				<EnablementCondition conditionId="condGreaterThan" enablementValue="&gt;=" propertyName="beforeAfterOnDate"/>
				<EnablementCondition conditionId="condLessThan" enablementValue="&lt;=" propertyName="beforeDate"/>
			</EnablementAndCondition>
			<PropertyDateTimePicker promptText="${marketingResources.Singleton.date1.string}" propertyName="date1"/>
			<PropertyDateTimePicker endOfDay="true" promptText="${marketingResources.Singleton.date2.string}" propertyName="date2"/>
		</PropertyGroup>
		
		<PropertyGroup collapsable="false" name="onDateGroup">
			<EnablementCondition conditionId="condEqual" enablementValue="=" propertyName="beforeAfterOnDate"/>
			<PropertyDatePicker promptText="${marketingResources.Singleton.date.string}" propertyName="date1"/>
		</PropertyGroup>
	</PropertyGroup>
	
</Definitions>