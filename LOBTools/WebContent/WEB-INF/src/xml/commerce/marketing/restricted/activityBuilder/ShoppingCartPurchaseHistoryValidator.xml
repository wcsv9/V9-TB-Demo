<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		<p>Validator for {@link cmc/marketing/ShoppingCartElementObject Shopping Cart} and
		{@link cmc/marketing/PurchaseHistoryElementObject Purchase History} targets. If the Totals option is selected,
		this validator ensures that at least one condition (number of items, value of items, and schedule) is specified.
		If the Catalog Entries or Categories options are selected, this validator checks if a catalog entry or
		category is provided, respectively.
		</p>
		
		<p>This validator reads from the following properties:
			<ul>
				<li>daysOperator</li>
				<li>days</li>
				<li>beforeAfterOnDate</li>
				<li>beforeDate</li>
				<li>date1</li>
				<li>date2</li>
				<li>amountOperator1</li>
				<li>amountOperator2</li>
				<li>amountValue1</li>
				<li>amountValue2</li>
				<li>quantityOperator1</li>
				<li>quantityOperator2</li>
				<li>quantityValue1</li>
				<li>quantityValue2</li>
			</ul>
		</p>
		
		<p>There should only be one instance of this class defined for each {@link cmc/marketing/FlowElementObjectDefinition}.</p>
	-->
	<Validator classDefinition="true" definitionName="cmc/marketing/ShoppingCartPurchaseHistoryValidator">
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<!--- Warning message to show when totals element is selected and is missing a condition -->
		<variable name="totalsMissingConditionErrorMessage" type="string" value="${marketingResources.Singleton.shopCartTotalOneConditionRequired.string}"/>
		<!--- Warning message to show when catalog entry element is selected and no catalog entries are selected -->
		<variable name="totalsMissingCatalogEntriesErrorMessage" type="string" value="${marketingResources.Singleton.noProductsSelected.string}"/>
		<!--- Warning message to show when category element is selected and no categories are selected -->
		<variable name="totalsMissingCategoriesErrorMessage" type="string" value="${marketingResources.Singleton.noCategoriesSelected.string}"/>
		<!--- The object path for catalog entry objects -->
		<variable name="catalogEntryObjectPath" type="string" value="ChildCatentry"/>
		<!--- The object path for category objects -->
		<variable name="categoryEntryObjectPath" type="string" value="ChildCatalogGroup"/>

		<!--- @keywords private -->		
		<method args="o, property" name="validate">
			<![CDATA[
			if (typeof(property) == "undefined") property = null;
			if (!o) {
				return;
			}
			var elementTemplate = o.getProperty("elemTemplateName");
			var daysOperator = o.getProperty("daysOperator");
			var days = o.getProperty("days");
			var beforeAfterOnDate = o.getProperty("beforeAfterOnDate");
			var beforeDate = o.getProperty("beforeDate");
			var date1 = o.getProperty("date1");
			var date2 = o.getProperty("date2");
			var amountOperator1 = o.getProperty("amountOperator1");
			var amountOperator2 = o.getProperty("amountOperator2");
			var amountValue1 = o.getProperty("amountValue1");
			var amountValue2 = o.getProperty("amountValue2");
			var quantityOperator1 = o.getProperty("quantityOperator1");
			var quantityOperator2 = o.getProperty("quantityOperator2");
			var quantityValue1 = o.getProperty("quantityValue1");
			var quantityValue2 = o.getProperty("quantityValue2");
			o.clearValidationError(this);
			if ((elementTemplate.value == "shoppingCartTotals") || (elementTemplate.value == "purchaseHistoryTotals")) {
				if ((daysOperator.value == "") && (days.value == "") && (beforeAfterOnDate.value == "") && (beforeDate.value == "") && (date1.value == "") && (date2.value == "") && (amountOperator1.value == "") && (amountOperator2.value == "") && (amountValue1.value == "") && (amountValue2.value == "") && (quantityOperator1.value == "") && (quantityOperator2.value == "") && (quantityValue1.value == "") && (quantityValue2.value == "")) {
					o.addValidationError(this, this.totalsMissingConditionErrorMessage);
				}
			}
			else if ((elementTemplate.value == "shoppingCartProductContents") || (elementTemplate.value == "purchaseHistoryProductContents")) {
				var childObjects = o.getObjects(this.catalogEntryObjectPath);
				if (childObjects.length <= 0) {
					o.addValidationError(this, this.totalsMissingCatalogEntriesErrorMessage);
				}
				childObjects = o.getObjects(this.categoryEntryObjectPath);
				for (var i = childObjects.length - 1; i >= 0; i--) {
					childObjects[i].deleteObject();
				}
			}
			else if ((elementTemplate.value == "shoppingCartCategoryContents") || (elementTemplate.value == "purchaseHistoryCategoryContents")) {
				var childObjects = o.getObjects(this.categoryEntryObjectPath);
				if (childObjects.length <= 0) {
					o.addValidationError(this, this.totalsMissingCategoriesErrorMessage);
				}
				childObjects = o.getObjects(this.catalogEntryObjectPath);
				for (var i = childObjects.length - 1; i >= 0; i--) {
					childObjects[i].deleteObject();
				}
			}
			]]>
		</method>
	</Validator>
</Definitions>