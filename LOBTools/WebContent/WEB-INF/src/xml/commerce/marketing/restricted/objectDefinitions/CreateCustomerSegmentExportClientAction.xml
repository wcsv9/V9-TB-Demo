<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!-- Custom client action to create a customer segment export for a particular customer segment -->
	<ClientAction allowMultipleSelection="false" classDefinition="true" definitionName="cmc/marketing/CreateCustomerSegmentExportClientAction">
		<dependency localName="ContextUtil" moduleName="cmc/foundation/ContextUtil"/>
		
		<!---
			Create the CustomerSegmentExport client objects using the select customer segment details
			
			@param cmc/foundation/ModelObject[] objects The array of selected model objects.
		-->		
		<method args="objects" name="performAction">
			<![CDATA[
			if (objects) {
				var targetObjDef = objects[0].model.getObjectDefinition(null, "CustomerSegmentExport");
				var newObject = objects[0].model.createNewObject(targetObjDef, null);
				var uniqueId = objects[0].getPropertyValue("uniqueId");
				newObject.setPropertyValue("uniqueId", null, uniqueId);
				var customerSegmentName = objects[0].getPropertyValue("name");
				newObject.setPropertyValue("customerSegmentExportName", null, customerSegmentName);
				newObject.setPropertyValue("customerSegmentName", null, customerSegmentName);
				newObject.model.oEditor.selectOpenObject(newObject);
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Returns true if the context is not read only.
			
			@param cmc/foundation/ModelObject o: the object on which you want to perform this client action
			@return boolean: true if the client action is enabled
		-->
		<method args="o" name="isEnabled">
			<![CDATA[
			var enabled = this.inherited(arguments);
			if (enabled && o.model.oEditor.respectWorkspaceContext) {
				var readOnlyModeContextValue = ContextUtil.Singleton.findContextValue(null, "readOnlyMode");
				enabled = (readOnlyModeContextValue.value != "true");
			}
			if (enabled && o.isContextReadOnly()) {
				enabled = false;
			}
			return enabled;
			]]>
		</method>
	</ClientAction>
</Definitions>