<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		This summary view provides brief information about the {@link cmc/marketing/CurrentPageElementObject} flow element.
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/CurrentPageSummary">
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<FlowSummaryParam name="elemTemplateName" propertyName="elemTemplateName"/>
		<FlowSummaryParam name="containsOperator" propertyName="containsOperator"/>
		<FlowSummaryParam name="categoryNames" objectPath="ChildCatalogGroup/CatalogGroupAlias/CatalogGroupDescription" propertyName="name"/>
		<FlowSummaryParam name="productNames" objectPath="ChildCatentry/CatalogEntry/CatalogEntryDescription" propertyName="name"/>
		<FlowSummaryParam name="includeSubcategories" propertyName="type"/>
		<FlowSummaryParam name="searchTermList" objectPath="searchTerm" propertyName="searchTerm"/>
		<FlowSummaryParam name="comparison" propertyName="comparison"/>
		<FlowSummaryParam name="urlName" propertyName="urlName"/>
		<FlowSummaryParam name="urlValueList" objectPath="urlValue" propertyName="urlValue"/>
		<FlowSummaryParam name="categoryName" objectPath="ChildCatalogGroupGroup/CatalogGroupAlias" propertyName="identifier"/>
		<FlowSummaryParam name="propertyName" objectPath="catalogEntryPropertySearchFilter" propertyName="filterName" resolveDisplayName="true"/>
		<FlowSummaryParam name="attributeName" objectPath="ChildAttributeWithAllowedValuesGroup/AttributeDictionaryAttributes" propertyName="attributeCode"/>
		
		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryViewingProducts, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotViewingProducts, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryViewingCategories, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotViewingCategories, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryViewingCategoriesAndSubCategories, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotViewingCategoriesAndSubCategories, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryViewingProductsInCategories, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotViewingProductsInCategories, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchingExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotSearchingExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchingStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotSearchingStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchingContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotSearchingContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchingEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotSearchingEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNVPExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotNVPExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNVPStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotNVPStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNVPContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotNVPContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNVPEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotNVPEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNVPAny, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNotNVPAny, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarycurrentPage_browsingProductsWithAttributesSearchFilters, "onstring");
			]]>
		</handler>

		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			if (this.resolvedParams.elemTemplateName == "currentCustomerBehaviorProductBrowsing") {
				summaryText = this.getCatalogSummary("Products");
			}
			else if (this.resolvedParams.elemTemplateName == "currentCustomerBehaviorCategoryBrowsing") {
				summaryText = this.getCatalogSummary("Categories");
			}
			else if (this.resolvedParams.elemTemplateName == "currentCustomerBehaviorProductInCategoryBrowsing") {
				summaryText = this.getCatalogSummary("ProductsInCategories");
			}
			else if (this.resolvedParams.elemTemplateName == "currentCustomerBehaviorURLContents") {
				summaryText = this.getNVPSummary();
			}
			else if (this.resolvedParams.elemTemplateName == "currentCustomerBehaviorSearching") {
				summaryText = this.getSearchSummary();
			}
			else if (this.resolvedParams.elemTemplateName == "currentCustomerBehaviorProductAttributeBrowsing") {
				summaryText = this.getProductAttributeSummary();
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="usage" name="getCatalogSummary">
			<![CDATA[
			if (usage == undefined) {
				usage = "Products";
			}
			var summary = "";
			var containsOperator = this.resolvedParams.containsOperator;
			if ((containsOperator == "=") || (containsOperator == "!=")) {
				if (usage == "Products") {
					var productText = this.getValuesList("productNames");
					if (productText != "") {
						if (containsOperator == "=") {
							summary = marketingResources.Singleton.replaceValues("summaryViewingProducts", [productText]);
						}
						else {
							summary = marketingResources.Singleton.replaceValues("summaryNotViewingProducts", [productText]);
						}
					}
				}
				else if ((usage == "Categories") || (usage == "ProductsInCategories")) {
					var includeSubcategories = this.resolvedParams.includeSubcategories;
					if ((usage == "Categories") && (includeSubcategories == "PARENTCATEGORY")) {
						includeSubcategories = "AndSubCategories";
					}
					else {
						includeSubcategories = "";
					}
					var categoryText = this.getValuesList("categoryNames");
					if (categoryText != "") {
						if (containsOperator == "=") {
							summary = marketingResources.Singleton.replaceValues("summaryViewing" + usage + includeSubcategories, [categoryText]);
						}
						else {
							summary = marketingResources.Singleton.replaceValues("summaryNotViewing" + usage + includeSubcategories, [categoryText]);
						}
					}
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getNVPSummary">
			<![CDATA[
			var summary = "";
			var valueText = this.getValuesList("urlValueList");
			var urlName = this.resolvedParams.urlName;
			var comparison = this.resolvedParams.comparison;
			var containsOperator = this.resolvedParams.containsOperator;
			if ((urlName != null) && (urlName != "") && (comparison != null) && (comparison != "") && ((containsOperator == "=") || (containsOperator == "!="))) {
				var notText = (containsOperator == "!=") ? "Not" : "";
				var compText = "";
				switch (comparison) {				
					case "=":
						compText = "Exactly";
						break;
					case "start":
						compText = "StartsWith";
						break;
					case "contain":
						compText = "Contains";
						break;
					case "end":
						compText = "Ends";
						break;
					case "any":
						compText = "Any";
						break;
				}
				if (((valueText != null) && (valueText != "")) || (compText == "Any")) {
					summary = marketingResources.Singleton.replaceValues("summary" + notText + "NVP" + compText, [urlName, valueText]);
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getSearchSummary">
			<![CDATA[
			var summary = "";
			var valueText = this.getValuesList("searchTermList");
			var comparison = this.resolvedParams.comparison;
			var containsOperator = this.resolvedParams.containsOperator;
			if ((valueText != null) && (valueText != "") && (comparison != null) && (comparison != "") && ((containsOperator == "=") || (containsOperator == "!="))) {
				var notText = (containsOperator == "!=") ? "Not" : "";
				var compText = "";
				switch (comparison) {				
					case "=":
						compText = "Exactly";
						break;
					case "start":
						compText = "StartsWith";
						break;
					case "contain":
						compText = "Contains";
						break;
					case "end":
						compText = "Ends";
						break;
				}
				summary = marketingResources.Singleton.replaceValues("summary" + notText + "Searching" + compText, [valueText]);
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getProductAttributeSummary">
			<![CDATA[
			var summaryText = "";
			var categoryNames = this.getValuesList("categoryName");
			var attributeName = this.getValuesList("attributeName");
			var propertyName = this.getValuesList("propertyName");
			var filterText = "";
			if (categoryNames != "") {
				filterText = categoryNames;
			}
			if (propertyName != "") {
				if (filterText != "") {
					filterText += ", " + propertyName;
				}
				else {
					filterText = propertyName;
				}
			}
			if (attributeName != "") {
				if (filterText != "") {
					filterText += ", " + attributeName;
				}
				else {
					filterText = attributeName;
				}
			}
			if (filterText != "") {
				summaryText = marketingResources.Singleton.replaceValues("summarycurrentPage_browsingProductsWithAttributesSearchFilters", [filterText]);
			}
			return summaryText;
			]]>
		</method>
				
	</FlowElementSummary>

</Definitions>