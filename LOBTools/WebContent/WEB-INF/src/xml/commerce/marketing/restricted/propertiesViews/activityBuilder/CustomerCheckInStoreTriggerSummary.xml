<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		This summary view provides brief information about the {@link cmc/marketing/CustomerCheckInStoreTriggerElementObject} flow element.
		The generated text is shown beneath the element on the Activity Builder flow diagram.
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/CustomerCheckInStoreTriggerSummary">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<dependency localName="GlobalizationUtil" moduleName="cmc/foundation/GlobalizationUtil"/>
		<FlowSummaryParam name="elemTemplateName" propertyName="elemTemplateName"/>
		<FlowSummaryParam name="daysOperator" propertyName="daysOperator"/>
		<FlowSummaryParam name="days" propertyName="days"/>
		<FlowSummaryParam name="date1" propertyName="date1"/>
		<FlowSummaryParam name="date2" propertyName="date2"/>
		<FlowSummaryParam name="beforeDate" propertyName="beforeDate"/>
		<FlowSummaryParam name="beforeAfterOnDate" propertyName="beforeAfterOnDate"/>
		<FlowSummaryParam name="numberOfTimesOperator" propertyName="numberOfTimesOperator"/>
		<FlowSummaryParam name="numberOfTimes" propertyName="numberOfTimes"/>
		<FlowSummaryParam name="poiNames" objectPath="ReferencePOI/LocationPOI" propertyName="name"/>
		<FlowSummaryParam name="regNames" objectPath="ReferenceRegion/LocationRegion" propertyName="name"/>
		<FlowSummaryParam name="locType" propertyName="locationType"/>
		
			

		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedWithinLastXDays, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedAtLeastXDaysAgo, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedBeforeXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedAfterXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedBetweenXandYDates, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedOnXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryCheckInLessThan, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryCheckInAtLeast, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryCheckInRegion, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryCheckInPOI, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.region, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.pointOfInterest, "onstring");
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			var poiNames = this.getValuesList("poiNames");
			var regNames = this.getValuesList("regNames");
			var locType = this.resolvedParams.locType;
			if ((locType == "pointOfInterest" && poiNames != "") || (locType == "region" && regNames != "")) {
				if (locType == "region") {
					summaryText = marketingResources.Singleton.replaceValues("summaryCheckInRegion", [regNames]);
				}
				else {
					summaryText = marketingResources.Singleton.replaceValues("summaryCheckInPOI", [poiNames]);
				}
				var numberAndActivityText = this.getNumberAndActivitySummary();
				if (numberAndActivityText != "") {
					summaryText += "\n" + numberAndActivityText;
				}
				var dateText = this.getDateSummary();
				if (dateText != "") {
					summaryText += "\n" + dateText;
				}
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
		
		
		<!--- @keywords private -->
		<method name="getDateSummary">
			<![CDATA[
			var summary = "";
			if (this.resolvedParams.daysOperator == "<=") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedWithinLastXDays", [days]);
				}
			}
			else if (this.resolvedParams.daysOperator == ">") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedAtLeastXDaysAgo", [days]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "<") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedBeforeXDate", [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedAfterXDate", [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">=" && this.resolvedParams.beforeDate == "<=") {
				if (this.resolvedParams.date1 != "" && this.resolvedParams.date2 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					var date2 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date2, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedBetweenXandYDates", [date1, date2]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "=") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedOnXDate", [date1]);
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getNumberAndActivitySummary">
			<![CDATA[
			var summary = "";
			if (this.resolvedParams.numberOfTimes && (this.resolvedParams.numberOfTimes != "")) {
				if (this.resolvedParams.numberOfTimesOperator == "<") {
					var numberOfTimes = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.numberOfTimes);
					summary = marketingResources.Singleton.replaceValues("summaryCheckInLessThan", [numberOfTimes]);
				}
				else if (this.resolvedParams.numberOfTimesOperator == ">=") {
					var numberOfTimes = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.numberOfTimes);
					summary = marketingResources.Singleton.replaceValues("summaryCheckInAtLeast", [numberOfTimes]);
				}
			}
			return summary;
			]]>
		</method>
		
	</FlowElementSummary>
</Definitions>