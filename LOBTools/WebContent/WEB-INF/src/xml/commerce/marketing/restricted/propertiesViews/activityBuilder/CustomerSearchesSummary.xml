<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		This summary view provides brief information about the {@link cmc/marketing/CustomerSearchesElementObject} flow element.
		The generated text is shown beneath the element on the Activity Builder flow diagram.
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/CustomerSearchesSummary">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<dependency localName="GlobalizationUtil" moduleName="cmc/foundation/GlobalizationUtil"/>
		<FlowSummaryParam name="comparison" propertyName="comparison"/>
		<FlowSummaryParam name="searchTerm" objectPath="searchTerm" propertyName="searchTerm"/>
		<FlowSummaryParam name="daysOperator" propertyName="daysOperator"/>
		<FlowSummaryParam name="days" propertyName="days"/>
		<FlowSummaryParam name="date1" propertyName="date1"/>
		<FlowSummaryParam name="date2" propertyName="date2"/>
		<FlowSummaryParam name="beforeDate" propertyName="beforeDate"/>
		<FlowSummaryParam name="beforeAfterOnDate" propertyName="beforeAfterOnDate"/>
		<FlowSummaryParam name="numberOfTimes" propertyName="numberOfTimes"/>

		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchTermsExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchTermsStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchTermsContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchTermsEndsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchTermsAny, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedWithinLastXDays, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedAtLeastXDaysAgo, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedBeforeXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedAfterXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedBetweenXandYDates, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryPerformedOnXDate, "onstring");
			]]>
		</handler>

		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = this.getEventSummary();
			var dateText = this.getDateSummary();
			if (summaryText != "") {
				summaryText += "\n";
			}
			if (dateText != "") {
				summaryText += dateText;
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getEventSummary">
			<![CDATA[
			var summary = "";
			var numberOfTimes = this.getValuesList("numberOfTimes");
			if (numberOfTimes != "") {
				numberOfTimes = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.numberOfTimes);
				var searchTermName = this.getValuesList("searchTerm");
				var comparison = this.getValuesList("comparison");
				if ((searchTermName != "" && comparison != "") || (comparison == "any")) {
					var compText = "";
					switch (comparison) {					
						case "=":
							compText = "Exactly";
							break;
						case "start":
							compText = "StartsWith";
							break;
						case "contain":
							compText = "Contains";
							break;
						case "end":
							compText = "EndsWith";
							break;
						case "any":
							compText = "Any";
							break;
					}
					var valueText = this.getValuesList("searchTerm");
					if (compText == "Any") {
						summary = marketingResources.Singleton.replaceValues("summarySearchTerms" + compText, [numberOfTimes]);
					}
					else if (valueText != "") {
						summary = marketingResources.Singleton.replaceValues("summarySearchTerms" + compText, [numberOfTimes, valueText]);
					}
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getDateSummary">
			<![CDATA[
			var summary = "";
			if (this.resolvedParams.daysOperator == "<=") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedWithinLastXDays", [days]);
				}
			}
			else if (this.resolvedParams.daysOperator == ">") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedAtLeastXDaysAgo", [days]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "<") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedBeforeXDate", [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedAfterXDate", [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">=" && this.resolvedParams.beforeDate == "<=") {
				if (this.resolvedParams.date1 != "" && this.resolvedParams.date2 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					var date2 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date2, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedBetweenXandYDates", [date1, date2]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "=") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryPerformedOnXDate", [date1]);
				}
			}
			return summary;
			]]>
		</method>
						
	</FlowElementSummary>

</Definitions>