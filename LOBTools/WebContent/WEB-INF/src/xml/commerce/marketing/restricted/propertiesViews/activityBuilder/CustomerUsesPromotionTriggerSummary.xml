<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		This summary view provides brief information about the {@link cmc/marketing/CustomerUsesPromotionTriggerElementObject} flow element.
		It is shown beneath the element on the Activity Builder flow diagram. 
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/CustomerUsesPromotionTriggerSummary">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<dependency localName="GlobalizationUtil" moduleName="cmc/foundation/GlobalizationUtil"/>
		
		<FlowSummaryParam name="promotionNames" objectPath="ChildPromotion/PromotionGroup" propertyName="adminName"/>
		<FlowSummaryParam name="numberOfTimes" propertyName="numberOfTimes"/>
		<FlowSummaryParam name="daysOperator" propertyName="daysOperator"/>
		<FlowSummaryParam name="days" propertyName="days"/>
		<FlowSummaryParam name="date1" propertyName="date1"/>
		<FlowSummaryParam name="date2" propertyName="date2"/>
		<FlowSummaryParam name="beforeDate" propertyName="beforeDate"/>
		<FlowSummaryParam name="beforeAfterOnDate" propertyName="beforeAfterOnDate"/>
		
		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryUsesPromotionWithinLastXDays, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryUsesPromotionAtLeastXDaysAgo, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryUsesPromotionBeforeXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryUsesPromotionAfterXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryUsesPromotionBetweenXandYDates, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryUsesPromotionOnXDate, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarycustomerUsesPromotion, "onstring");
			]]>
		</handler>

		<!---
			Sets the summary text for the {@link cmc/marketing/PromotionCheckerElementObject} flow element. Classes overriding
			this method must call <code>setSummaryText</code> with the desired summary text.
		-->

		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			var dateText = "";
			summaryText = this.getPromotionSummary();
			dateText = this.getDateSummary();
			if ((dateText != "") && (summaryText != "")) {
				summaryText += "\n" + dateText;
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getPromotionSummary">
			<![CDATA[
			var summary = "";
			var times = this.getValuesList("numberOfTimes");
			var promotions = this.getValuesList("promotionNames");
			if ((promotions != "") && (times != "")) {
				summary = marketingResources.Singleton.replaceValues("summarycustomerUsesPromotion", [promotions, times]);
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getDateSummary">
			<![CDATA[
			var summary = "";
			if (this.resolvedParams.daysOperator == "<=") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryUsesPromotionWithinLastXDays", [days]);
				}
			}
			else if (this.resolvedParams.daysOperator == ">") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryUsesPromotionAtLeastXDaysAgo", [days]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "<") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryUsesPromotionBeforeXDate", [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryUsesPromotionAfterXDate", [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">=" && this.resolvedParams.beforeDate == "<=") {
				if (this.resolvedParams.date1 != "" && this.resolvedParams.date2 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					var date2 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date2, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryUsesPromotionBetweenXandYDates", [date1, date2]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "=") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryUsesPromotionOnXDate", [date1]);
				}
			}
			return summary;
			]]>
		</method>
	</FlowElementSummary>
</Definitions>