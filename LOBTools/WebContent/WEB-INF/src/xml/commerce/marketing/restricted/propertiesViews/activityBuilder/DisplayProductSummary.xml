<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		This summary view provides brief information about the {@link cmc/marketing/DisplayProductElementObject} flow element.
		It is shown beneath the element on the Activity Builder flow diagram and to generate the text, it looks at the
		following property names of the {@link cmc/marketing/DisplayProductElementObject} object:
		<ul>
			<li>ChildCatentry/CatalogEntry/CatalogEntryDescription[name]</li>
			<li>elemTemplateName</li>
			<li>searchTermList</li>
			<li>useUserSearchTerm</li>
			<li>searchActionFilter/filterName</li>
			<li>displayMax</li>
			<li>searchActionOrderBy/orderByField</li>
		</ul>
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/DisplayProductSummary">
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<dependency localName="StringUtil" moduleName="cmc/foundation/StringUtil"/>
		<FlowSummaryParam name="productNames" objectPath="ChildCatentry/CatalogEntry/CatalogEntryDescription" propertyName="name" sequencePropertyName="sequence" sequencePropertyPath="ChildCatentry"/>
		<FlowSummaryParam name="elemTemplateName" propertyName="elemTemplateName"/>
		<FlowSummaryParam name="searchTermList" propertyName="searchTermList"/>
		<FlowSummaryParam name="useUserSearchTerm" propertyName="useUserSearchTerm"/>
		<FlowSummaryParam name="displayMax" propertyName="displayMax"/>
		<FlowSummaryParam name="orderByField" objectPath="searchActionOrderBy" propertyName="orderByField" resolveDisplayName="true" sequencePropertyName="sequence"/>
		<FlowSummaryParam checkObjectDefinition="true" forceResolveAll="true" name="filterName" objectPath="filterGroup" propertyName="displayName" sequencePropertyName="sequence"/>

		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_displayMax, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_searchTerm, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_shopperSearchTerm, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_filterBy, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_sortBy, "onstring");
			]]>
		</handler>

		<!---
			Sets the summary text for the {@link cmc/marketing/DisplayProductElementObject} flow element. Classes overriding
			this method must call <code>setSummaryText</code> with the desired summary text.
		-->
		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			var products = this.getValuesList("productNames");
			var choice = this.resolvedParams.elemTemplateName;
			if (products != "" && choice == "displayProduct") {
				products = StringUtil.Singleton.escapeText(products);
				summaryText += products;
			}
			else {
				if (choice == "displayProductStandardSearch") {
					var maxDisplay = this.resolvedParams.displayMax;
					if (maxDisplay != null && maxDisplay != "") {
						var summaryMaxDisplay = marketingResources.Singleton.replaceValues("summarydisplayProduct_displayMax", [maxDisplay]);
						summaryText += summaryMaxDisplay;
					}
					var useShopperKeyword = this.resolvedParams.useUserSearchTerm;
					if (useShopperKeyword == "true") {
						var shopperKeywordText = marketingResources.Singleton.summarydisplayProduct_shopperSearchTerm.string;
						summaryText += "\n" + shopperKeywordText;
					}
					var searchKeyword = this.resolvedParams.searchTermList;
					if (useShopperKeyword == "false" && searchKeyword != null && searchKeyword != "") {
						var summaryKeyword = marketingResources.Singleton.replaceValues("summarydisplayProduct_searchTerm", [searchKeyword]);
						summaryText += "\n" + summaryKeyword;
					}
					var filterNames = this.getValuesList("filterName");
					if (filterNames != "") {
						var summaryFilter = marketingResources.Singleton.replaceValues("summarydisplayProduct_filterBy", [filterNames]);
						summaryText += "\n" + summaryFilter;
					}
					var orderByFields = this.getValuesList("orderByField");
					if (orderByFields != "") {
						var summarySort = marketingResources.Singleton.replaceValues("summarydisplayProduct_sortBy", [orderByFields]);
						summaryText += "\n" + summarySort;
					}
				}
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
	</FlowElementSummary>
	
	<!---
		This summary view provides brief information about the {@link cmc/marketing/DisplayProductCombinedElementObject} flow element.
		It is shown beneath the element on the Activity Builder flow diagram and to generate the text, it looks at the
		following property names of the {@link cmc/marketing/DisplayProductCombinedElementObject} object:
		<ul>
			<li>ChildCatentryGroup/CatalogEntry/CatalogEntryDescription[name]</li>
			<li>elemTemplateName</li>
			<li>searchTermList</li>
			<li>useUserSearchTerm</li>
			<li>searchActionFilter/filterName</li>
			<li>displayMax</li>
			<li>catalogEntryPropertySearchFilter[filterName]</li>
			<li>catenttype_id_ntk_cs/filterValue[filterValue]</li>
			<li>ChildCatalogGroupGroup/CatalogGroupAlias[identifier]</li>
			<li>ChildAttributeWithAllowedValuesGroup/AttributeDictionaryAttributes[attributeCode]</li>
			<li>ChildFacetExclusion[facetExclusionField]</li>
		</ul>
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/DisplayProductCombinedSummary">
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<dependency localName="StringUtil" moduleName="cmc/foundation/StringUtil"/>
		<FlowSummaryParam name="productNames" objectPath="ChildCatentryGroup/CatalogEntry/CatalogEntryDescription" propertyName="name" sequencePropertyName="sequence" sequencePropertyPath="ChildCatentryGroup"/>
		<FlowSummaryParam name="elemTemplateName" propertyName="elemTemplateName"/>
		<FlowSummaryParam name="searchTermList" propertyName="searchTermList"/>
		<FlowSummaryParam name="useUserSearchTerm" propertyName="useUserSearchTerm"/>
		<FlowSummaryParam name="includeCategories" propertyName="includeCategories"/>
		<FlowSummaryParam name="includeFacets" propertyName="includeFacets"/>
		<FlowSummaryParam name="displayMax" propertyName="displayMax"/>
		<FlowSummaryParam name="orderByPropertyField" objectPath="searchActionOrderBy" propertyName="orderByField" resolveDisplayName="true" sequencePropertyName="sequence"/>
		<FlowSummaryParam name="propertyName" objectPath="catalogEntryPropertySearchFilter" propertyName="filterName" resolveDisplayName="true"/>
		<FlowSummaryParam name="productType" objectPath="catenttype_id_ntk_cs/filterValue" propertyName="filterValue" resolveDisplayName="true"/>
		<FlowSummaryParam name="categoryName" objectPath="ChildCatalogGroupGroup/CatalogGroupAlias" propertyName="identifier"/>
		<FlowSummaryParam name="attributeName" objectPath="ChildAttributeWithAllowedValuesGroup/AttributeDictionaryAttributes" propertyName="attributeCode"/>
		<FlowSummaryParam name="facetExclusionField" objectPath="ChildFacetExclusion" propertyName="facetExclusionField" resolveDisplayName="true"/>

		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_displayMax, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_searchTerm, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_shopperSearch, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_filterBy, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_sortBy, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_customerCategorySelection, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_customerFacetSelection, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_ignoreCustomerFacetSelection, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_useShoppers1, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_useShoppers2, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarydisplayProduct_useShoppers3, "onstring");
			]]>
		</handler>

		<!---
			Sets the summary text for the {@link cmc/marketing/DisplayProductCombinedElementObject} flow element. Classes overriding
			this method must call <code>setSummaryText</code> with the desired summary text.
		-->
		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			var products = this.getValuesList("productNames");
			var choice = this.resolvedParams.elemTemplateName;
			if (products != "" && choice == "displayProduct") {
				products = StringUtil.Singleton.escapeText(products);
				summaryText += products;
			}
			else {
				if (choice == "displayProductStandardSearchCombined") {
					var overrideText = [];
					var maxDisplay = this.resolvedParams.displayMax;
					if (maxDisplay != null && maxDisplay != "") {
						var summaryMaxDisplay = marketingResources.Singleton.replaceValues("summarydisplayProduct_displayMax", [maxDisplay]);
						summaryText += summaryMaxDisplay;
					}
					var useShopperKeyword = this.resolvedParams.useUserSearchTerm;
					if (useShopperKeyword == "true") {
						var shopperKeywordText = marketingResources.Singleton.summarydisplayProduct_shopperSearch.string;
						overrideText.push(shopperKeywordText);
					}
					var useCustomerCategorySelection = this.resolvedParams.includeCategories;
					if (useCustomerCategorySelection == "true") {
						var includeCategoryText = marketingResources.Singleton.summarydisplayProduct_customerCategorySelection.string;
						overrideText.push(includeCategoryText);
					}
					var useCustomerFacetSelection = this.resolvedParams.includeFacets;
					if (useCustomerFacetSelection == "true") {
						var includeFacetText = marketingResources.Singleton.summarydisplayProduct_customerFacetSelection.string;
						overrideText.push(includeFacetText);
					}
					if (overrideText.length == 1) {
						summaryText += "\n" + marketingResources.Singleton.replaceValues("summarydisplayProduct_useShoppers1", overrideText);
					}
					else if (overrideText.length == 2) {
						summaryText += "\n" + marketingResources.Singleton.replaceValues("summarydisplayProduct_useShoppers2", overrideText);
					}
					else if (overrideText.length == 3) {
						summaryText += "\n" + marketingResources.Singleton.replaceValues("summarydisplayProduct_useShoppers3", overrideText);
					}
					var searchKeyword = this.resolvedParams.searchTermList;
					if (searchKeyword != null && searchKeyword != "") {
						var summaryKeyword = marketingResources.Singleton.replaceValues("summarydisplayProduct_searchTerm", [searchKeyword]);
						summaryText += "\n" + summaryKeyword;
					}
					if (useCustomerFacetSelection == "true") {
						var facetExclusionFields = this.getValuesList("facetExclusionField");
						if (facetExclusionFields != null && facetExclusionFields != "") {
							var summaryFacetExclusion = marketingResources.Singleton.replaceValues("summarydisplayProduct_ignoreCustomerFacetSelection", [facetExclusionFields]);
							summaryText += "\n" + summaryFacetExclusion;
						}
					}
					var categoryNames = this.getValuesList("categoryName");
					var attributeName = this.getValuesList("attributeName");
					var propertyName = this.getValuesList("propertyName");
					var productTypes = this.getValuesList("productType");
					var filterText = "";
					if (categoryNames != "") {
						filterText = categoryNames;
					}
					if (propertyName != "") {
						if (filterText != "") {
							filterText += ", " + propertyName;
						}
						else {
							filterText = propertyName;
						}
					}
					if (attributeName != "") {
						if (filterText != "") {
							filterText += ", " + attributeName;
						}
						else {
							filterText = attributeName;
						}
					}
					if (productTypes != "") {
						if (filterText != "") {
							filterText += ", " + productTypes;
						}
						else {
							filterText = productTypes;
						}
					}
					if (filterText != "") {
						var summaryFilter = marketingResources.Singleton.replaceValues("summarydisplayProduct_filterBy", [filterText]);
						summaryText += "\n" + summaryFilter;
					}
					var orderByPropertyField = this.getValuesList("orderByPropertyField");
					var orderText = "";
					if (orderByPropertyField != "") {
						orderText = orderByPropertyField;
					}
					if (orderText != "") {
						var summarySort = marketingResources.Singleton.replaceValues("summarydisplayProduct_sortBy", [orderText]);
						summaryText += "\n" + summarySort;
					}
				}
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
	</FlowElementSummary>
</Definitions>