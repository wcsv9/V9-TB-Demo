<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		This summary view provides brief information about the {@link cmc/marketing/OnlineBehaviorElementObject} flow element.
		The generated text is shown beneath the element on the Activity Builder flow diagram.
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/OnlineBehaviorSummary">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<dependency localName="GlobalizationUtil" moduleName="cmc/foundation/GlobalizationUtil"/>
		<FlowSummaryParam name="elemTemplateName" propertyName="elemTemplateName"/>
		<FlowSummaryParam name="containsOperator" propertyName="containsOperator"/>
		<FlowSummaryParam name="anyOrAll" propertyName="anyOrAll"/>
		<FlowSummaryParam name="searchTermList" objectPath="searchTerm" propertyName="searchTerm"/>
		<FlowSummaryParam name="comparison" propertyName="comparison"/>
		<FlowSummaryParam name="urlName" propertyName="urlName"/>
		<FlowSummaryParam name="urlValueList" objectPath="urlValue" propertyName="urlValue"/>
		<FlowSummaryParam name="daysOperator" propertyName="daysOperator"/>
		<FlowSummaryParam name="days" propertyName="days"/>
		<FlowSummaryParam name="date1" propertyName="date1"/>
		<FlowSummaryParam name="date2" propertyName="date2"/>
		<FlowSummaryParam name="beforeDate" propertyName="beforeDate"/>
		<FlowSummaryParam name="beforeAfterOnDate" propertyName="beforeAfterOnDate"/>
		<FlowSummaryParam name="numberOfTimesOperator" propertyName="numberOfTimesOperator"/>
		<FlowSummaryParam name="numberOfTimes" propertyName="numberOfTimes"/>

		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAnyExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAllExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAnyStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAllStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAnyContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAllContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAnyEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySearchedAllEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryWithinLastXDaysSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryAtLeastXDaysAgoSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryBeforeXDateSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryAfterXDateSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryBetweenXandYDatesSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryOnXDateSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryLessThanSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryAtLeastSearched, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAnyExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAllExactly, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAnyStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAllStartsWith, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAnyContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAllContains, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAnyEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAllEnds, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryURLAny, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryWithinLastXDaysURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryAtLeastXDaysAgoURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryBeforeXDateURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryAfterXDateURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryBetweenXandYDatesURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryOnXDateURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryLessThanURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryAtLeastURL, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summaryNone, "onstring");
			]]>
		</handler>

		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			var dateText = "";
			var numberText = "";
			if (this.resolvedParams.elemTemplateName == "recordedCustomerBehaviorURLContents") {
				summaryText = this.getURLSummary();
				dateText = this.getDateSummary("URL");
				numberText = this.getNumberSummary("URL");
			}
			else if (this.resolvedParams.elemTemplateName == "recordedCustomerBehaviorSearched") {
				summaryText = this.getSearchSummary();
				dateText = this.getDateSummary("Searched");
				numberText = this.getNumberSummary("Searched");
			}
			if ((numberText != "") && (summaryText != "")) {
				summaryText += "\n" + numberText;
			}
			if ((dateText != "") && (summaryText != "")) {
				summaryText += "\n" + dateText;
			}
			if ((this.resolvedParams.containsOperator == "!=") && (summaryText != "")) {
				summaryText = marketingResources.Singleton.summaryNone.string + "\n" + summaryText;
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getURLSummary">
			<![CDATA[
			var summary = "";
			var valueText = this.getValuesList("urlValueList");
			var urlName = this.resolvedParams.urlName;
			var comparison = this.resolvedParams.comparison;
			var anyOrAll = this.resolvedParams.anyOrAll;
			if ((urlName != null) && (urlName != "") && (comparison != null) && (comparison != "") && ((anyOrAll == "any") || (anyOrAll == "all"))) {
				var anyText = (anyOrAll == "any") ? "Any" : "All";
				var compText = "";
				switch (comparison) {				
					case "=":
						compText = "Exactly";
						break;
					case "start":
						compText = "StartsWith";
						break;
					case "contain":
						compText = "Contains";
						break;
					case "end":
						compText = "Ends";
						break;
					case "any":
						anyText = "";
						compText = "Any";
						break;
				}
				if (((valueText != null) && (valueText != "")) || (compText == "Any")) {
					summary = marketingResources.Singleton.replaceValues("summaryURL" + anyText + compText, [urlName, valueText]);
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getSearchSummary">
			<![CDATA[
			var summary = "";
			var valueText = this.getValuesList("searchTermList");
			var comparison = this.resolvedParams.comparison;
			var anyOrAll = this.resolvedParams.anyOrAll;
			if ((valueText != null) && (valueText != "") && (comparison != null) && (comparison != "") && ((anyOrAll == "any") || (anyOrAll == "all"))) {
				var anyText = (anyOrAll == "any") ? "Any" : "All";
				var compText = "";
				switch (comparison) {				
					case "=":
						compText = "Exactly";
						break;
					case "start":
						compText = "StartsWith";
						break;
					case "contain":
						compText = "Contains";
						break;
					case "end":
						compText = "Ends";
						break;
				}
				summary = marketingResources.Singleton.replaceValues("summarySearched" + anyText + compText, [valueText]);
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="usage" name="getDateSummary">
			<![CDATA[
			if (usage == undefined) {
				usage = "Searched";
			}
			var summary = "";
			if (this.resolvedParams.daysOperator == "<=") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryWithinLastXDays" + usage, [days]);
				}
			}
			else if (this.resolvedParams.daysOperator == ">") {
				if (this.resolvedParams.days != "") {
					var days = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.days);
					summary = marketingResources.Singleton.replaceValues("summaryAtLeastXDaysAgo" + usage, [days]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "<") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryBeforeXDate" + usage, [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryAfterXDate" + usage, [date1]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == ">=" && this.resolvedParams.beforeDate == "<=") {
				if (this.resolvedParams.date1 != "" && this.resolvedParams.date2 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					var date2 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date2, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryBetweenXandYDates" + usage, [date1, date2]);
				}
			}
			else if (this.resolvedParams.beforeAfterOnDate == "=") {
				if (this.resolvedParams.date1 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.date1, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryOnXDate" + usage, [date1]);
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="usage" name="getNumberSummary">
			<![CDATA[
			if (usage == undefined) {
				usage = "Searched";
			}
			var summary = "";
			if (this.resolvedParams.numberOfTimes != "") {
				if (this.resolvedParams.numberOfTimesOperator == "<") {
					var numberOfTimes = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.numberOfTimes);
					summary = marketingResources.Singleton.replaceValues("summaryLessThan" + usage, [numberOfTimes]);
				}
				else if (this.resolvedParams.numberOfTimesOperator == ">=") {
					var numberOfTimes = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.numberOfTimes);
					summary = marketingResources.Singleton.replaceValues("summaryAtLeast" + usage, [numberOfTimes]);
				}
			}
			return summary;
			]]>
		</method>
	</FlowElementSummary>

</Definitions>