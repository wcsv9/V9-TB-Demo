<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		This summary view provides brief information about the {@link cmc/marketing/SubscriptionTriggerElementObject} flow element.
		It is shown beneath the element on the Activity Builder flow diagram and to generate the text, it looks at the
		following property names of the {@link cmc/marketing/SubscriptionTriggerElementObject} object:
		<ul>
			<li>repeatSchedule</li>
			<li>subscriptionTriggerType</li>
			<li>numberOfDays</li>
			<li>startsBetweenDateRange</li>
			<li>startDate</li>
			<li>startDate2</li>
			<li>endsBetweenDateRange</li>
			<li>endDate</li>
			<li>endDate2</li>
			<li>productNames</li>
		</ul>
	-->
	<FlowElementSummary classDefinition="true" definitionName="cmc/marketing/SubscriptionTriggerSummary">
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
		<dependency localName="marketingResources" moduleName="cmc/marketing/MarketingResources"/>
		<dependency localName="GlobalizationUtil" moduleName="cmc/foundation/GlobalizationUtil"/>
		<FlowSummaryParam name="repeatSchedule" propertyName="repeatSchedule"/>
		<FlowSummaryParam name="subscriptionTriggerType" propertyName="subscriptionTriggerType"/>
		<FlowSummaryParam name="numberOfDays" propertyName="numberOfDays"/>
		<FlowSummaryParam name="startsBetweenDateRange" propertyName="startsBetweenDateRange"/>
		<FlowSummaryParam name="startDate" propertyName="startDate"/>
		<FlowSummaryParam name="startDate2" propertyName="startDate2"/>
		<FlowSummaryParam name="endsBetweenDateRange" propertyName="endsBetweenDateRange"/>
		<FlowSummaryParam name="endDate" propertyName="endDate"/>
		<FlowSummaryParam name="endDate2" propertyName="endDate2"/>
		<FlowSummaryParam name="productNames" objectPath="ChildCatentry/CatalogEntry/CatalogEntryDescription" propertyName="name"/>
		
		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionRepeatScheduleDaily, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionRepeatScheduleOnce, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionBeforeEnd, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionAfterStart, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionAfterEnd, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionAfterCancel, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionStartRange, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionEndRange, "onstring");
			this.updateSummaryDel.connect(marketingResources.Singleton.summarySubscriptionApplicableTo, "onstring");
			]]>
		</handler>
		
		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			var scheduleText = "";
			var triggerTypeText = "";
			var startRangeText = "";
			var endRangeText = "";
			var subscriptionText = "";
			scheduleText = this.getScheduleSummary();
			triggerTypeText = this.getTriggerTypeAndDaysSummary();
			startRangeText = this.getStartRangeSummary();
			endRangeText = this.getEndRangeSummary();
			subscriptionText = this.getApplicableSubscriptionSummary();
			if ((scheduleText != "")) {
				summaryText += scheduleText;
			}
			if ((triggerTypeText != "")) {
				if (summaryText != "") {
					summaryText += "\n";
				}
				summaryText += triggerTypeText;
			}
			if ((startRangeText != "")) {
				if (summaryText != "") {
					summaryText += "\n";
				}
				summaryText += startRangeText;
			}
			if ((endRangeText != "")) {
				if (summaryText != "") {
					summaryText += "\n";
				}
				summaryText += endRangeText;
			}
			if ((subscriptionText != "")) {
				if (summaryText != "") {
					summaryText += "\n";
				}
				summaryText += subscriptionText;
			}
			this.setSummaryText(summaryText);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getScheduleSummary">
			<![CDATA[
			var summary = "";
			var repeatSchedule = this.resolvedParams.repeatSchedule;
			if (repeatSchedule != null && repeatSchedule != "") {
				var scheText = "";
				switch (repeatSchedule) {				
					case "runDaily":
						scheText = "summarySubscriptionRepeatScheduleDaily";
						break;
					case "runOnce":
						scheText = "summarySubscriptionRepeatScheduleOnce";
						break;
				}
				if (scheText != null && scheText != "") {
					summary = marketingResources.Singleton[scheText].string;
				}
			}
			return summary;
			]]>
		</method>			
		
		<!--- @keywords private -->
		<method name="getTriggerTypeAndDaysSummary">
			<![CDATA[
			var summary = "";
			var triggerType = this.resolvedParams.subscriptionTriggerType;
			if (triggerType != null && triggerType != "" && this.resolvedParams.numberOfDays != null && this.resolvedParams.numberOfDays != "") {
				var numberOfDays = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.numberOfDays);
				var summaryText = "";
				switch (triggerType) {				
					case "beforeEnd":
						summaryText = "summarySubscriptionBeforeEnd";
						break;
					case "afterStart":
						summaryText = "summarySubscriptionAfterStart";
						break;
					case "afterEnd":
						summaryText = "summarySubscriptionAfterEnd";
						break;
					case "afterCancel":
						summaryText = "summarySubscriptionAfterCancel";
						break;
				}
				if (summaryText != null && summaryText != "") {
					summary = marketingResources.Singleton.replaceValues(summaryText, [numberOfDays]);
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getStartRangeSummary">
			<![CDATA[
			var summary = "";
			var checkStartRange = this.resolvedParams.startsBetweenDateRange;
			if (checkStartRange == "true") {
				if (this.resolvedParams.startDate != null && this.resolvedParams.startDate2 != null && this.resolvedParams.startDate != "" && this.resolvedParams.startDate2 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.startDate, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					var date2 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.startDate2, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryRecurringOrderStartRange", [date1, date2]);
				}
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="getEndRangeSummary">
			<![CDATA[
			var summary = "";
			var checkEndRange = this.resolvedParams.endsBetweenDateRange;
			if (checkEndRange == "true") {
				if (this.resolvedParams.endDate != null && this.resolvedParams.endDate2 != null && this.resolvedParams.endDate != "" && this.resolvedParams.endDate2 != "") {
					var date1 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.endDate, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					var date2 = DateUtil.Singleton.formatUI(DateUtil.Singleton.parse(this.resolvedParams.endDate2, DateUtil.Singleton.DATE_TIME_FORMAT), DateUtil.Singleton.UI_DATE_TIME_FORMAT);
					summary = marketingResources.Singleton.replaceValues("summaryRecurringOrderEndRange", [date1, date2]);
				}
			}
			return summary;
			]]>
		</method>	

		<!--- @keywords private -->
		<method name="getApplicableSubscriptionSummary">
			<![CDATA[
			var summary = "";
			var productText = this.getValuesList("productNames");
			if (productText != "") {
				summary = marketingResources.Singleton.replaceValues("summarySubscriptionApplicableTo", [productText]);
			}
			return summary;
			]]>
		</method>
	</FlowElementSummary>
</Definitions>