<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<FlowElementSummary classDefinition="true" definitionName="cmc/price/CatalogConditionElementSummary">
		<dependency localName="priceResources" moduleName="cmc/price/PriceResources"/>

		<FlowSummaryParam name="scope" propertyName="scope"/>
		<FlowSummaryParam name="specifiedInTable" propertyName="specifiedInTable"/>
		<FlowSummaryParam name="inCategories" propertyName="inCategories"/>
		<FlowSummaryParam name="includedInCatalogFilters" propertyName="includedInCatalogFilters"/>
		
		<FlowSummaryParam name="catentryNames" objectPath="ChildCatentry/CatalogEntry/CatalogEntryDescription" propertyName="name"/>
		<FlowSummaryParam name="categoryNames" objectPath="ChildCatalogGroup/CatalogGroupAlias/CatalogGroupDescription" propertyName="name"/>
		<FlowSummaryParam name="catalogFilterNames" objectPath="ChildCatalogFilter/CatalogFilterGroup" propertyName="name"/>
		
		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(priceResources.Singleton.scopeCatalogEntries, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.scopeCategories, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.scopeCatalogFilter, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.specifiedInTable, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.notSpecifiedInTable, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.inCategories, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.notInCategories, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.includedInCatalogFilters, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.notIncludedInCatalogFilters, "onstring");
			]]>
		</handler>

		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summaryText = "";
			var tooltipText = "";
			if (this.resolvedParams.scope == "catalogEntries") {
				var catentries = this.getValuesList("catentryNames");
				if (catentries != "") {
					if (this.resolvedParams.specifiedInTable == "yes") {
						summaryText = this.getSummaryText("summary_specifiedInTable", catentries);
						tooltipText = this.getTooltipText("summary_specifiedInTable", catentries);
					}
					else if (this.resolvedParams.specifiedInTable == "no") {
						summaryText = this.getSummaryText("summary_notSpecifiedInTable", catentries);
						tooltipText = this.getTooltipText("summary_notSpecifiedInTable", catentries);
					}
				}
			}
			else if (this.resolvedParams.scope == "categories") {
				var categories = this.getValuesList("categoryNames");
				if (categories != "") {
					if (this.resolvedParams.inCategories == "yes") {
						summaryText = this.getSummaryText("summary_inCategories", categories);
						tooltipText = this.getTooltipText("summary_inCategories", categories);
					}
					else if (this.resolvedParams.inCategories == "no") {
						summaryText = this.getSummaryText("summary_notInCategories", categories);
						tooltipText = this.getTooltipText("summary_notInCategories", categories);
					}
				}
			}
			else if (this.resolvedParams.scope == "catalogFilter") {
				var catalogFilter = this.getValuesList("catalogFilterNames");
				if (catalogFilter != "") {
					if (this.resolvedParams.includedInCatalogFilters == "yes") {
						summaryText = priceResources.Singleton.replaceValues("summary_includedInCatalogFilters", [catalogFilter]);
					}
					else if (this.resolvedParams.includedInCatalogFilters == "no") {
						summaryText = priceResources.Singleton.replaceValues("summary_notIncludedInCatalogFilters", [catalogFilter]);
					}
				}
			}
			this.setSummaryText(summaryText);
			this.setTooltipText(tooltipText);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="template, valuesList" name="getSummaryText">
			<![CDATA[
			var values = valuesList.split(", ");
			var text = "";
			if (values.length > 3) {
				text = priceResources.Singleton.replaceValues(template, valuesList.split(", ", 3));
			}
			else {
				text = priceResources.Singleton.replaceValues("full_" + template, [valuesList]);
			}
			return text;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="template, valuesList" name="getTooltipText">
			<![CDATA[
			var values = valuesList.split(", ");
			var text = "";
			if (values.length > 3) {
				text = priceResources.Singleton.replaceValues("full_" + template, [valuesList]);
			}
			return text;
			]]>
		</method>
	</FlowElementSummary>
</Definitions>