<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<FlowElementSummary classDefinition="true" definitionName="cmc/price/CompareConditionElementSummary">
		<dependency localName="priceResources" moduleName="cmc/price/PriceResources"/>
		<dependency localName="GlobalizationUtil" moduleName="cmc/foundation/GlobalizationUtil"/>

		<FlowSummaryParam name="inputOperandType" propertyName="inputOperandType"/>
		<FlowSummaryParam name="comparisonOperandType" propertyName="comparisonOperandType"/>
		<FlowSummaryParam name="operator" propertyName="operator"/>
		<FlowSummaryParam name="numericalValue" propertyName="numericalValue"/>
		
		<FlowSummaryParam name="inputPriceListName" objectPath="InputPriceListGroup/PriceListGroup" propertyName="name"/>
		<FlowSummaryParam name="comparisonPriceListName" objectPath="ComparisonPriceListGroup/PriceListGroup" propertyName="name"/>
		<FlowSummaryParam name="inputPriceConstantName" objectPath="InputPriceConstantGroup/PriceConstant" propertyName="name"/>
		<FlowSummaryParam name="comparisonPriceConstantName" objectPath="ComparisonPriceConstantGroup/PriceConstant" propertyName="name"/>
		<FlowSummaryParam name="inputPriceEquationName" objectPath="InputPriceEquationGroup/PriceEquationGroup" propertyName="name"/>
		<FlowSummaryParam name="comparisonPriceEquationName" objectPath="ComparisonPriceEquationGroup/PriceEquationGroup" propertyName="name"/>
		
		
		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.updateSummaryDel.connect(priceResources.Singleton.priceListInputOperand, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.priceConstantInputOperand, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.priceListComparisonOperand, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.priceConstantComparisonOperand, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.variableOperand, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.numberOperand, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.equal, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.notEqual, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.lessThan, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.noGreaterThan, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.greaterThan, "onstring");
			this.updateSummaryDel.connect(priceResources.Singleton.noLessThan, "onstring");
			]]>
		</handler>
		
		<method args="e" name="updateSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var valueASummary = this.getValueASummary();
			var valueBSummary = this.getValueBSummary();
			if (valueASummary != "" && valueBSummary != "") {
				this.setSummaryText(valueASummary + "\n" + this.getOperatorSummary() + "\n" + valueBSummary);
			}
			else {
				this.setSummaryText("");
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="e" name="getValueASummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summary = "";
			var inputOperandType = this.resolvedParams.inputOperandType;
			if (inputOperandType == "PriceList") {
				var priceListName = this.getValuesList("inputPriceListName");
				if (priceListName != "") {
					summary = priceResources.Singleton.replaceValues("summary_valueA", [priceListName]);
				}
			}
			else if (inputOperandType == "PriceConstant") {
				var priceConstantName = this.getValuesList("inputPriceConstantName");
				if (priceConstantName != "") {
					summary = priceResources.Singleton.replaceValues("summary_valueA", [priceConstantName]);
				}
			}
			else if (inputOperandType == "PriceEquation") {
				var priceEquationName = this.getValuesList("inputPriceEquationName");
				if (priceEquationName != "") {
					summary = priceResources.Singleton.replaceValues("summary_valueA", [priceEquationName]);
				}
			}
			else if (inputOperandType == "Variable") {
				summary = priceResources.Singleton.summary_variable.string;
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="e" name="getValueBSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summary = "";
			var comparisonOperandType = this.resolvedParams.comparisonOperandType;
			if (comparisonOperandType == "PriceList") {
				var priceListName = this.getValuesList("comparisonPriceListName");
				if (priceListName != "") {
					summary = priceResources.Singleton.replaceValues("summary_valueB", [priceListName]);
				}
			}
			else if (comparisonOperandType == "PriceConstant") {
				var priceConstantName = this.getValuesList("comparisonPriceConstantName");
				if (priceConstantName != "") {
					summary = priceResources.Singleton.replaceValues("summary_valueB", [priceConstantName]);
				}
			}
			else if (comparisonOperandType == "PriceEquation") {
				var priceEquationName = this.getValuesList("comparisonPriceEquationName");
				if (priceEquationName != "") {
					summary = priceResources.Singleton.replaceValues("summary_valueB", [priceEquationName]);
				}
			}
			else if (comparisonOperandType == "Number") {
				summary = GlobalizationUtil.Singleton.formatNumberToDisplayFormat(this.resolvedParams.numericalValue);
			}
			return summary;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="e" name="getOperatorSummary">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			var summary = "";
			var operator = this.resolvedParams.operator;
			switch (operator) {			
				case "=":
					summary = priceResources.Singleton.op_equal.string;
					break;
				case "!=":
					summary = priceResources.Singleton.op_notEqual.string;
					break;
				case "<":
					summary = priceResources.Singleton.op_lessThan.string;
					break;
				case "<=":
					summary = priceResources.Singleton.op_noGreaterThan.string;
					break;
				case ">":
					summary = priceResources.Singleton.op_greaterThan.string;
					break;
				case ">=":
					summary = priceResources.Singleton.op_noLessThan.string;
					break;
			}
			return summary;
			]]>
		</method>
	</FlowElementSummary>
</Definitions>