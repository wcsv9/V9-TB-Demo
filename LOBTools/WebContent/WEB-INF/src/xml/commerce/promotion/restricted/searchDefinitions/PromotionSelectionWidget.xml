<?xml version="1.0" encoding="UTF-8"?>
<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<!--
		@keywords private Promotion Type Selection Widget to display the list of promotion types.
	-->
	<BaseComboBox classDefinition="true" definitionName="cmc/promotion/PromotionSelectionWidget">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="promotionResources" moduleName="cmc/promotion/PromotionResources"/>

		<!--- A reference to the parent content class -->
		<variable name="advancedSearchContent" value="${null}"/>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			if (this.setTypesDel == null) {
				this.setTypesDel = new EventHandler.Class(this, "setTypes");
			}
			this.setTypes();
			]]>
		</method>

		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.setTypesDel) {
				this.setTypesDel.disconnectAll();
				delete this.setTypesDel;
			}
			this.inherited(arguments);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method args="e" name="setTypes">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (this.advancedSearchContent.advancedSearchDialog.open) {
				this.setTypesDel.disconnectAll();
				this.setValues([]);
				var defaultEntry = {};
				defaultEntry.displayName = promotionResources.Singleton.promotionSelectionText_any.string;
				defaultEntry.value = "*";
				this.addValue(defaultEntry);
				this.selectValue(defaultEntry);
				var promotionObjectDefinition = this.advancedSearchContent.oEditor.model.getObjectDefinition(null, "Promotion");
				var promotionTypes = promotionObjectDefinition.propertyDefinitions.promotionType;
				if (promotionTypes.length > 0) {
					var propertyValues = promotionTypes[0].getPropertyValues();
					for (var i = 0; i < propertyValues.length; i++) {
						var promotion = {};
						promotion.displayName = propertyValues[i].getDisplayName(this.setTypesDel);
						promotion.value = propertyValues[i].value;
						this.addValue(promotion);
					}
				}
			}
			else {
				this.setValues([]);
			}
			]]>
		</method>

	</BaseComboBox>
</Definitions>