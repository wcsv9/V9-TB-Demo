<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords private
		
		This class defines an object which contains the message that is to be logged in the Management Center message console.
	-->
	<Node classDefinition="true" definitionName="cmc/shell/MessageObject">
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<!---
			This attribute defines the type of the current message. Valid message types are "STATUS", "ERROR", or
			"EXCEPTION". This is a required attribute.
		-->
		<variable name="messageType" type="string"/>
		<!---
			The message that is displayed to the user. This is a required attribute.
		-->
		<variable name="messageText" type="string"/>
		<!---
			The key of the message that is displayed to the user. This is needed for NL purpose.
			The messageTextKey must be an instance of cmc/foundation/ResourceBundleKey.
		-->
		<variable name="messageTextKey"/>
		<!---
			The model object instance associated with this message.
		-->
		<variable name="modelObject" value="${null}"/>
		<!---
			The model property instance associated with this message.
		-->
		<variable name="modelProperty" value="${null}"/>
		<!---
			The client side validator that reported this message.
		-->
		<variable name="validator" value="${null}"/>
		<!---
			The date when this message object is created.
		-->
		<variable name="createDate" value="${new Date()}"/>
		
		<!---
			Release this message object and make it available for re-use.
		-->
		<method name="release">
			<![CDATA[
			if (this == this.parent.currentStatusMessage) {
				this.parent.currentStatusMessage = null;
				this.parent.refreshMessageLink();
			}
			this.messageType = undefined;
			this.messageText = undefined;
			this.modelObject = null;
			this.modelProperty = null;
			this.validator = null;
			this.changeMessageTextDel.disconnectAll();
			]]>
		</method>
		
		<!---
			Initialize the message object with the specified arguments.
		-->
		<method args="args" name="initializeMessage">
			<![CDATA[
			for (var key in args) {
				this[key] = args[key];
			}
			this.createDate = new Date();
			if (this.messageTextKey) {
				this.changeMessageTextDel.connect(this.messageTextKey, "onstring");
				this.messageText = this.messageTextKey.string;
			}
			]]>
		</method>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.changeMessageTextDel = new EventHandler.Class(this, "changeMessageText");
			this.inherited(arguments);
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.setFocusToErrorComponentDel) {
				this.setFocusToErrorComponentDel.unregisterAll();
				delete this.setFocusToErrorComponentDel;
			}
			this.changeMessageTextDel.disconnectAll();
			delete this.changeMessageTextDel;
			this.inherited(arguments);
			]]>
		</method>
		
		<!---  @keywords private -->
		<method args="objectView" name="registerObjectView">
			<![CDATA[

			]]>
		</method>
		
		<!---  @keywords private -->
		<method args="objectView" name="unregisterObjectView">
			<![CDATA[

			]]>
		</method>
		
		<!---
			Change the messageText string according to the languge selected.
		-->
		<method args="e" name="changeMessageText">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			this.setVariable("messageText", this.messageTextKey.string);
			if (this == this.parent.currentStatusMessage) {
				this.parent.refreshMessageLink();
			}
			]]>
		</method>
		
		<!---  @keywords private -->
		<method args="del" name="isDeleting">
			<![CDATA[
			return false;
			]]>
		</method>
	</Node>

	<!---
		@keywords private
		
		This class defines a logger that manages messages that are generated by the Management Center. There are
		3 types of messages that are supported by this logger which are status messages, validation errors and 
		exceptions.
		
		Use the utility methods provided in this class to log any messages in the message console. See the descriptions
		of logValidationError, logException, and logStatus methods below.
	-->
	<Node classDefinition="true" definitionName="cmc/shell/MessageLoggerClass">
		<dependency localName="SingletonRegistry" moduleName="cmc/foundation/SingletonRegistry"/>
		<dependency localName="ConfigProperties" moduleName="cmc/shell/ConfigProperties"/>
		<dependency localName="ToolsController" moduleName="cmc/shell/ToolsController"/>
		<dependency localName="MessageObject" moduleName="cmc/shell/MessageObject"/>
		<dependency localName="CallbackUtil" moduleName="cmc/foundation/CallbackUtil"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="MessageConsoleDialog" moduleName="cmc/shell/MessageConsoleDialog"/>
		<dependency localName="Logger" moduleName="cmc/shell/Logger"/>
		<dependency localName="AutomationUtil" moduleName="cmc/automation/AutomationUtil"/>
		<dependency localName="Clipboard" moduleName="cmc/foundation/Clipboard"/>

		<!---
			@keywords private
			The handler to the message console dialog instance.
		-->
		<variable name="messageConsoleDialog" value="${null}"/>
		<!---
			@keywords private
			The list of all messages being currently managed.
		-->
		<variable name="messages" value="${[]}"/>
		<!---
			@keywords private
			Indicates that a service request is currently active.
		-->
		<variable name="isProcessRunning" type="boolean" value="false"/>
		<!---
			@keywords private
			The current message being displayed in the Management Center status message area.
		-->
		<variable name="currentStatusMessage" value="${null}"/>
		<!---
			An array of available message object instances. Model object instances are reused.
		-->
		<variable name="availableMessageObjects" value="${[]}"/>
		<!---
			The current number of system messages.
		-->
		<variable name="systemMessageCount" type="number" value="0"/>

		<!---
			This method logs a validation error message. It adds the message to the list in the message
			console, and if requested, displays the message in the status bar.
			
			@param string messageText: message text
			@param cmc/foundation/ModelObject modelObject: model object instance associated with this validation error
			@param cmc/foundation/ModelProperty modelProperty: optional model property instance associated with this validation error
			@param cmc/foundation/Validator validator: Validator that generated this validation message. If the validator is null, then
				is is assumed that this error was reported by a service request.
		-->
		<method args="messageText, modelObject, modelProperty, validator" name="logValidationError">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "logValidationError(messageText, modelObject, modelProperty, validator)", [messageText, modelObject, modelProperty, validator]);
			}
			var message = null;
			if (validator != null) {
				message = this.getLoggedValidationError(modelObject, modelProperty, validator);
			}
			else if (modelObject.updateLogMessagesCallbackAdded) {
				modelObject.updateLogMessagesCallback();
				CallbackUtil.Singleton.cancelCallback(modelObject.updateLogMessagesCallbackDel);
			}
			if (message != null) {
				message.setVariable("messageText", messageText);
				message.setVariable("createDate", new Date());
			}
			else {
				message = this.createMessageObject({
					messageType: "ERROR",
					messageText: messageText,
					modelObject: modelObject,
					modelProperty: modelProperty,
					validator: validator
				});
				this.messages.unshift(message);
			}
			if (validator == null) {
				this.currentStatusMessage = message;
				this.refreshMessageLink();
				if (AutomationUtil.Singleton.active) {
					AutomationUtil.Singleton.logMessage(messageText, (AutomationUtil.Singleton.abortOnError ? "SEVERE" : "WARNING"));
					if (AutomationUtil.Singleton.abortOnError) {
						AutomationUtil.Singleton.abort();
					}
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "logValidationError(messageText, modelObject, modelProperty, validator)");
			}
			]]>
		</method>

		<!---
			Retrieve the validation error message corresponding to the requested combination of parameters 
			provided as input if it is currently in the message console.
			
			@param cmc/foundation/ModelObject modelObject: model object instance
			@param cmc/foundation/ModelProperty modelProperty: optional model property instance
			@param node validator: validator that generated this validation message
		-->
		<method args="modelObject, modelProperty, validator" name="getLoggedValidationError">
			<![CDATA[
			var message = null;
			for (var i = this.messages.length - 1; i >= 0; i--) {
				var m = this.messages[i];
				if (m.modelObject == modelObject && m.modelProperty == modelProperty && m.validator == validator) {
					message = m;
					break;
				}
			}
			return message;
			]]>
		</method>

		<!---
			Clear the specified validation error from the message console.
			
			@param cmc/foundation/ModelObject modelObject: model object that contains the error
			@param cmc/foundation/ModelProperty modelProperty: optional model property instance
			@param node validator: validator that generated this message
		-->
		<method args="modelObject, modelProperty, validator" name="clearValidationError">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearValidationError(modelObject, modelProperty, validator)", [modelObject, modelProperty, validator]);
			}
			for (var i = this.messages.length - 1; i >= 0; i--) {
				var m = this.messages[i];
				if (m.modelObject == modelObject && m.modelProperty == modelProperty && m.validator == validator) {
					this.messages.splice(i, 1);
					this.releaseMessageObject(m);
					if (validator != null) {
						break;
					}
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearValidationError(modelObject, modelProperty, validator)");
			}
			]]>
		</method>
		
		<!---
			Clear the current status message.
		-->
		<method name="clearStatusMessage">
			<![CDATA[
			this.currentStatusMessage = null;
			this.refreshMessageLink();
			]]>
		</method>

		<!---
			This method logs an exception message into the message console. It adds the message to the list 
			in the message console, and displays the message in the status bar.
			
			@param string errorCode: reason code of the exception
			@param string messageText: message text
		-->
		<method args="errorCode, messageText" name="logException">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "logException(errorCode,messageText)", [errorCode, messageText]);
			}
			var message = this.createMessageObject({
				messageType: "EXCEPTION",
				messageText: messageText
			});
			this.messages.unshift(message);
			this.currentStatusMessage = message;
			this.refreshMessageLink();
			if (AutomationUtil.Singleton.active) {
				AutomationUtil.Singleton.logMessage(message.messageText, "SEVERE");
				AutomationUtil.Singleton.abort();
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "logException(errorCode,messageText)");
			}
			]]>
		</method>

		<!---
			This method logs a status message into the message console. Use this method to record a successful 
			service request. The message is also displayed in the status bar.
			
			@param string messageText: message text
			@param cmc/foundation/ResourceBundleKey mesageTextKey: message text resource bundle key
		-->
		<method args="messageText, messageTextKey" name="logStatus">
			<![CDATA[
			if (typeof(messageTextKey) == "undefined") messageTextKey = null;
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "logStatus(messageText, messageTextKey)", [messageText, messageTextKey]);
			}
			var message = this.createMessageObject({
				messageType: "STATUS",
				messageText: messageText,
				messageTextKey: messageTextKey
			});
			this.messages.unshift(message);
			this.currentStatusMessage = message;
			this.refreshMessageLink();
			if (AutomationUtil.Singleton.active) {
				AutomationUtil.Singleton.logMessage(message.messageText);
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "logStatus(messageText, messageTextKey)");
			}
			]]>
		</method>

		<!---
			This method is called when the clear button in message console is clicked, and it clears
			the selected messages in the list. The message bar is updated to show the latest message
			logged through the message logger if the one showing in the bar is cleared.
			
			@param Array selectedMessages: array of cmc/shell/MessageObject instances to be cleared
		-->
		<method args="selectedMessages" name="clear">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clear(selectedMessages)", [selectedMessages]);
			}
			for (var i = 0; i < selectedMessages.length; i++) {
				var m = selectedMessages[i];
				if (m.messageType == "STATUS" || m.messageType == "EXCEPTION") {
					var index = this.messages.indexOf(m);
					if (index != -1) {
						this.messages.splice(index, 1);
					}
					this.releaseMessageObject(m);
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clear(selectedMessages)");
			}
			]]>
		</method>

		<!---
			This method clears all messages logged through the message logger. This is called when
			the user logged out and the application is reset.
		-->
		<method name="clearAll">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearAll");
			}
			while (this.messages.length > 0) {
				this.releaseMessageObject(this.messages.shift());
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearAll");
			}
			]]>
		</method>

		<!---
			This method clears all the messages associated with the specified model object.
			@param cmc/foundation/ModelObject modelObject: model object
		-->
		<method args="modelObject" name="clearModelObjectMessages">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearModelObjectMessages(modelObject)", [modelObject]);
			}
			for (var i = 0; i < this.messages.length; i++) {
				var m = this.messages[i];
				if (m.modelObject == modelObject) {
					this.messages.splice(i, 1);
					this.releaseMessageObject(m);
					i--;
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearModelObjectMessages(modelObject)");
			}
			]]>
		</method>

		<!---
			This method clears all the messages associated with the specified tool.
			@param string toolId: the name of the business object editor
		-->
		<method args="toolId" name="clearToolMessages">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearToolMessages(toolId)", [toolId]);
			}
			for (var i = 0; i < this.messages.length; i++) {
				var m = this.messages[i];
				if (m.modelObject != null && m.modelObject.model.oEditor.name == toolId) {
					this.messages.splice(i, 1);
					this.releaseMessageObject(m);
					i--;
				}
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "clearToolMessages(toolId)");
			}
			]]>
		</method>

		<!---
			This method handles the double-click event on a message list row. When such event occurs,
			the message console will be closed and the properties view associated with the model object
			of the message will be displayed.
			@param cmc/shell/MessageObject message: the message object
		-->
		<method args="message" name="openMessagePropertiesView">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "openMessageView(message)", [message]);
			}
			if (message.modelObject != null) {
				this.messageConsoleDialog.closeWindow();
				var o = message.modelObject.openGroupObject;
				if (ToolsController.Singleton) {
					ToolsController.Singleton.focusTool(o.model.oEditor.name);
				}
				o.objectDefinition.doOpen({
					o: o
				});
				if (typeof (this.setFocusToErrorComponentDel) == "undefined") {
					this.setFocusToErrorComponentDel = new EventHandler.Class(this, "setFocusToErrorComponent");
				}
				CallbackUtil.Singleton.addDeferredCallback(this.setFocusToErrorComponentDel, message, CallbackUtil.Singleton.PRIORITY_FOREGROUND);
			}
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "doMessageConsoleGridDblclick(message)");
			}
			]]>
		</method>
		
		<!---
			@keywords private
			This method will set the focus to the {@link cmc/foundation/PropertiesComponent property component} for the error message that
			was passed in using {@link cmc/foundation/ObjectProperties#setFocusToError}. 
			If this method is not successful in setting the focus, then the focus will be set to the first widget using 
			{@link cmc/foundation/ObjectProperties#setFocusToFirstComponent}.
			
			@param cmc/shell/MessageObject message: the message object
		-->
		<method args="message" name="setFocusToErrorComponent">
			<![CDATA[
			var object = message.modelObject;
			var property = message.modelProperty;
			var validatorType = null;
			if (message.validator != null) {
				validatorType = message.validator.validatorType;
			}
			var detailsView = object.model.oEditor.getDetailsView();
			if (detailsView.o && detailsView.o == object.openGroupObject && detailsView.setFocusToError) {
				if (detailsView.panel && detailsView.panel.activeView == detailsView && detailsView.o != null && object != null) {
					var focusSet = false;
					if (property != null || validatorType != null) {
						focusSet = detailsView.setFocusToError(object, property, validatorType);
					}
					if (!focusSet) {
						detailsView.setFocusToFirstComponent();
					}
				}
			}
			]]>
		</method>
		<!---
			Get a filtered list of messages corresponsing to the input parameters.
			@param Array messageTypes: array of message types
			@param string toolId: the name of the business object editor
			@return Array: filtered array of message objects
		-->
		<method args="messageTypes, toolId" name="getFilteredMessages">
			<![CDATA[
			if (typeof (toolId) == "undefined") {
				toolId = null;
			}
			var filteredMessages = [];
			for (var i = 0; i < this.messages.length; i++) {
				var m = this.messages[i];
				var modelObject = m.modelObject;
				if ((messageTypes.indexOf(m.messageType) != -1) && (toolId == null || (modelObject != null && modelObject.model.oEditor.name == toolId))) {
					filteredMessages.push(m);
				}
			}
			return filteredMessages;
			]]>
		</method>

		<!---
			This method opens the message console dialog and sorts the message list by the date and
			time field by default.
		-->
		<method name="openMessageConsoleDialog">
			<![CDATA[
			if (this.messageConsoleDialog == null) {
				this.messageConsoleDialog = new MessageConsoleDialog.Class();
			}
			this.messageConsoleDialog.openWindow();
			]]>
		</method>

		<!---
			This method updates the message in the status bar of the Management Center with the latest
			message that is logged in the message console.
		-->
		<method name="refreshMessageLink">
			<![CDATA[
			if (Logger.Singleton.enabled) {
				Logger.Singleton.entering("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "refreshMessageLink");
			}
			var newMessageType = "";
			var newMessageText = "";
			if (this.currentStatusMessage != null) {
				newMessageText = this.currentStatusMessage.messageText;
				newMessageType = this.currentStatusMessage.messageType;
			}
			this.updateMessageLinkDisplayText(newMessageType, newMessageText);
			if (Logger.Singleton.enabled) {
				Logger.Singleton.exiting("com.ibm.commerce.lobtools.foundation.shell", "cmc/shell/MessageLoggerClass", "refreshMessageLink");
			}
			]]>
		</method>

		<!---
			This method is called when a server process starts. Message will be posted to the status
			bar to indicator this event.
		-->
		<method name="serverProcessStart">
			<![CDATA[
			this.isProcessRunning = true;
			this.updateProcessingMsg();
			]]>
		</method>

		<!---
			This method is called when the processing message is updated.
		-->
		<method name="updateProcessingMsg">
			<![CDATA[
			if (this.isProcessRunning) {
				SingletonRegistry.messageLink.setDisplayText("STATUS", SingletonRegistry.progressIndicator.messageText);
			}
			]]>
		</method>
		
		<!---
			This method is called when all server processes completed. Message will be posted to the status
			bar to indicator this event.
		-->
		<method name="serverProcessComplete">
			<![CDATA[
			this.isProcessRunning = false;
			this.refreshMessageLink();
			]]>
		</method>

		<!--- 
			@keywords private 
			
			Updates the status bar message text with the provided input parameters.
			@param Array messageType: a message type
			@param string messageText: message text
		-->
		<method args="messageType, messageText" name="updateMessageLinkDisplayText">
			<![CDATA[
			if (!this.isProcessRunning) {
				SingletonRegistry.messageLink.setDisplayText(messageType, messageText);
			}
			]]>
		</method>
		
		<!---
			Returns a message object instance primed with the specified arguments. This may
			be a new or recycled instance.
			@param {} args: The initialization arguments
			@return cmc/shell/MessageObject: the message object
		-->
		<method args="args" name="createMessageObject">
			<![CDATA[
			if (args.messageType == "STATUS" || args.messageType == "EXCEPTION") {
				this.systemMessageCount++;
			}
			if (this.systemMessageCount > ConfigProperties.Singleton.maximumSystemMessages) {
				for (var i = this.messages.length - 1; i >= 0; i--) {
					var m = this.messages[i];
					if (m.messageType == "STATUS" || m.messageType == "EXCEPTION") {
						this.messages.splice(i, 1);
						this.releaseMessageObject(m);
						break;
					}
				}
			}
			var o;
			if (this.availableMessageObjects.length > 0) {
				o = this.availableMessageObjects.pop();
			}
			else {
				o = new MessageObject.Class(this);
			}
			o.initializeMessage(args);
			return o;
			]]>
		</method>
		
		<!---
			Release the specified message object for future re-use.
			@param cmc/shell/MessageObject o: the message object to release
		-->
		<method args="o" name="releaseMessageObject">
			<![CDATA[
			if (o.messageType == "STATUS" || o.messageType == "EXCEPTION") {
				this.systemMessageCount--;
			}
			o.release();
			this.availableMessageObjects.push(o);
			]]>
		</method>

		<!---
			This method is called when the copy button in message console is clicked, and it copies
			all the contents of the selected messages in the list to the clip board. Once in the clip
			board the messages can be pasted anywhere the user wants.
			
			@param Array selectedMessages: array of cmc/shell/MessageObject instances to be copied
		-->
		<method args="selectedMessages" name="copyMessageToClipBoard">
			<![CDATA[
			var clipboardString = "";
			for (var i = 0; i < selectedMessages.length; i++) {
				var m = selectedMessages[i];
				clipboardString = clipboardString + (m.messageType + ": " + m.messageText + " -- " + m.createDate + "\n");
			}
			if (clipboardString != "") {
				Clipboard.copy(clipboardString);
			}
			]]>
		</method>
		
	</Node>

</Definitions>