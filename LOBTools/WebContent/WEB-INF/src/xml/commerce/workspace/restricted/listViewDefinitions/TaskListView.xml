<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>
	<!---
		@keywords private
		This class displays the contents and characteristics of a list of {@link cmc/workspace/Task Task}.
	-->
	<ObjectGrid definitionName="cmc/workspace/TaskGrid" preferenceKey="wspTaskGrid">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
		<GridIconTypeImage name="type" propertyName="" required="true" text="${workspaceResources.type}" width="60"/>
		<GridText editable="false" name="taskIdentifier" propertyName="taskIdentifier" required="true" text="${workspaceResources.taskIdentifier}" width="140"/>
		<GridTaskStatus enableFilter="true" name="status" package="cmc/workspace" text="${workspaceResources.status}" width="80"/>
		<GridText editable="false" name="taskName" propertyName="taskName" text="${workspaceResources.taskName}" width="180"/>
		<GridDate editable="false" name="dueDate" propertyName="dueDate" text="${workspaceResources.dueDate}"/>
		<GridDate editable="false" name="completionDate" propertyName="completionDate" text="${workspaceResources.completionDate}" visible="false"/>
		<GridDate editable="false" name="approvalDate" propertyName="approvalDate" text="${workspaceResources.approvalDate}" visible="false"/>
		<GridDisplayName editable="false" enableFilter="true" name="taskGroup" parentObject="true" parentType="TaskGroup" propertyName="" text="${workspaceResources.taskGroup}" width="180"/>
		<GridDisplayName editable="false" enableFilter="true" name="wrkspcName" parentObject="true" parentType="Workspace" propertyName="" text="${workspaceResources.workspace}" width="180"/>
	</ObjectGrid>

	<ObjectGrid definitionName="cmc/workspace/ChildTaskGrid" preferenceKey="wspChildTaskGrid">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
		<GridIconTypeImage name="type" propertyName="" required="true" text="${workspaceResources.type}" width="60"/>
		<GridText editable="false" name="taskIdentifier" objectPath="Task" propertyName="taskIdentifier" required="true" text="${workspaceResources.taskIdentifier}" width="140"/>
		<GridTaskStatus enableFilter="true" name="status" objectPath="Task" package="cmc/workspace" text="${workspaceResources.status}" width="80"/>
		<GridText name="taskName" objectPath="Task" propertyName="taskName" text="${workspaceResources.taskName}" width="180"/>
		<GridDate name="dueDate" objectPath="Task" propertyName="dueDate" text="${workspaceResources.dueDate}"/>
		<GridDate editable="false" name="completionDate" objectPath="Task" propertyName="completionDate" text="${workspaceResources.completionDate}" visible="false"/>
		<GridDate editable="false" name="approvalDate" objectPath="Task" propertyName="approvalDate" text="${workspaceResources.approvalDate}" visible="false"/>
		<GridDisplayName editable="false" enableFilter="true" name="taskGroup" parentObject="true" parentType="TaskGroup" propertyName="" text="${workspaceResources.taskGroup}" width="180"/>
		<GridDisplayName editable="false" enableFilter="true" name="wrkspcName" parentObject="true" parentType="Workspace" propertyName="" text="${workspaceResources.workspace}" width="180"/>
	</ObjectGrid>

	<ObjectGrid definitionName="cmc/workspace/TaskSearchResultGrid" preferenceKey="wspTaskSearchResultGrid">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
		<GridIconTypeImage name="type" propertyName="" required="true" text="${workspaceResources.type}" width="60"/>
		<GridText editable="false" name="taskIdentifier" propertyName="taskIdentifier" required="true" text="${workspaceResources.taskIdentifier}" width="140"/>
		<GridTaskStatus enableFilter="true" name="status" package="cmc/workspace" text="${workspaceResources.status}" width="80"/>
		<GridText editable="false" name="taskName" propertyName="taskName" text="${workspaceResources.taskName}" width="180"/>
		<GridDate editable="false" name="dueDate" propertyName="dueDate" text="${workspaceResources.dueDate}"/>
		<GridDate editable="false" name="completionDate" propertyName="completionDate" text="${workspaceResources.completionDate}" visible="false"/>
		<GridDate editable="false" name="approvalDate" propertyName="approvalDate" text="${workspaceResources.approvalDate}" visible="false"/>
		<GridDisplayName editable="false" enableFilter="true" name="taskGroup" parentObject="true" parentType="TaskGroup" propertyName="" text="${workspaceResources.taskGroup}" width="180"/>
		<GridDisplayName editable="false" enableFilter="true" name="wrkspcName" parentObject="true" parentType="Workspace" propertyName="" text="${workspaceResources.workspace}" width="180"/>
	</ObjectGrid>

	<ChildListEditor definitionName="cmc/workspace/TaskGridEditor" listDefinition="cmc/workspace/ChildTaskGrid" objectTypes="ChildTask"/>

	<NavigationListDefinition definitionName="cmc/workspace/TaskGridChildList" displayName="${workspaceResources.taskList}" listDefinition="cmc/workspace/TaskGridEditor" listTitle="${workspaceResources.taskList}">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
	</NavigationListDefinition>

	<!---
		@keywords private
	-->
	<ChildListEditor definitionName="cmc/workspace/ToDoTaskGridEditor" listDefinition="cmc/workspace/TaskGrid" objectTypes="Task[status=TODO],Task[status=REDO]"/>

	<!---
		@keywords private
	-->
	<ChildListEditor definitionName="cmc/workspace/CompletedTaskGridEditor" listDefinition="cmc/workspace/TaskGrid" objectTypes="Task[status=COMPLETED]"/>

	<!---
		@keywords private
	-->
	<ChildListEditor definitionName="cmc/workspace/ApprovedTaskGridEditor" listDefinition="cmc/workspace/TaskGrid" objectTypes="Task[status=APPROVED]"/>

	<!---
		@keywords private
	-->
	<ChildListEditor definitionName="cmc/workspace/CanceledTaskGridEditor" listDefinition="cmc/workspace/TaskGrid" objectTypes="Task[status=CANCELLED]"/>

	<!---
		@keywords private
		This navigation list definition is used to display {@link cmc/workspace/ToDoTasksTop ToDoTasksTop}.
	-->
	<NavigationListDefinition definitionName="cmc/workspace/ToDoTaskGridChildList" displayName="${workspaceResources.taskList}" helpLink="tasks/twoworktaskwm.htm" listDefinition="cmc/workspace/ToDoTaskGridEditor" listTitle="${workspaceResources.taskList}">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
	</NavigationListDefinition>

	<!---
		@keywords private
		This navigation list definition is used to display {@link cmc/workspace/CompletedTasksTop CompletedTasksTop}.
	-->
	<NavigationListDefinition definitionName="cmc/workspace/CompletedTaskGridChildList" displayName="${workspaceResources.taskList}" helpLink="tasks/twoworktaskwm.htm" listDefinition="cmc/workspace/CompletedTaskGridEditor" listTitle="${workspaceResources.taskList}">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
	</NavigationListDefinition>

	<!---
		@keywords private
		This navigation list definition is used to display {@link cmc/workspace/ApprovedTasksTop ApprovedTasksTop}.
	-->
	<NavigationListDefinition definitionName="cmc/workspace/ApprovedTaskGridChildList" displayName="${workspaceResources.taskList}" helpLink="tasks/twoworktaskwm.htm" listDefinition="cmc/workspace/ApprovedTaskGridEditor" listTitle="${workspaceResources.taskList}">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
	</NavigationListDefinition>

	<!---
		@keywords private
		This navigation list definition is used to display {@link cmc/workspace/CanceledTasksTop CanceledTasksTop}.
	-->
	<NavigationListDefinition definitionName="cmc/workspace/CanceledTaskGridChildList" displayName="${workspaceResources.taskList}" helpLink="tasks/twoworktaskwm.htm" listDefinition="cmc/workspace/CanceledTaskGridEditor" listTitle="${workspaceResources.taskList}">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
	</NavigationListDefinition>


	<!---
		@keywords private
		This class defines a grid column for status property of {@link cmc/workspace/Task Task}.
	-->
	<GridColumn alignment="center" cellViewerClass="${GridTaskStatusImageViewer}" classDefinition="true" definitionName="cmc/workspace/GridTaskStatus" editable="false">
		<dependency localName="GridTaskStatusImageViewer" moduleName="cmc/workspace/GridTaskStatusImageViewer"/>
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
		<dependency localName="ContextUtil" moduleName="cmc/foundation/ContextUtil"/>
		<!---
			@keywords private
			Gets the column filter display value.
			@param cmc/foundation/ModelObject o: the model object instance
		-->
		<method args="o" name="getColumnFilterDisplayValue">
			<![CDATA[
			var cellDescriptor = this.getCellDescriptor(o);
			if (cellDescriptor) {
				var statusValue = o.getPropertyValue("status", cellDescriptor.objectPath);
				switch (statusValue) {				
					case "TODO":
						if (o.getPropertyValue("taskIdentifier", cellDescriptor.objectPath) != ContextUtil.Singleton.findContextValue(null, "workspaceTask").value) {
							var usageValue = o.getPropertyValue("usage", cellDescriptor.objectPath);
							if (usageValue == "1") {
								return workspaceResources.Singleton.todoTasks.string;
							}
							else if (usageValue == "2") {
								return workspaceResources.Singleton.pendingApprovalTasks.string;
							}
						}
						else {
							return workspaceResources.Singleton.workingTasks.string;
						}
						break;
					case "REDO":
						if (o.getPropertyValue("taskIdentifier", cellDescriptor.objectPath) != ContextUtil.Singleton.findContextValue(null, "workspaceTask").value) {
							var usageValue = o.getPropertyValue("usage", cellDescriptor.objectPath);
							if (usageValue == "1") {
								return workspaceResources.Singleton.redoTasks.string;
							}
							else if (usageValue == "2") {
								return workspaceResources.Singleton.pendingApprovalTasks.string;
							}
						}
						else {
							return workspaceResources.Singleton.workingTasks.string;
						}
						break;
					case "INACTIVE":
						return workspaceResources.Singleton.taskGroupStatusInactive.string;
					case "COMPLETED":
						return workspaceResources.Singleton.completedTasks.string;
					case "APPROVED":
						return workspaceResources.Singleton.approvedTasks.string;
					case "CANCELLED":
						return workspaceResources.Singleton.canceledTasks.string;
				}
			}
			]]>
		</method>
	</GridColumn>

	<!---
		@keywords private
		Viewer class for cmc/workspace/GridTaskStatus which displays the appropriate image for task status.
	-->
	<Component classDefinition="true" definitionName="cmc/workspace/GridTaskStatusImageViewer">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
		<dependency localName="EventHandler" moduleName="cmc/foundation/EventHandler"/>
		<dependency localName="ContextUtil" moduleName="cmc/foundation/ContextUtil"/>
		<dependency localName="EventUtil" moduleName="cmc/foundation/EventUtil"/>
		<!--- @keywords private -->
		<variable name="icon" type="string" value="${null}"/>
		<!--- @keywords private -->
		<variable name="o" value="${null}"/>

		<!--- @keywords private -->
		<method name="init">
			<![CDATA[
			this.inherited(arguments);
			this.updateIcon();
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			if (this.updateIconDel) {
				this.updateIconDel.disconnectAll();
				delete this.updateIconDel;
			}
			this.inherited(arguments);
			]]>
		</method>

		<!---
			@keywords private
			Sets the model object for this viewer.
			@param cmc/foundation/ModelObject newModelObject: The new model object instance.
		-->
		<method args="newModelObject" name="setModelObject">
			<![CDATA[
			if (newModelObject != this.o) {
				this.o = newModelObject;
				this.updateIcon();
			}
			]]>
		</method>

		<!---
			@keywords private
			Updates the icon image for this column when the registered event(s) is triggered.
		-->
		<method args="e" name="updateIcon">
			<![CDATA[
			if (typeof(e) == "undefined") e = null;
			if (typeof (this.updateIconDel) == "undefined") {
				this.updateIconDel = new EventHandler.Class(this, "updateIcon");
			}
			this.updateIconDel.disconnectAll();
			if (this.o) {
				this.updateIconDel.connect(this.o.getProperty("status"), "onvalue");
				this.updateIconDel.connect(this.o.getProperty("usage"), "onvalue");
				this.updateIconDel.connect(ContextUtil.Singleton.findContextValue(null, "workspaceTask"), "onvalue");
			}
			var resourceBundleKey = null;
			if (this.o != null) {
				var statusValue = this.o.getPropertyValue("status");
				switch (statusValue) {				
					case "TODO":
						if (this.o.getPropertyValue("taskIdentifier") != ContextUtil.Singleton.findContextValue(null, "workspaceTask").value) {
							var usageValue = this.o.getPropertyValue("usage");
							if (usageValue == "1") {
								this.setVariable("icon", "todoIcon");
								resourceBundleKey = workspaceResources.Singleton.todoTasks;
							}
							else if (usageValue == "2") {
								this.setVariable("icon", "pendingApprovalIcon");
								resourceBundleKey = workspaceResources.Singleton.pendingApprovalTasks;
							}
						}
						else {
							this.setVariable("icon", "workingIcon");
							resourceBundleKey = workspaceResources.Singleton.workingTasks;
						}
						break;
					case "REDO":
						if (this.o.getPropertyValue("taskIdentifier") != ContextUtil.Singleton.findContextValue(null, "workspaceTask").value) {
							var usageValue = this.o.getPropertyValue("usage");
							if (usageValue == "1") {
								this.setVariable("icon", "redoIcon");
								resourceBundleKey = workspaceResources.Singleton.redoTasks;
							}
							else if (usageValue == "2") {
								this.setVariable("icon", "pendingApprovalIcon");
								resourceBundleKey = workspaceResources.Singleton.pendingApprovalTasks;
							}
						}
						else {
							this.setVariable("icon", "workingIcon");
							resourceBundleKey = workspaceResources.Singleton.workingTasks;
						}
						break;
					case "INACTIVE":
						this.setVariable("icon", "taskGroupInactiveIcon");
						resourceBundleKey = workspaceResources.Singleton.taskGroupStatusInactive;
						break;
					case "COMPLETED":
						this.setVariable("icon", "completedIcon");
						resourceBundleKey = workspaceResources.Singleton.completedTasks;
						break;
					case "APPROVED":
						this.setVariable("icon", "approvedIcon");
						resourceBundleKey = workspaceResources.Singleton.approvedTasks;
						break;
					case "CANCELLED":
						this.setVariable("icon", "canceledIcon");
						resourceBundleKey = workspaceResources.Singleton.canceledTasks;
						break;
					default:
						this.setVariable("icon", null);
				}
			}
			if (resourceBundleKey != null) {
				if (typeof (this.display) != "undefined") {
					this.display.tip.setVariable("text", resourceBundleKey.string);
				}
				this.updateIconDel.connect(resourceBundleKey, "onstring");
			}
			else {
				if (typeof (this.display) != "undefined") {
					this.display.tip.setVariable("text", "");
				}
			}
			]]>
		</method>
		
		<Component clickable="true" imageSet="${this.classroot.icon}" name="display" stretches="both" visible="${this.classroot.icon ? true : false}" currentImage="${this.classroot.parent.row.selected ? 2 : 1}">
			<Tooltip name="tip"/>

			<handler name="onclick">
				<![CDATA[
				EventUtil.trigger(this.parent.parent, "onclick");
				]]>
			</handler>

			<handler name="ondblclick">
				<![CDATA[
				EventUtil.trigger(this.parent.parent, "ondblclick");
				]]>
			</handler>
		</Component>
		<method args="o" name="set_o">
			<![CDATA[
			this.setModelObject(o);
			]]>
		</method>
	</Component>
</Definitions>