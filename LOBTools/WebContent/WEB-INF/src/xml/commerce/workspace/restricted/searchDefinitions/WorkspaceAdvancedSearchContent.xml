<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2015, 2016 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<Definitions>

	<!---
		<p>
		Class definition for the advanced search class for task and task group.
		This class extends from the cmc/foundation/AdvancedSearchContent class and is in charge of building the 
		user interface for gathering the input from the user to perform the advanced search.
		</p>
		
		<p>
		As required by extending the cmc/foundation/AdvancedSearchContent, a setSearchOptions method is
		implemented to set the searchOptions attribute of the super class. The searchOptions is an
		object that contains the name/value pairs that will be sent to the search service.
		</p>
		
		<p>
		This search is used to find the following:
		{@link cmc/workspace/TaskPrimaryObjectDefinition Task}
		</p>
		
		<p>			
		Search parameters incuded in this class : 
			<ol>
				<li> taskCode - Represents the uniqueId of the task.
				<li> taskName - Represents the name of the task.
				<li> dueDateFrom - Represents beginning of the task dueDate.
				<li> dueDateTo - Represents end of the task dueDate.
				<li> taskStatus - Represents the status of the task.
			</ol>
		</p>									  
		
		<p>
		If this class is extended to append some extra search parameters, you must also write the
		setSearchOptions method that calls the this.inherited(arguments) and then appends the new
		extra search parameters to the searchOptions attribute.
		</p>
	-->
	<AdvancedSearchContent classDefinition="true" definitionName="cmc/workspace/TaskAdvancedSearchContent">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>

		<AxisLayout axis="y"/>
		<Component height="15"/>
		<!-- Instructional text to the user -->
		<TextComponent multiline="true" text="${workspaceResources.Singleton.searchInstructionalText.string}" width="${this.parent.section2.width}"/>
		<Component height="20"/>
		<Component name="section2">
			<AxisLayout axis="x" spacing="35"/>
			<Component name="section2_1">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.taskIdentifier.string}"/>
				<InputText name="taskCode" width="180"/>
			</Component>
			<Component name="section2_2">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.taskName.string}"/>
				<InputText name="taskName" width="180"/>
			</Component>
		</Component>
		<Component height="15"/>
		<Component height="1" bgcolor="#d0d0d0" width="${this.parent.section2.width}"/>
		<Component height="15"/>
		<TextComponent text="${workspaceResources.Singleton.dueDate.string}"/>
		<Component name="section5_2">
			<AxisLayout axis="x" spacing="35"/>
			<Component name="section5_2_1">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.dueDateFromSearchPrompt.string}"/>
				<DatePicker name="dueDateFrom" width="180"/>
			</Component>
			<Component name="section5_2_2">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.dueDateToSearchPrompt.string}"/>
				<DatePicker name="dueDateTo" width="180"/>
			</Component>
		</Component>			
		<Component height="15"/>
		<Component height="1" bgcolor="#d0d0d0" width="${this.parent.section2.width}"/>
		<Component height="15"/>
		<!-- 
			Radio Button Group for taskStatus search param. 
			Options: 1) To search task with all status 
					 2) To specify one or more particular status - This would list the different types to select from. 
		-->
		<BaseRadioGroup name="taskStatus">
		    <BaseRadioButton selected="true" text="${workspaceResources.Singleton.searchStatusAll.string}" value="1"/>
		    <BaseRadioButton text="${workspaceResources.Singleton.searchStatus.string}" value="2"/>
		</BaseRadioGroup>
		<State active="${this.immediateParent.taskStatus.value == 2}" name="state0"/>
		<Component height="10" visible="${this.parent.state0.active}"/>
		<Component name="section6_1" visible="${this.parent.state0.active}" x="35">
			<BaseCheckbox name="typeInactive" text="${workspaceResources.Singleton.taskGroupStatusInactive.string}" width="180"/>
			<BaseCheckbox name="typeWorking" text="${workspaceResources.Singleton.workingTasks.string}" width="180" x="180"/>
		</Component>
		<Component name="section6_2" visible="${this.parent.state0.active}" x="35">
			<BaseCheckbox name="typeCompleted" text="${workspaceResources.Singleton.completedTasks.string}" width="180"/>
		</Component>
		<!---
			Construct the search options for the tasks advanced search.
		-->
		<method name="setSearchOptions">
			<![CDATA[
			this.inherited(arguments);
			var newSearchOptions = {};
			newSearchOptions.taskCode = this.section2.section2_1.taskCode.getText();
			newSearchOptions.taskName = this.section2.section2_2.taskName.getText();
			newSearchOptions.wrongDate = 'false';
			var date1 = this.section5_2.section5_2_1.dueDateFrom.getDate();
			if (date1 != null) {
				newSearchOptions.dueDateFrom = DateUtil.Singleton.format(date1, DateUtil.Singleton.DATE_ONLY_FORMAT);
			}
			else if (this.section5_2.section5_2_1.dueDateFrom.getDateString() != '') {
				newSearchOptions.wrongDate = 'true';
			}
			var date2 = this.section5_2.section5_2_2.dueDateTo.getDate();
			if (date2 != null) {
				newSearchOptions.dueDateTo = DateUtil.Singleton.format(date2, DateUtil.Singleton.DATE_ONLY_FORMAT);
			}
			else if (this.section5_2.section5_2_2.dueDateTo.getDateString() != '') {
				newSearchOptions.wrongDate = 'true';
			}
			newSearchOptions.taskStatus = this.taskStatus.getValue();
			if (newSearchOptions.taskStatus == 2) {
				newSearchOptions.typeInactive = this.section6_1.typeInactive.getValue();
				newSearchOptions.typeWorking = this.section6_1.typeWorking.getValue();
				newSearchOptions.typeCompleted = this.section6_2.typeCompleted.getValue();
			}
			this.searchOptions = newSearchOptions;
			]]>
		</method>
	</AdvancedSearchContent>

	<!---
		<p>
		Class definition for the advanced search class for TaskGroups.
		This class extends from the cmc/foundation/AdvancedSearchContent class and is in charge of building the 
		user interface for gathering the input from the user to perform the advanced search.
		<p>
		
		<p>
		As required by extending the cmc/foundation/AdvancedSearchContent, a setSearchOptions method is
		implemented to set the searchOptions attribute of the super class. The searchOptions is an
		object that contains the name/value pairs that will be sent to the search service.
		<p>
		
		<p>
		This search is used to find the following:
		{@link cmc/workspace/TaskGrouupPrimaryObjectDefinition TaskGroup}
		</p>
		
		<p>
		Search parameters incuded in this class : 
			<ol>
				<li> taskGroupCode - Represents the uniqueId of the task group.
				<li> taskGroupName - Represents the name of the task group.
				<li> dueDateFrom - Represents beginning of the task dueDate.
				<li> dueDateTo - Represents end of the task dueDate.
				<li> taskGroupStatus - Represents the status of the task group.				
			</ol>
		</p>
		
		<p>
		If this class is extended to append some extra search parameters, you must also write the
		setSearchOptions method that calls the this.inherited(arguments) and then appends the new
		extra search parameters to the searchOptions attribute.
		</p>
	-->
	<AdvancedSearchContent classDefinition="true" definitionName="cmc/workspace/TaskGroupAdvancedSearchContent">
		<dependency localName="workspaceResources" moduleName="cmc/workspace/WorkspaceResources"/>
		<dependency localName="DateUtil" moduleName="cmc/foundation/DateUtil"/>
			
		<AxisLayout axis="y"/>
		<Component height="15"/>
		<!-- Instructional text to the user -->
		<TextComponent multiline="true" text="${workspaceResources.Singleton.searchInstructionalText.string}" width="${this.parent.section2.width}"/>
		<Component height="20"/>
		<Component name="section2">
			<AxisLayout axis="x" spacing="35"/>
			<Component name="section2_1">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.taskIdentifier.string}"/>
				<InputText name="taskGroupCode" width="180"/>
			</Component>
			<Component name="section2_2">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.taskGroupName.string}"/>
				<InputText name="taskGroupName" width="180"/>
			</Component>
		</Component>		
		<Component height="15"/>
		<Component height="1" bgcolor="#d0d0d0" width="${this.parent.section2.width}"/>
		<Component height="15"/>
		<TextComponent text="${workspaceResources.Singleton.dueDate.string}"/>
		<Component name="section5_2">
			<AxisLayout axis="x" spacing="35"/>
			<Component name="section5_2_1">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.dueDateFromSearchPrompt.string}"/>
				<DatePicker name="dueDateFrom" width="180"/>
			</Component>
			<Component name="section5_2_2">
				<AxisLayout axis="y"/>
				<TextComponent text="${workspaceResources.Singleton.dueDateToSearchPrompt.string}"/>
				<DatePicker name="dueDateTo" width="180"/>
			</Component>
		</Component>
		<Component height="15"/>
		<Component height="1" bgcolor="#d0d0d0" width="${this.parent.section2.width}"/>
		<Component height="15"/>
		<!-- 
			Radio Button Group for taskStatus search param. 
			Options: 1) To search task with all status 
					 2) To specify one or more particular status - This would list the different types to select from.
		-->
		<BaseRadioGroup name="taskGroupStatus">
		    <BaseRadioButton selected="true" text="${workspaceResources.Singleton.searchStatusAll.string}" value="1"/>
		    <BaseRadioButton text="${workspaceResources.Singleton.searchStatus.string}" value="2"/>
		</BaseRadioGroup>
		<State active="${this.immediateParent.taskGroupStatus.value == 2}" name="state0"/>
		<Component height="10" visible="${this.parent.state0.active}"/>
		<Component name="section6_1" visible="${this.parent.state0.active}" x="35">
			<AxisLayout axis="y"/>
			<Component name="section6_1_1" width="${this.immediateParent.width}">
				<BaseCheckbox name="typeInactive" text="${workspaceResources.Singleton.taskGroupStatusInactive.string}" width="180"/>
				<BaseCheckbox name="typeWorking" text="${workspaceResources.Singleton.workingTasks.string}" width="180" x="180"/>
			</Component>
			<Component name="section6_1_2" width="${this.immediateParent.width}">
				<BaseCheckbox name="typeCompleted" text="${workspaceResources.Singleton.completedTasks.string}" width="180"/>
				<BaseCheckbox name="typeApproved" text="${workspaceResources.Singleton.approvedTasks.string}" width="180" x="180"/>
			</Component>
			<Component name="section6_1_3" width="${this.immediateParent.width}">
				<BaseCheckbox name="typeCanceled" text="${workspaceResources.Singleton.canceledTasks.string}" width="180"/>
				<BaseCheckbox name="typeReadyForApprove" text="${workspaceResources.Singleton.taskGroupStatusReadyForApproval.string}" x="180"/>
			</Component>						
		</Component>

		<!---
			Construct the search options for the taskgroups advanced search.
		-->
		<method name="setSearchOptions">
			<![CDATA[
			this.inherited(arguments);
			var newSearchOptions = {};
			newSearchOptions.taskGroupCode = this.section2.section2_1.taskGroupCode.getText();
			newSearchOptions.taskGroupName = this.section2.section2_2.taskGroupName.getText();
			newSearchOptions.wrongDate = 'false';
			var date1 = this.section5_2.section5_2_1.dueDateFrom.getDate();
			if (date1 != null) {
				newSearchOptions.dueDateFrom = DateUtil.Singleton.format(date1, DateUtil.Singleton.DATE_ONLY_FORMAT);
			}
			else if (this.section5_2.section5_2_1.dueDateFrom.getDateString() != '') {
				newSearchOptions.wrongDate = 'true';
			}
			var date2 = this.section5_2.section5_2_2.dueDateTo.getDate();
			if (date2 != null) {
				newSearchOptions.dueDateTo = DateUtil.Singleton.format(date2, DateUtil.Singleton.DATE_ONLY_FORMAT);
			}
			else if (this.section5_2.section5_2_2.dueDateTo.getDateString() != '') {
				newSearchOptions.wrongDate = 'true';
			}
			newSearchOptions.taskGroupStatus = this.taskGroupStatus.getValue();
			if (newSearchOptions.taskGroupStatus == 2) {
				newSearchOptions.typeInactive = this.section6_1.section6_1_1.typeInactive.getValue();
				newSearchOptions.typeWorking = this.section6_1.section6_1_1.typeWorking.getValue();
				newSearchOptions.typeReadyForApprove = this.section6_1.section6_1_3.typeReadyForApprove.getValue();
				newSearchOptions.typeCompleted = this.section6_1.section6_1_2.typeCompleted.getValue();
				newSearchOptions.typeApproved = this.section6_1.section6_1_2.typeApproved.getValue();
				newSearchOptions.typeCanceled = this.section6_1.section6_1_3.typeCanceled.getValue();
			}
			this.searchOptions = newSearchOptions;
			]]>
		</method>
	</AdvancedSearchContent>		
</Definitions>