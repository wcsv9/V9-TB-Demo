#
#-------------------------------------------------------------------
# Licensed Materials - Property of IBM
#
# WebSphere Commerce
#
# (c) Copyright IBM Corp. 2008
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#-------------------------------------------------------------------
#

# NLS_MESSAGEFORMAT_ALL
# NLS_ENCODING=ANSI

#bootstrap messages
EDP_BOOTSTRAP_EDP=Event-driven payments has been started.
EDP_BOOTSTRAP_OMF=Object Model Facade has been initialized.
EDP_BOOTSTRAP_REFUND_FACADE=Refund Model Facade has been initialized.
EDP_BOOTSTRAP_ACTIVITY_LOGGER=Activity Logger Accessor has been initialized.
EDP_BOOTSTRAP_QUERY_HANDLER=Query Handler has been initialized.
EDP_BOOTSTRAP_PAYMENTS_ACCESSOR=Payments Accessor has been initialized.
EDP_BOOTSTRAP_TOOLKIT_MODE = Event-driven payments/Payment Plug-in Controller Toolkit Mode: No background threads and no bean-managed transactions.

#Configuration Service messages
EDP_GLOBAL_CONFIGURATION_LOAD_FAILED = The loading of the global configuration file for event-driven payments failed. Ensure that the file exists and is valid.
EDP_PAYMENT_METHOD_CONFIG_NOT_FOUND = Cannot find the requested payment/refund method configuration {0}. Payment group id is {1}.
EDP_PAYMENT_METHOD_CONFIG_NOT_FOUND_BY_PAYMENT_METHOD = Cannot find the configuration for payment/refund method {0}. Payment group id is {1}.
EDP_NULL_PAYMENT_GROUP_NAME_DEFAULT_INSTEAD = The event-driven payments configuration service received a null payment configuration group, will use default group instead.
EDP_REQUESTED_PAYMENT_GROUP_NOT_FOUND_DEFAULT_INSTEAD = The event-driven payments configuration service could not find the required payment configuration group. It will use the default group instead. Required payment configuration group ID is {0}.
EDP_PAYMENT_METHOD_NOT_FOUND_IN_MAPPINGSERVICE = Payment/refund method {0} cannot be found in payment configuration {1}.
EDP_DUPLICATE_PAYMENT_METHOD_IN_ONE_PAYMENT_MAPPING_FILE = For event-driven payments configuration {0}, there are more than one mappings with the same payment method defined in {1} in PaymentMappings.xml.
EDP_DUPLICATE_REFUND_METHOD_IN_ONE_REFUND_MAPPING_FILE = For event-driven payments configuration {0}, there are more than one mappings with the same refund method defined in {1} in RefundMappings.xml.
EDP_DUPLICATE_PAYMENT_RULE_IN_ONE_PAYMENT_RULE_FILE = For event-driven payments configuration {0}, there are more than one payment rules with the same name {1} in PaymentRules.xml.
EDP_CONFIG_FILES_NOT_FOUND_IN_SPECIFIED_FOLDER = Could not find or load event-driven payments configuration files in the folder {0}.
EDP_PLUGIN_CONFIG_FILES_NOT_FOUND_IN_SPECIFIED_FOLDER = Could not find plug-in configuration files in the specified folder {0}.
EDP_FILE_MISSING = {0} is missing for payment group {1}
EDP_INVALID_TARGET_STATUS_IN_PAYMENT_RULES_FILE={0} is not a valid target state.  Check the PaymentRules.xml file for the configuration {1}.
EDP_PAYMENT_RULE_STATUS_NOT_REASONABLE=For event-driven payments configuration {0}, the taget states defined for payment rule {1} are not reasonable in PaymentRules.xml.

#general/misc messages
EDP_BG_THREAD_EXCEPTION = Event-driven payments caught an exception in a background thread. Exception details: {0}.
EDP_NULL_PARAMETER_NOT_ALLOWED = Null parameter {0} is not allowed.
EDP_RESOURCEBUNDLE_NOT_FOUND = Resource bundle {0} cannot be found.
EDP_INVALID_PARAMETER = Invalid value {0} was specified for parameter {1}.

#Tickler messages
EDP_SEND_TICKLER_FAILED = Send tickler to queue failed. Exception details: {0}.
EDP_TICKLER_CONTENT = Event-driven payments tickler content: {0}

# Query Handler messages
EDP_QH_COULD_NOT_DRILL_DOWN_ERROR_CODE = Could not identify error code with message key {0}.
EDP_QH_COULD_NOT_FIND_ORDER_BY_BACKEND_PI_ID = Could not find order by back-end payment instruction ID {0}.
EDP_QH_COULD_NOT_FIND_RI_BY_BACKEND_REFUND_ID = Could not find refund instruction by back-end refund ID {0}.
EDP_QH_COULD_NOT_RETRIEVE_CREDIT_OBJECT = Could not retrieve back-end credit with ID {0}.
EDP_QH_COULD_NOT_RETRIEVE_PAYMENT_OBJECT = Could not retrieve payment backend with id {0}.

# model facades messages
EDP_OBJECT_MODEL_FACADE_CREATE_FAILED = Caught exception during instantiation of EJB ObjectModelFacade. Exception details: {0}.
EDP_COULD_NOT_FIND_OBJECT = Could not find {0} with ID {1}.
EDP_FAIL_TO_GET_KEY_FROM_ECKEYMANAGER = Failed to get key from ECKeyManager for table {0}. 
EDP_OMF_EDPORDER_DELETION_ERROR = Could not delete the event-driven payments order.
EDP_NEGATIVE_AMOUNT = Parameter {0} has a negative value of {1}.
EDP_AMOUNT_TOO_BIG = Parameter {0} has a value {1} that is too big.
EDP_EJB_CANNOT_BE_FOUND = Object of type {0} with primary key {1} could not be found in the database. 
EDP_EJB_CANNOT_BE_DELETED = Object of type {0} with primary key {1} could not be deleted in the database.
EDP_EJB_CANNOT_BE_UPDATED = Object of type {0} with primary key {1} could not be updated in the database.
EDP_EJB_CANNOT_BE_CREATED = Object of type {0} with primary key {1} could not be created in the database.

#Accessors for EJBs messages
EDP_JNDI_INITIAL_CONTEXT_FAILURE = The creation of the initial context failed.
EDP_JNDI_LOOKUP_FAILURE = JNDI lookup failed for name {0}.
EDP_CANNOT_INSTANTIATE_EJB = The system cannot instantiate enterprise bean of type {0}.

#EDPBean file messages
EDP_EDPBEAN_CREATE_FAILED = Caught exception in create method of EJB EDPBean. Exception details: {0}.
EDP_PROCESS_DEPOSITABLE_AMOUNT_EXCEPTION_ORDER_ID = Process depositable amount failed for order ID {0}, store ID {1}. Exception details: {2}.

#EDPJDBCHelper
EDP_RETRIEVE_FROM_DATABASE_ERROR = An error occurred while retrieving data from the database. Exception details: {0}.

#Generic requests messages
EDP_MAIN_THREAD_END_WITH_STATUS_TIMEOUT = Foreground process exits with status timeout.
EDP_MAIN_THREAD_END_WITH_STATUS_TRYAGAIN = Foreground process exits with status try again.
EDP_MAIN_THREAD_END_WITH_STATUS_UNINITIALIZED = Foreground process exits with status value uninitialized.
EDP_MAIN_THREAD_END_WITH_STATUS_FAILURE = Foreground process exits with status failure. This typically indicates an exception happened in the background process.
EDP_FAILURE_IN_FG_BG_FRAMEWORK = Failure in the foreground or background job dispatcher. Exception details: {0}.
EDP_INVALID_STATE_FROM_BACKEND = Invalid state {0} retrieved from back-end system.
EDP_UNSUFFICIENT_PI_AMOUNTS = There are not enough funds in valid payment instructions to process this request.
EDP_IDEMPOTENCY_VIOLATION_VALUES = Idempotency violation: Input value {0} for parameter {1} doest match value {2} in the database.
EDP_IDEMPOTENCY_VIOLATION_OBJECTS = Idempotency violation:  Input parameter for {0} does not match the equivalent data in the database.
EDP_AVS_CONFIG_COULD_NOT_BE_LOADED = The configuration of address verification codes for event-driven payments could not be loaded.
EDP_COULD_NOT_REVERSE_APPROVAL = Approval could not be reversed for payment back-end ID {0}.
EDP_BACKEND_OBJECT_IN_INVALID_STATE = Financial object {0} is in an invalid state: {1}.
EDP_PI_CANNOT_BE_USED_BELOW_MIN_AMOUNT = Payment instruction for payment method {0} cannot be used because its amount {1} is less than the mininum {2} allowed per configuration.
EDP_PI_CANNOT_BE_USED_ABOVE_MAX_AMOUNT = Payment instruction for payment method {0} cannot be used because its amount {1} is more than the maximum {2} allowed per configuration.
EDP_LAST_CHANCE_EDITS_NOT_SUPPORTED = Invalid request: last chance edits are not supported in this version of event-driven payments.

#PrimePayment*Request messages
EDP_INITIAL_AMOUNT_GRATER_THAN_ORDER_AMOUNT = Invalid parameter: specified initial amount {0} is greater than order amount {1}.
EDP_ORDER_AMOUNT_GREATER_THAN_PI_AMTS = Invalid parameters: total order amount ({0}) is greater than sum ({1}) of all payment instruction amounts.

#Refund requests messages
EDP_REFUND_AMOUNT_GREATER_THAN_RI_AMTS = Invalid parameters: total refund amount ({0}) is greater than sum ({1}) of all refund instruction amounts.
EDP_REFUND_METHOD_NOT_SUPPORTED = Payment group id {0} and refund instruction {1} is not supported.
EDP_REFUND_METHOD_NOT_ALLOWED = Payment group id {0} and refund method {1} is not allowed.
#EditRequest messages
EDP_EDIT_ADD_PI_FAILED = The addition of the new payment instruction failed. Exception details: {0}.
EDP_EDIT_CANCEL_PI_FAILED = The cancellation of the payment instruction failed. Exception details: {0}.
EDP_EDIT_REDUCE_PI_AMOUNT_FAILED = The reduction of the payment instruction amount failed. Exception details: {0}.
EDP_EDIT_INCREASE_PI_AMOUNT_FAILED = The increase of the payment instruction amount failed. Exception details: {0}.
EDP_EDIT_UPDATE_PI_EXTENDED_DATA_FAILED = The update of the payment instruction extended data failed. Exception details: {0}.
EDP_EDIT_SOME_AUTHORIZATIONS_ARE_ALLOWED_TO_EXPIRE = There may be some authorizations that will be left to expire. It is not possible to reverse them. Payment instruction ID is {0}, total authorization amount is {1}.
EDP_UNABLE_TO_EDIT_BACKEND_PI = Unable to edit the back-end payment instruction with ID {0}.
EDP_PI_IS_NOT_HUMAN_EDITABLE = Payment instruction with id {0} and payment method {1} cannot be edited by customer or CSR.
EDP_PI_IS_NOT_SYSTEM_EDITABLE = Payment instruction with id {0} and payment method {1} cannot be edited by the system.
EDP_PI_HAS_NOT_ENOUGH_AVAILABLE_AMOUNT = Payment instruction with id {0} does not have enough available amount to be reduced.

#CancelOrderRequest messages
EDP_CANNOT_CANCEL_ORDER_RELEASE_EXIST = Cannot cancel order {0} for store ID {1} because at least one order release exists.
EDP_PI_HAS_DEPOSITED_AMOUNT = Payment instruction cannot be canceled or removed because a non-zero deposited amount was found.
EDP_PI_HAS_DEPOSITING_AMOUNT = Payment instruction cannot be canceled or removed because a non-zero depositing amount was found.
EDP_FORCED_CANCEL_ORDER_DEPOSITED_AMOUNT = Event-driven payments will cancel or remove a payment instruction with ID {0} (having a non-zero deposited amount) because the ''force'' option was specified.

#action messages
EDP_REFLECTION_ERROR_WHILE_CREATING_ACTIONS = A Java reflection error occurred while creating event-driven payment actions.

# rule messages
EDP_RULE_TRIGGERS_ERROR = A payment rule was configured to trigger an error as an action.
EDP_AMOUNTS_DO_NOT_MATCH = Amounts {0} and {1} should match but they do not.
EDP_RULE_NOT_FOUND = Payment rule {0} could not be found.
EDP_UNSUPPORTED_TARGET_STATE = Target state {0} is invalid or unsupported for this versio of EDP.
EDP_MALFORMED_RULE = A malformed payment rule {0} has been detected.
EDP_RULE_ACTION_NOT_FOUND = An unkwnown action named {0} has been used.

# ALR messages
EDP_OPERATION_RESULTS_SUCCESS = Success
EDP_OPERATION_RESULTS_PENDING = Pending
EDP_OPERATION_RESULTS_FAILURE = Failure

# Tickler messages
TICKLER_DEFAULT_PAYMENT_ERROR_COMMENT = Payment action triggered requires attention.
TICKLER_AVS_ATTENTION_REQUIRED = AVS code returned from payment approve action result indicates attention required.
TICKLER_AVS_CAUSED_REVERSE_APPROVE_FAILED = Reverse approve action caused by AVS code failed.
TICKLER_AVS_DEPOSITED_UNREVERSEABLE = AVS code indicate approve reverse required but EDP not able to do so because payment is in deposited state. This is normally because approve and deposit action invoked in EDP.
TICKLER_EDP_ACTION_IN_BACKGROUND_FAILED = An EDP action execution in background failed.
TICKLER_EDP_FORCED_CANCEL_PI_DEPOSITED = EDP is forced to cancel a payment instruction with depostied amount.
TICKLER_EDP_FORCED_REDUCE_PI_AMOUNT = EDP is forced to reduce payment instruction amount to a level EDP can do safely.
TICKLER_EDP_FINALIZE_PAYMENT_FAILED_RELEASE_NOT_FOUND = EDP can not process this finalize payment request because release is not found in database.
TICKLER_EDP_FINALIZE_PAYMENT_FAILED_LAST_CHANCE_EDIT_NOT_SUPPORTED = EDP can not process this finalize payment request because last chance edit is not supported.
TICKLER_EDP_FINALIZE_PAYMENT_FAILED_INVALID_DATA = Finalize payment process failed because invalid data such as insufficent payment instruction amount.
TICKLER_EDP_LAST_RELEASE_REQUIRED_AMOUNT_LESS_THAN_DEPOSITED_AMOUNT = This is last order release shipping ,but the deposited amount is great than the total releases amount.
TICKLER_FINANCIAL_TRANSACTION_FAILED = The payment transaction failed to execute.
