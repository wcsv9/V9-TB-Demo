<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2010 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<!-- Schema for the configuration file for CMS Integration -->

<xsd:schema
	targetNamespace="http://www.ibm.com/xmlns/prod/commerce/foundation/CMS/config"
	elementFormDefault="qualified"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:config="http://www.ibm.com/xmlns/prod/commerce/foundation/CMS/config"
	attributeFormDefault="unqualified" xmlns:_config="http://www.ibm.com/xmlns/prod/commerce/foundation/config">

	<xsd:complexType name="SecurityConfigurationType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:element name="basicAuth"
					type="config:BasicAuthType">
					<xsd:annotation>
						<xsd:documentation>
							This element must be present when the kind
							of authentication that is required to
							retrieve the web feeds is of type, basic
							authentication. Meaning, it requires user
							name and password.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>


				<xsd:element name="certAuth"
					type="config:CertAuthType">
					<xsd:annotation>
						<xsd:documentation>
							This element must be present when the kind
							of authentication that is required to
							retrieve the web feeds is of type, client
							certificate authentication. Where in
							WebSphere Commerce is required to produce a
							certificate in order to retrieve the feeds.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="customAuth"
					type="config:CustomAuthType">
				</xsd:element>

			</xsd:choice>
			<xsd:element name="SSLConfiguration"
				type="config:SSLConfigurationType" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Include this element if SSL/TLS is used to
						secure the communication.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="BasicAuthType">
		<xsd:annotation>
			<xsd:documentation></xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="user" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Username to be used for authentication
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="password" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Password to be used for authentication
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="realm" type="xsd:string" minOccurs="0"
				maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						A security realm, if there is one.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>





	<xsd:complexType name="SSLConfigurationType">
		<xsd:sequence>
			<xsd:element name="trustStore" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Absolute file path of the trust store . Trust
						store is where the signer certificates are
						stored. The trust store will allow the
						application to determine if the certificate
						produced by the Server while establing the SSL
						communication is trusted by the client.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="trustStorePassword" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Password of the trust store.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="trustStoreType" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Specify the trust store type, if it is not the
						default.

						The default keystore type as specified in the
						Java security properties file. The string "jks"
						(acronym for "Java keystore") is used, if no
						such property exists. The Java security
						properties file is located in the file named
						%JAVA_HOME%/lib/security/java.security, where
						%JAVA_HOME% refers to the directory where the
						JDK was installed.

						The default keystore type can be changed by
						setting the value of the "keystore.type"
						security property (in the Java security
						properties file) to the desired keystore type.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="trustStoreProvider" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						If the trust store type is not one of the
						standard, "JKS" or "PKCS12", the associate
						provider's name must also be supplied. For
						example, if the Keystore type is "CMSKS", then
						the corresponding provider "IBMCMSProvider",
						must be registereing with the JVM.

						See
						<code>
							http://java.sun.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#ProviderInstalling
							for instructions
						</code>
						on how to register a provider.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="hostNameVerification"
				type="config:hostNameVerificationType" minOccurs="0"
				maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						This indicates how the hostname verification of
						the server must be performed against the subject
						mentioned in the certificate that the server
						produces while establing an SSL connection. The
						valid values are: ALLOW_ALL - The ALLOW_ALL
						HostnameVerifier essentially turns hostname
						verification off. BROWSER_COMPATIBLE - The
						hostname must match either the first CN, or any
						of the subject-alts. A wildcard can occur in the
						CN, and in any of the subject-alts. STRICT - The
						hostname must match either the first CN, or any
						of the subject-alts. A wildcard can occur in the
						CN, and in any of the subject-alts. The only
						difference between BROWSER_COMPATIBLE and STRICT
						is that a wildcard (such as "*.foo.com") with
						BROWSER_COMPATIBLE matches all subdomains,
						including "a.b.foo.com".
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="port" type="xsd:int" minOccurs="0"
				maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						The secure socket used for SSL connections.
						Specify this if the the feed URLs do not contain
						the actual secure port, but, re-directs requests
						to the actual port.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>


	<xsd:element name="CMSConfiguration" type="config:CMSConfigType">
		<xsd:annotation>
			<xsd:documentation>
				The CMS feed configuration consists of: 1. The feed end
				point information of the CMS system(s). 2.
				Authentication information for secure feeds. 3. Data
				Load configuration parameters.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<xsd:complexType name="FeedEndPointType">
		<xsd:sequence>
			<xsd:element name="content" type="config:ContentType">
				<xsd:annotation>
					<xsd:documentation>
						This element contains the various content type
						elements that a user wishes to have created on
						WebSphere Commerce
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="securityConfiguration"
				type="config:SecurityConfigurationType" minOccurs="0"
				maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						This optional element contains any security
						related information in case of secure feeds
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>

		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="ContentType">
		<xsd:choice minOccurs="1" maxOccurs="unbounded">
			<xsd:element name="URLAttachment"
				type="config:URLAttachmentType">
				<xsd:annotation>
					<xsd:documentation>
						This element is used when the content on the CMS
						system must be imported as URL attachment assets
						in WebSphere Commerce.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="managedAsset"
				type="config:ManagedFileType">
				<xsd:annotation>
					<xsd:documentation>
						This element is used when the content on the CMS
						system must be imported as managed file assets
						in WebSphere Commerce.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="staticContent"
				type="config:StaticFileType">
				<xsd:annotation>
					<xsd:documentation>
						This element is used when the content on the CMS
						system must be loaded onto a location on the Web
						Server.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
	</xsd:complexType>

	<xsd:complexType name="ManagedFileType">
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						A unique name for this end point.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="feedURL" type="xsd:anyURI">
				<xsd:annotation>
					<xsd:documentation>
						URL of the feed end point.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="customParser" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Use this field when the feeds that need to be
						processed are older versions of ATOM/RSS. Check
						the product documentation to check what versions
						of ATOM and RSS are supported out of the box.
						Specify the custom parser class name that
						implements the interface
						<code>FeedReader</code>
						. This class must be available in the classpath.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="managedDirectory" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						The managed directory under which all the
						managed files are created. The directory must
						belong to a store.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="allowedTypes" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						The type of content that must be processed. The
						values are comma separated list of file
						extensions. Example: *.pdf,*.html. If this
						element is absent all file types are processed.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>

			<xsd:sequence minOccurs="0" maxOccurs="1">
				<xsd:element name="ftpUser" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Specify the FTP user, if any of the entries
							in the feed contain a URL to an FTP location
							from which content must be fetched. This
							user will be used if the URL does not
							contain any userinfo.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="ftpPassword" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Specify the FTP use's password, if any of
							the entries in the feed contain a URL to an
							FTP location from which content must be
							fetched. This will be used if the URL does
							not contain any userinfo.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>

			<xsd:element name="tempFileLocation" type="config:TempFileLocationType">
				<xsd:annotation>
					<xsd:documentation>A temporary file location on the local file
						system which can be used by WebSphere Commerce
						to store files temporarily before they are
						uploaded to the final destination.</xsd:documentation></xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="StaticFileType">
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						A unique name for this end point.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="feedURL" type="xsd:anyURI">
				<xsd:annotation>
					<xsd:documentation>
						URL of the feed end point.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="customParser" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Use this field when the feeds that need to be
						processed are older versions of ATOM/RSS. Check
						the product documentation to check what versions
						of ATOM and RSS are supported out of the box.
						Specify the custom parser class name that
						implements the interface
						<code>FeedReader</code>
						. This class must be available in the classpath.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="webServerLocation"
				type="config:webServerLocationType">
				<xsd:annotation>
					<xsd:documentation>
						The location on the Web Server where the files
						must be uploaded. If the Web Server is on the
						same machine as WebSphere Commerce, use the
						"file" protocol. Example, file:///C:/IBM/HTTP
						Server/htdocs/test If the Web Server is on a
						different machine, use the "ftp" protocol.
						Example, ftp://machine.domain:port/IBM/HTTP
						Server/htdocs/test.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:sequence minOccurs="0" maxOccurs="1">
				<xsd:element name="webServerUser" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							User name if the protocol to be used is FTP
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="webServerPassword"
					type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Password if the protocol to be used is FTP.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
			<xsd:element name="allowedTypes" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						The type of content that must be processed. The
						values are comma separated list of file
						extensions. Example: *.pdf,*.html. If this
						element is absent all file types are processed.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>

			<xsd:sequence minOccurs="0" maxOccurs="1">
				<xsd:element name="ftpUser" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Specify the FTP user, if any of the entries
							in the feed contain a URL to an FTP location
							from which content must be fetched. This
							user will be used if the URL does not
							contain any userinfo.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="ftpPassword" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Specify the FTP user's password, if any of
							the entries in the feed contain a URL to an
							FTP location from which content must be
							fetched. This will be used if the URL does
							not contain any userinfo.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>

			<xsd:element name="tempFileLocation" type="config:TempFileLocationType">
				<xsd:annotation>
					<xsd:documentation>A temporary file location on the local file
						system which can be used by WebSphere Commerce
						to store files temporarily before they are
						uploaded to the final destination.</xsd:documentation></xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="URLAttachmentType">
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						A unique name for this end point.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="feedURL" type="xsd:anyURI">
				<xsd:annotation>
					<xsd:documentation>
						URL of the feed end point.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="customParser" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Use this field when the feeds that need to be
						processed are older versions of ATOM/RSS. Check
						the product documentation to check what versions
						of ATOM and RSS are supported out of the box.
						Specify the custom parser class name that
						implements the interface
						<code>FeedReader</code>
						. This class must be available in the classpath.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>

		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="CustomAuthType">
		<xsd:annotation>
			<xsd:documentation>
				When the system generating feeds uses an authentication
				mechanism other than basic authentication and client
				certificate authentication, a custom authentication type
				needs to be specified.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="handler" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						This is the name of the custom authenticator
						class that extends the abstract class
						<code>CustomAuthHTTPConnector</code>
						. This class must be available in the classpath.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="property" type="config:NameValuePairType"
				minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Set of name-value pairs that need to be passed
						to the custom authentcator class.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="CMSConfigType">
		<xsd:sequence>
			<xsd:element name="feedEndPoint"
				type="config:FeedEndPointType" minOccurs="1"
				maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						This element contains the CMS feed end point
						information.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="dataLoadConfigFile"
				type="config:dataLoadConfigType">

				<xsd:annotation>
					<xsd:documentation>
						This element contains parameters for data load
						configuration. Enter the absolute path of the
						data load configuration file.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="NameValuePairType">
		<xsd:attribute name="name" type="xsd:string" use="required"
			form="unqualified">
			<xsd:annotation>
				<xsd:documentation>
					The name of the property
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="value" type="xsd:string" use="required"
			form="unqualified">
			<xsd:annotation>
				<xsd:documentation>
					The value of the property.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="CertAuthType">
		<xsd:sequence>
			<xsd:element name="keyStore" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Absolute file path of the key store . Key store
						is where the client certificates are stored. The
						key store will allow the application to retrieve
						the certificate required to be produced to the
						Server, in order to authenticate itself.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="keyStorePassword" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Password of the client key store.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="keyStoreType" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Specify the key store type, if it is not the
						default.

						The default keystore type as specified in the
						Java security properties file. The string "jks"
						(acronym for "Java keystore") is used, if no
						such property exists. The Java security
						properties file is located in the file named
						%JAVA_HOME%/lib/security/java.security, where
						%JAVA_HOME% refers to the directory where the
						JDK was installed.

						The default keystore type can be changed by
						setting the value of the "keystore.type"
						security property (in the Java security
						properties file) to the desired keystore type.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="keyStoreProvider" type="xsd:string"
				minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						If the key store type is not one of the
						standard, "JKS" or "PKCS12", the associate
						provider's name must also be supplied. For
						example, if the Keystore type is "CMSKS", then
						the corresponding provider "IBMCMSProvider",
						must be registereing with the JVM.

						See
						<code>
							http://java.sun.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#ProviderInstalling
							for instructions
						</code>
						on how to register a provider.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="alias" type="xsd:string" minOccurs="0"
				maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						When the Key store contains multiple client
						certificates, specify the certificate alias
						which needs to be used, to retrieve the
						certificate that will be produced to the server
						for authentication.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>



		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="dataLoadConfigType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="generate" type="xsd:boolean"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Set this to "true", if you want the data
							load configuration files to be generated.
							Set this to "false", if you want to use an
							existing data load configuration file. The
							recommendation is that, the user should
							generate the data load configuraiton files
							in the development environment. Then, turn
							the generation off in the production
							environment and use the previously generated
							configuration files.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="envFileLocation" type="xsd:string"
					use="optional" default="wc-dataload-env.xml">
					<xsd:annotation>
						<xsd:documentation>
							This is location of the data load
							Environment configuration file. If the data
							load configuration file needs to be
							generate, this file must exist and is NOT
							generated. If the data load configuration
							file is not generated, the value is ignored.
							The path can either be relative to the path
							of the data load configuration file or can
							be an absolute path.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

	<xsd:simpleType name="hostNameVerificationType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ALLOW_ALL_HOSTNAME_VERIFIER"></xsd:enumeration>
			<xsd:enumeration
				value="BROWSER_COMPATIBLE_HOSTNAME_VERIFIER">
			</xsd:enumeration>
			<xsd:enumeration value="STRICT_HOSTNAME_VERIFIER"></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>


	<xsd:complexType name="webServerLocationType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="webURL" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Set webURL with the webServer location.
							WebURL will be used by attachment assets to
							create the url for an image.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

	<xsd:complexType name="TempFileLocationType">
		<xsd:annotation>
			<xsd:documentation>
				A temporary file location on the local file system which
				can be used by WebSphere Commerce to store files
				temporarily before they are uploaded to the final
				destination.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">

				<xsd:attribute name="delete" type="xsd:boolean" use="optional" default="false">
					<xsd:annotation>
						<xsd:documentation>This setting affects the files in temporary location, which are downloaded from external system
Set this to &amp;quot;true&amp;quot;, if you want to delete the files from temporary location once the files are uploaded to WebSphere Commerce
Set this to &amp;quot;false&amp;quot;, if you do not want to delete the files in the temporary location</xsd:documentation></xsd:annotation></xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
</xsd:schema>