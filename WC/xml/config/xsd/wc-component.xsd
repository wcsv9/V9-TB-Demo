<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2006, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<xsd:schema targetNamespace="http://www.ibm.com/xmlns/prod/commerce/foundation/config"
	xmlns:_config="http://www.ibm.com/xmlns/prod/commerce/foundation/config"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<xsd:include schemaLocation="wc-common.xsd"/>
	<xsd:complexType name="DevelopmentComponentConfigurationType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This represents the root document
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="database" type="_config:DatabaseType"  minOccurs="0" maxOccurs="1" />
			<xsd:element name="dataservice" type="_config:DataServiceType"  minOccurs="0" maxOccurs="1" />
			<xsd:element name="command-configuration"
				type="_config:CommandConfigurationType" minOccurs="0" maxOccurs="1" >
				<xsd:annotation>
					<xsd:documentation>The command configuration for the service module.  
This configuration contains all the command interfaces that are used
as part of the service module and the implementations of those commands.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="access-profiles" minOccurs="0" maxOccurs="1" type="_config:AccessProfilesType">
				
                <xsd:annotation>
                	<xsd:documentation>The configuration that controls the processing of Get services and will enforce
whether a particular access profile and XPath combination is valid.  By default
all combinations will be allowed unless the default set for the service module to
restrict all combinations unless specified.
</xsd:documentation>
                </xsd:annotation>
			</xsd:element>
			<xsd:element name="valuemappingservice" 
				type="_config:ValueMappingServiceType" minOccurs="0" maxOccurs="1" >
				<xsd:annotation>
					<xsd:documentation>The value mapping service provides mappings of external values to internal values.
Each value mapping provides the ability to take a external value and convert it to a value
that is used internally.  It also performs the reverse where an internal values can be converted
to its external value.  

The purpose of these value map is because the information may be internally stored or handled
differently then how it is exposed externally.  The value maps provide an convenient way to
define these external to internal value mapping.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="_config:authentication-configuration" minOccurs="0" maxOccurs="1" />
			<xsd:element ref="_config:authorization-configuration" minOccurs="0" maxOccurs="1" >
				<xsd:annotation>
					<xsd:documentation>The configuration contains a list of implementions that will represent the logical
object when performing authorization.  These implementations will be passed to the
authorization engine to represent the business object the action is being applied to.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="_config:extendedconfiguration"  minOccurs="0" maxOccurs="1" />
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:simpleType name="DataMediatorType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This lists all the possible values of the dataMediatorType attribute of the componentType. Each respresent the supported data mediator. Currently only JDBC is supported
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<xsd:enumeration value="JDBC" />
			<xsd:enumeration value="File" />
			<xsd:enumeration value="None" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="DataServiceType">
		<xsd:annotation>
		    <xsd:documentation xml:lang="en">This represents the configuration for DataService. The dataMediatorType. Currently only "JDBC" is supported.
The metadataClass is component defined is used to get the jdbc mediator metadata. When paging is requested by the client, querying more base objects than specified 
by the maximumPagingResultLimit will result in an exception. If maximumPagingResultLimit is not specified, its value defaults to 1000. If the value of maximumPagingResultLimit is -1, the size of the result set is not limited. Note, that removing the limit may have performance implications. You can also configure specific queries to have a different limit value than the one from maximumPagingResultLimit by specifying the paging_result_limit configuration parameter in the SQL_STATEMENT section of your query template. 
The maximumPageSize attribute controls the maximum page size. The page size is specified on the request and it should not exceed the value of maximumPageSize. If it does, it gets reset to maximumPageSize.   You can disable the maximum page size by specifying the value of -1 for the maximumPageSize attribute. 
The queryTemplateCacheEnabled attribute is deprecated and existing for compatibility reasons only.								
			</xsd:documentation>			
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="context"  type="_config:ContextType"   minOccurs="0" maxOccurs="unbounded" />
			<xsd:element name="mapping"  type="_config:MappingType"   minOccurs="0" maxOccurs="unbounded" />
			<xsd:element name="store-relationship"  type="_config:StoreRelationshipType"   minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
		<xsd:attribute name="dataMediatorType"    type="_config:DataMediatorType" />
		<xsd:attribute name="metadataClass"       type="xsd:string" />
		<xsd:attribute name="maximumPagingResultLimit" type="xsd:int"/>
		<xsd:attribute name="maximumPageSize" type="xsd:int" use="optional"/>
		<xsd:attribute name="queryTemplateCacheEnabled" type="xsd:boolean" use="optional">
			<xsd:annotation>
				<xsd:appinfo>deprecated</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="returnPagingCountIfMaximumResultLimitExceeded" type="xsd:boolean" use="optional">	
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
			This attribute determines whether the size of the result set needs to be included in the application exception message 
			when the number of records returned by the xpath_to_sql query exceeds the maximum as defined by the maximumPagingResultLimit 
			attribute. The size of the result set is always returned if the paging count SQL query is provided for a given request. 
			However, if such a query is not specified, the size of the result set will only be calculated if this attribute is set 
			to 'true'. This attribute is optional, and its default value is 'false'.									
			</xsd:documentation>			
		</xsd:annotation>			  
		</xsd:attribute>
	</xsd:complexType>

		<xsd:complexType name="ContextType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This represents the BCS context that the component uses. The key is component defined and is used in the query template. During runtime,
the actual value will be retrieved from BCS and substituted into the query statement. The name attribute specifies the context name while the propertyName attribute indicates
the property for the specified context. An optional defaultValue attribute can use used if the context value is not set. The table and column attributes specify the database table
and column names of the context.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="key"          type="xsd:NCName" />
		<xsd:attribute name="name"         type="xsd:string" />
		<xsd:attribute name="propertyName" type="xsd:NCName" />
		<xsd:attribute name="defaultValue" type="xsd:string" use="optional" />	
	</xsd:complexType>
 
	<xsd:complexType name="MappingType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This represents the property mapping between the logical XPath model to the physical Database model.
Each entity object in the logical model can have properties that are physically stored in multiple database tables. DSL supports 3 different kinds of database
tables. Base table (represented by baseTable element) known as the entity table contains the identifier (ie. primary key) for the entity object.
Associated table (represented by associatedTable element) contains other extra information that is logically part of the entity object. It has foreign key relationship
with the base table and the properties are defined in the column (horizontal schema). Property table (represented by propertyTable element) also contains
extra property information similar to associated table. However, the properties are defined in each row (vertical schema).  Each "key" element within represents a logical reference to the entity object. The
name attribute of the "key" element identifies the property in the XPath logical model that references this entity object.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="key"        type="_config:KeyType"      minOccurs="1" maxOccurs="unbounded"/>
			<xsd:element name="basetable"  type="_config:BaseTableType" minOccurs="1" maxOccurs="1" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="KeyType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This identifies the property name in the logical XPath model that references the entity object
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name"          type="xsd:NCName" />
	</xsd:complexType>

	<xsd:complexType name="BaseTableType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="columns"     type="_config:ColumnType"  minOccurs="0"  maxOccurs="unbounded"/>
			<xsd:element name="associatedtable"  type="_config:AssociatedTableType" minOccurs="0" maxOccurs="unbounded" />	
			<xsd:element name="propertytable"    type="_config:PropertyTableType"   minOccurs="0" maxOccurs="1" />
		</xsd:sequence>
		<xsd:attribute name="name"          type="xsd:NCName" />
		<xsd:attribute name="useAllColumns" type="xsd:boolean"     default="false"/>
	</xsd:complexType>

	<xsd:complexType name="AssociatedTableType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="columns"     type="_config:ColumnType"  minOccurs="0"  maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="name"          type="xsd:NCName" />
		<xsd:attribute name="useAllColumns" type="xsd:boolean"     default="false"/>
	</xsd:complexType>

	<xsd:complexType name="PropertyTableType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="columns"     type="_config:PropertyColumnType"  minOccurs="0"  maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="name"          type="xsd:NCName" />
	</xsd:complexType>

	<xsd:simpleType name="PropertyColumnValue">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This lists all the possible values of the property name attribute of the PropertyColumnType.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<xsd:enumeration value=".name." />
			<xsd:enumeration value=".value." />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="PropertyColumnType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name"          type="xsd:string" />
		<xsd:attribute name="propertyName"  type="_config:PropertyColumnValue" />
		<xsd:attribute name="caseSensitive" type="xsd:boolean"	   default="true"/>
	</xsd:complexType>

	<xsd:complexType name="ColumnType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
			</xsd:documentation>
		</xsd:annotation>		
		<xsd:attribute name="name"          type="xsd:string" />
		<xsd:attribute name="propertyName"  type="xsd:string"       use="optional"/>
		<xsd:attribute name="searchable"    type="xsd:boolean"      default="true"/>
		<xsd:attribute name="selectable"    type="xsd:boolean"      default="true"/>
		<xsd:attribute name="genMode"       type="xsd:int"          default="0"/>
		<xsd:attribute name="caseSensitive" type="xsd:boolean"	   default="true"/>
	</xsd:complexType>	
	
	<xsd:complexType name="StoreRelationshipType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This represents the store relationship type that the component uses. The "key" is an attribute which is defined by a component for a type of store relationship 
			and is used in the query template. During runtime, the actual value will be replaced with the value defined in the "value" attribute. The "value" attribute specifies the store relationship type 
			name which defined in the WebSphere Commerce "streltyp" table.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="key"          type="xsd:NCName"  use="required"/>
		<xsd:attribute name="value"         type="xsd:string"  use="required"/>
	</xsd:complexType>
	
	<xsd:simpleType name="DBType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This lists all the possible values of the type attribute of the DatabaseType. Each respresent the supported database platform
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<xsd:enumeration value="DB2" />
			<xsd:enumeration value="Derby" />
			<xsd:enumeration value="Oracle" />
			<xsd:enumeration value="MYSQL" />
			<xsd:enumeration value="DB2400" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="DatabaseType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">This represents the persistent store used by the component. The name attribute represents the data store name. In the J2EE 
environment, this is the DataSource name; in J2SE environment, this is the database URL name. The type attribute indicates the database platform. the 
"keyManagerIsolationLevel" attribute indicates the isolation level of the key manager
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name"                type="xsd:string" />
		<xsd:attribute name="type"                type="_config:DBType" />
		<xsd:attribute name="keyManagerIsolationLevel"          type="xsd:string" />
	</xsd:complexType>
	<xsd:element name="DevelopmentComponentConfiguration" type="_config:DevelopmentComponentConfigurationType" />
	
	<!--  ============================= command configuration  ====================================== -->
	<xsd:complexType name="CommandType">
        <xsd:annotation>
        	<xsd:documentation>The configuration of a specific command.  For the command
interface registered (the interfacename attribute), the command
can specify the default implementation of the command and
a set of implementations that will be used for a specific 
qualifier.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="default-implementation"
				type="_config:CommandImplementationType" minOccurs="0" maxOccurs="1" >
				<xsd:annotation>
					<xsd:documentation>The default command implementation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="key-implementation"
				type="_config:CommandKeyImplementationType" minOccurs="0"
				maxOccurs="unbounded" >
				<xsd:annotation>
					<xsd:documentation>The command implementation when a specific qualifier has been specified.
Some commands can be created based on some key and this is the configuration
used to determine the implementation base on the key value.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="interfacename" type="xsd:string"  use="required"/>
	</xsd:complexType>

	<xsd:complexType name="CommandImplementationType">
        <xsd:annotation>
        	<xsd:documentation>The default command implementation.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="command-property"
				type="_config:CommandPropertyType" minOccurs="0" maxOccurs="unbounded" >
				<xsd:annotation>
					<xsd:documentation>The properties to set on the command when it is created.
These properties will correspond to a set method on the command
implementation.  This set methods will be called when the command is created
and the value specified is the property value.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="classname" type="xsd:string"
			use="required" />
	</xsd:complexType>

	<xsd:complexType name="CommandPropertyType">
        <xsd:annotation>
        	<xsd:documentation>The properties to set on the command when it is created.
These properties will correspond to a set method on the command
implementation.  This set methods will be called when the command is created
and the value specified is the property value.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required" />
		<xsd:attribute name="value" type="xsd:string" use="required" />
	</xsd:complexType>

	<xsd:complexType name="CommandKeyImplementationType">
        <xsd:annotation>
        	<xsd:documentation>The command implementation when a specific qualifier has been specified.
Some commands can be created based on some key and this is the configuration
used to determine the implementation base on the key value.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
			<xsd:extension base="_config:CommandImplementationType">
				<xsd:attribute name="key" type="xsd:string"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="CommandConfigurationType">
        <xsd:annotation>
        	<xsd:documentation>The command configuration for the service module.  
This configuration contains all the command interfaces that are used
as part of the service module and the implementations of those commands.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="command" type="_config:CommandType"
				minOccurs="0" maxOccurs="unbounded" >
				<xsd:annotation>
					<xsd:documentation>The configuration of a specific command.  For the command
interface registered (the interfacename attribute), the command
can specify the default implementation of the command and
a set of implementations that will be used for a specific 
qualifier.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<!--  ================ value mapping service ================= -->
	
	<xsd:complexType name="ValueMappingServiceType">
        <xsd:annotation>
        	<xsd:documentation>The value mapping service provides mappings of external values to internal values.
Each value mapping provides the ability to take a external value and convert it to a value
that is used internally.  It also performs the reverse where an internal values can be converted
to its external value.  

The purpose of these value map is because the information may be internally stored or handled
differently then how it is exposed externally.  The value maps provide an convenient way to
define these external to internal value mapping.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="valuemapping" type="_config:ValueMappingType"
				minOccurs="0" maxOccurs="unbounded" >
				<xsd:annotation>
					<xsd:documentation>A value mapping defines the mapping of values that is defined
externally to its internal value.  The purpose of a value map
is to declare external values and indicate the internal representation
of those values.  

Values maps are configurable and additional associatations can be defined
for a value map in the extension configuration file.

The default implementation of the value mapping will use the value map
defined to perform the value conversion.  However the provider
attribute can specify another implementation of the ValueMapping that can resolve
this information from different data sources.
</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
  
    <xsd:complexType name="ValueMappingType">
        <xsd:annotation>
        	<xsd:documentation>A value mapping defines the mapping of values that is defined
externally to its internal value.  The purpose of a value map
is to declare external values and indicate the internal representation
of those values.  

Values maps are configurable and additional associatations can be defined
for a value map in the extension configuration file.

The default implementation of the value mapping will use the value map
defined to perform the value conversion.  However the provider
attribute can specify another implementation of the ValueMapping that can resolve
this information from different data sources.
</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="valuemap" type="_config:ValueMapType"
				minOccurs="0" maxOccurs="unbounded" >
				<xsd:annotation>
					<xsd:documentation>The default provider implementation uses this configuration to define
external to internal value conversion.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="internalName" type="xsd:string" use="required" />
     	<xsd:attribute name="externalName" type="xsd:string" use="required" /><xsd:attribute
     		name="provider" type="xsd:string" use="optional">
</xsd:attribute>
    </xsd:complexType>
  
    <xsd:complexType name="ValueMapType">
        <xsd:annotation>
        	<xsd:documentation>The default provider implementation uses this configuration to define
external to internal value conversion.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="externalValue" type="xsd:string" use="required" />
      <xsd:attribute name="internalValue" type="xsd:string" use="required" />      
    </xsd:complexType>
	
	<!--  authorization -->
	
	<xsd:element name="authorization-configuration" type="_config:PolicyManagerConfigurationType"/>
	
	<xsd:complexType name="PolicyManagerConfigurationType">
        <xsd:annotation>
        	<xsd:documentation>The configuration contains a list of implementions that will represent the logical
object when performing authorization.  These implementations will be passed to the
authorization engine to represent the business object the action is being applied to.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="protectable-proxy" type="_config:ProtectableProxyType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>The protectable proxy registers the class implementation that will be used to represent the specified
interface when authorization is being performed.  Optionally, the protectable proxy implementation can be configured
for a specific actionCode since the behaviour may differ based on the actionCode </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="ProtectableProxyType">
        <xsd:annotation>
        	<xsd:documentation>The protectable proxy registers the class implementation that will be used to represent the specified
interface when authorization is being performed.  Optionally, the protectable proxy implementation can be configured
for a specific actionCode since the behaviour may differ based on the actionCode </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="interfacename" use="required" type="xsd:string"/>
		<xsd:attribute name="protectable" use="required" type="xsd:string"/>
		<xsd:attribute name="actionCode" type="xsd:string" use="optional"/>
	</xsd:complexType>
	
	<!--  authentication -->
	<xsd:element name="authentication-configuration" type="xsd:anyType" />
	
	<xsd:complexType name="AccessProfilesType">
        <xsd:annotation>
        	<xsd:documentation>The configuration that controls the processing of Get services and will enforce
whether a particular access profile and XPath combination is valid for a particular noun.  By default
all combinations will be allowed unless the default set for the service module to
restrict all combinations unless specified.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="noun" type="_config:NounAccessProfilesType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>The configuration that controls the processing of Get services and will enforce
whether a particular access profile and XPath combination is valid for a particular noun.  By default
all combinations will be allowed unless the default set for the service module to
restrict all combinations unless specified.

The default attribute controls whether the default behaviour of the service
module should &quot;allow&quot; or &quot;restrict&quot; all access profile combinations.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="NounAccessProfilesType">
        <xsd:annotation>
        	<xsd:documentation>The configuration that controls the processing of Get services and will enforce
whether a particular access profile and XPath combination is valid for a particular noun.  By default
all combinations will be allowed unless the default set for the service module to
restrict all combinations unless specified.

The default attribute controls whether the default behaviour of the service
module should &quot;allow&quot; or &quot;restrict&quot; all access profile combinations.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="access-profile" minOccurs="0"
				maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>The specific configuration for an access profile for a particular noun.  
                	The access profile configuration requires the name of the access profile the configuration
applies to.

The access profile is either configured to allow specific XPath expressions
to be used with this access profile or restrict specific XPath expressions. The
behavior applied to the access profile depends on whether XPath expression 
have been allowed or restricted.  In the case where allowed XPath expression are
defined, the default behavior is to restrict all.  In the case where restrict XPath 
expressions are defined, the default behavior is to allow all.


</xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
					<xsd:choice>
						<xsd:element name="allow-xpath" minOccurs="0"
							maxOccurs="unbounded">
                            <xsd:annotation>
                            	<xsd:documentation>The allowed XPath expression that can be used for the access profile.
The xpathkey attribute is the normalized representation of the XPath expression.</xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
								<xsd:attribute name="xpathkey"
									type="xsd:string" use="required">
								</xsd:attribute>
							</xsd:complexType>
						</xsd:element>
						<xsd:element name="restrict-xpath" minOccurs="0"
							maxOccurs="unbounded">
                            <xsd:annotation>
                            	<xsd:documentation>The restricted XPath expression that can not be used for the access profile.
The xpathkey attribute is the normalized representation of the XPath expression.</xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
								<xsd:attribute name="xpathkey"
									type="xsd:string" use="required">
								</xsd:attribute>
							</xsd:complexType>
						</xsd:element>
					</xsd:choice>
					<xsd:attribute name="name" type="xsd:string"
						use="required"/>
                </xsd:complexType>
			</xsd:element>

		</xsd:sequence>
		<xsd:attribute name="default" type="xsd:string" use="optional" default="allow"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

</xsd:schema>