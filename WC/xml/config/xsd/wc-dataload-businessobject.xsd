<?xml version="1.0" encoding="UTF-8"?>

<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2008, 2017 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<xsd:schema targetNamespace="http://www.ibm.com/xmlns/prod/commerce/foundation/config"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:_config="http://www.ibm.com/xmlns/prod/commerce/foundation/config"
	elementFormDefault="qualified" 
	attributeFormDefault="unqualified">

	<xsd:include schemaLocation="wc-dataload-common.xsd"></xsd:include>
	<xsd:include schemaLocation="wc-dataload-datasource-data.xsd"></xsd:include>
	
    <xsd:element name="DataloadBusinessObjectConfiguration" type="_config:DataloadBusinessObjectConfiguration">
    	<xsd:annotation>
    		<xsd:documentation>
&lt;P&gt;
The data load configuration consists of the following customizable files:
&lt;OL&gt;
	&lt;LI&gt;The load configuration. &lt;STRONG&gt;(wc-dataload.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
	&lt;LI&gt;The environment configuration. &lt;STRONG&gt;(wc-dataload-env.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
	&lt;LI&gt;The business object configuration. &lt;STRONG&gt;(wc-dataload-businessobject.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
&lt;/OL&gt;
&lt;/P&gt;
&lt;P&gt;
The data load configuration also consists of the following non-customizable files:
&lt;OL&gt;
	&lt;LI&gt;The default set of common definitions. &lt;STRONG&gt;(wc-dataload-common.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
	&lt;LI&gt;The default data readers types. &lt;STRONG&gt;(wc-dataload-datasource-data.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
&lt;/OL&gt;
&lt;/P&gt;
&lt;P&gt;
This configuration file defines: how data maps to WebSphere Commerce business objects, how the data is mediated into physical objects,  and how the data is persisted.
&lt;/P&gt;	
    		</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:complexType name="DataloadBusinessObjectConfiguration">    	
        <xsd:annotation>
        	<xsd:documentation>
&lt;P&gt;
Data load configuration consists of the following files:
&lt;OL&gt;
	&lt;LI&gt;The load configuration. &lt;STRONG&gt;(wc-dataload.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
	&lt;LI&gt;The environment configuration. &lt;STRONG&gt;(wc-dataload-env.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
	&lt;LI&gt;The business object configuration. &lt;STRONG&gt;(wc-dataload-businessobject.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
&lt;/OL&gt;
&lt;/P&gt;
&lt;P&gt;
Data load configuration also consists of the following non-customizable files:
&lt;OL&gt;
	&lt;LI&gt;The default set of common definitions used by the data load configuration. &lt;STRONG&gt;(wc-dataload-common.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
	&lt;LI&gt;The default data reader types. &lt;STRONG&gt;(wc-dataload-datasource-data.xsd)&lt;/STRONG&gt;&lt;/LI&gt;
&lt;/OL&gt;
&lt;/P&gt;
&lt;P&gt;
This configuration file defines: how data maps to WebSphere Commerce business objects, how the data is mediated into physical objects,  and how the data is persisted.
&lt;/P&gt;        	
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="DataLoader" type="_config:DataLoader" minOccurs="1" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>Specifies the data reader and business object builder.

</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="DataLoader">    	
        <xsd:annotation>
        	<xsd:documentation>
Specifies the data reader and business object builder.

&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	className
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	com.ibm.commerce.foundation.dataload.BusinessObjectLoader
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The data load implementation class.

&lt;UL&gt;
	&lt;LI&gt;
		&lt;STRONG&gt;com.ibm.commerce.foundation.dataload.BusinessObjectLoader:&lt;/STRONG&gt;  &lt;BR/&gt;  
		The default implementation of the data load utility. Controls the entire load for a load item.
	&lt;/LI&gt;
&lt;/UL&gt;

&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;
&lt;/TABLE&gt;				
    

</xsd:documentation></xsd:annotation>
        <xsd:sequence>
            <xsd:element name="property" type="_config:NameValuePair" minOccurs="0" maxOccurs="unbounded">
            	<xsd:annotation>
            		<xsd:documentation>&lt;P&gt;
A section for defining custom properties in the form of name-value pairs that define custom data load properties.
&lt;/P&gt;</xsd:documentation>
            	</xsd:annotation></xsd:element>
            <xsd:element name="ColumnExclusionList" type="_config:ColumnExclusionList" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>
&lt;P&gt;
Lists columns within tables that should not be modified by the data load utility.
&lt;/P&gt;                	
                	</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="CompareColumns" type="_config:CompareColumns" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>
&lt;P&gt;
Lists columns within tables that should be included or excluded from comparing for the data between input data and the data in the database.
&lt;/P&gt;                	
                	</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        	<xsd:element name="DataReader" type="_config:DataReader"
        		minOccurs="1" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>

&lt;P&gt;
The data reader allows users to specify the details of the data source, input data and how the data should be read in.
&lt;/P&gt;    

&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	lineDelimiter
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	New line character
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. Specifies the line separator character (or record separator character) in the CSV file. The default value is the new line character. The lineDelimiter cannot appear in the content of a token.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  &lt;TR&gt;
    &lt;TD&gt;
	tokenDelimiter 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	comma character: ','
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. Specifies the token separator character for one record. The default is the comma character: ','.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
  &lt;TR&gt;
    &lt;TD&gt;
	tokenValueDelimiter 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	The double quote character: '"'.
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
Specifies the token value delimiter. That is, if a token value begins and ends with the tokenValueDelimiter, it is stripped and not be part of the token value. The default is the double quote character: '"'. 
It is used when there are some special characters in the token content; the token begins and end with the tokenValueDelimiter. 
The special character can be the tokenDelimiter and tokenValueDelimiter characters. If the tokenValueDelimiter itself is in the token content, use two tokenValueDelimiter characters to escape it. 
For example, if the double quote '"' is the tokenValueDelimiter and the token content also contains the '"' character, use two double quotes '""' to represent one double quote.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
  &lt;TR&gt;
    &lt;TD&gt;
	charset 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	UTF-8
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
Specifies the CSV file encoding. The default is UTF-8. 
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  &lt;TR&gt;
    &lt;TD&gt;
	firstLineIsHeader 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	false
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
This specifies that the first line in the CSV file is a header information and it is ignored in the CSVReader. The default value is false.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
  &lt;TR&gt;
    &lt;TD&gt;
	useHeaderAsColumnName 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	false
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
This specifies whether to use the header information in the first line of the CSV file as the column name to override the column name configuration. The default value is false.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
&lt;/TABLE&gt;				
       
           
                	</xsd:documentation>
                </xsd:annotation>
        	</xsd:element>
        	<xsd:element name="BusinessObjectBuilder"
        		type="_config:BusinessObjectBuilder" minOccurs="1"
        		maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>
Defines how data is mapped to WebSphere Commerce business objects. It is also used to choose the data persistence method.


&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	className
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The implementation class of the business object builder to use. default the following is provided.

&lt;UL&gt;
	&lt;LI&gt;
		&lt;STRONG&gt;com.ibm.commerce.foundation.dataload.businessobjectbuilder.BaseBusinessObjectBuilder&lt;/STRONG&gt;  &lt;BR/&gt;  
		This business object builder maps data to a business object.
		If using this default builder, the following attributes must be specified:
		packageName - The package this generated data object belongs to.
		dataObjectType - The name of the data object. 
	&lt;/LI&gt;
&lt;/UL&gt;

&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
   &lt;TR&gt;
    &lt;TD&gt;
	packageName
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The package this generated data object belongs to.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
     &lt;TR&gt;
    &lt;TD&gt;
	dataObjectType
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The name of the data object. 
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
&lt;/TABLE&gt;                	
                	</xsd:documentation>
                </xsd:annotation>
        	</xsd:element>        </xsd:sequence>        
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="DataReader">    	
        <xsd:annotation>
        	<xsd:documentation>
&lt;P&gt;
The data reader allows users to specify the details of the data source, input data and how the data should be read in.
&lt;/P&gt;    


&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	lineDelimiter
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	New line character
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. Specifies the line separator character (or record separator character) in the CSV file. The default value is the new line character. The lineDelimiter cannot appear in the content of a token.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  &lt;TR&gt;
    &lt;TD&gt;
	tokenDelimiter 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	comma character: ','
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. Specifies the token separator character for one record. The default is the comma character: ','.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
  &lt;TR&gt;
    &lt;TD&gt;
	tokenValueDelimiter 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	The double quote character: '"'.
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
Specifies the token value delimiter. That is, if a token value begins and ends with the tokenValueDelimiter, it is stripped and not be part of the token value. The default is the double quote character: '"'. 
It is used when there are some special characters in the token content; the token should begin and end with the tokenValueDelimiter. 
The special character can be the tokenDelimiter and tokenValueDelimiter characters. If the tokenValueDelimiter itself is in the token content, it should use two tokenValueDelimiter characters to escape it. 
For example, if the double quote '"' is the tokenValueDelimiter and the token content also contains the '"' character, use two double quotes '""' to represent one double quote.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
  &lt;TR&gt;
    &lt;TD&gt;
	charset 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	UTF-8
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
Specifies the CSV file encoding. The default is UTF-8. 
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  &lt;TR&gt;
    &lt;TD&gt;
	firstLineIsHeader 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	false
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
This specifies that the first line in the CSV file is a header information and it is ignored in the CSVReader. The default value is false.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
  &lt;TR&gt;
    &lt;TD&gt;
	useHeaderAsColumnName 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	false
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
A convenience attribute for use with the default CSV Reader. 
This specifies whether to use the header information in the first line of the CSV file as the column name to override the column name configuration. The default value is false.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
    
&lt;/TABLE&gt;				
       
              
</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>            
            <xsd:element name="property" type="_config:NameValuePair" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>A customizable area for a custom data reader to define properties in the form of name-value pairs.

The properties can be retrieved through the DataReader.getConfigProperties().getProperty(propertyName)  method.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="Data" type="_config:Data" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>An area for a definition of the data structure that the data reader is reading.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="XmlHandler" type="_config:XmlHandler" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>An area for a definition of the XML handler used by an XML reader.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="DataReaderPreprocessor" type="_config:DataReaderPreprocessor" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>An area for a definition of the data reader preprocessor used by the data reader.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="Query" type="_config:Query" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>An area for a definition of the SQL query.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="AssociatedQuery" type="_config:AssociatedQuery" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>An area for a definition of the associated SQL queries.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>                
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute>
		<xsd:attribute name="lineDelimiter" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
		<xsd:attribute name="tokenDelimiter" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
		<xsd:attribute name="tokenValueDelimiter" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
		<xsd:attribute name="charset" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
		<xsd:attribute name="firstLineIsHeader" type="xsd:boolean" use="optional" form="unqualified"></xsd:attribute>
		<xsd:attribute name="useHeaderAsColumnName" type="xsd:boolean" use="optional" form="unqualified"></xsd:attribute>
		<xsd:attribute name="pageSize" type="xsd:nonNegativeInteger" use="optional" form="unqualified"></xsd:attribute>
		<xsd:attribute name="xslt" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
    </xsd:complexType>
	<xsd:complexType name="XmlHandler">
        <xsd:annotation>
        	<xsd:documentation>
Defines an XML handler implementation class which will be used in the XML reader
			</xsd:documentation>
		</xsd:annotation>
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="DataReaderPreprocessor">
        <xsd:annotation>
        	<xsd:documentation>
Defines a data reader preprocessor implementation class which will be used in the data reader
			</xsd:documentation>
		</xsd:annotation>
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute>
	</xsd:complexType>

    <xsd:complexType name="BusinessObjectBuilder">    	
        <xsd:annotation>
        	<xsd:documentation>
Defines how data is mapped to WebSphere Commerce business objects. It is also used to choose the data persistence method.


&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	className
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The implementation class of the business object builder to use.

&lt;UL&gt;
	&lt;LI&gt;
		&lt;STRONG&gt;com.ibm.commerce.foundation.dataload.businessobjectbuilder.BaseBusinessObjectBuilder&lt;/STRONG&gt;  &lt;BR/&gt;  
		This business object builder maps data to a business object.
		If using this builder, specify these attributes:
		packageName - The package this generated data object belongs to.
		dataObjectType - The name of the data object. 
	&lt;/LI&gt;
&lt;/UL&gt;

&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
   &lt;TR&gt;
    &lt;TD&gt;
	packageName
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The package this generated data object belongs to.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
     &lt;TR&gt;
    &lt;TD&gt;
	dataObjectType
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The name of the data object. 
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
&lt;/TABLE&gt;                	
                				
       
</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>    		
            <xsd:element name="property" type="_config:NameValuePair" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>A section for defining custom properties in the form of name-value pairs that define
custom business object builder properties.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="DataMapping" type="_config:DataMapping" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>A container element where you can specify how data is mapped to business objects.</xsd:documentation></xsd:annotation>
            </xsd:element>
            <xsd:element name="Table" type="_config:Table" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>
&lt;P&gt;                	
This node defines a list of physical tables and columns and the data mapping to them.   The data for each table column can come from:
&lt;/P&gt;
&lt;UL&gt;
	&lt;LI&gt;The data read by the data reader. (Default)&lt;/LI&gt;
	&lt;LI&gt;A fixed value.&lt;/LI&gt;
	&lt;LI&gt;The business context.&lt;/LI&gt;
	&lt;LI&gt;An ID resolution.&lt;/LI&gt;
&lt;/UL&gt;
</xsd:documentation>
                </xsd:annotation>
            </xsd:element><!--
            <xsd:element name="ExclusionCondition" type="_config:ExclusionCondition" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>A section for defining the exclusion condition.</xsd:documentation></xsd:annotation>
            </xsd:element>
            --><xsd:element name="BusinessObjectMediator" type="_config:BusinessObjectMediator" minOccurs="1" maxOccurs="1">
                <xsd:annotation>
                	<xsd:documentation>
                	Defines how WebSphere Commerce business objects are transformed into physical table data objects. It is also used to choose the data persistence method.

&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	className
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The implementation class of the business object mediator to use.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
   &lt;TR&gt;
    &lt;TD&gt;
	componentId
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The component ID the data objects belong to.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;

&lt;/TABLE&gt;            


</xsd:documentation>
                </xsd:annotation>
            </xsd:element>            
        </xsd:sequence>                
        <xsd:attribute name="className" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
        <xsd:attribute name="packageName" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
        <xsd:attribute name="dataObjectType" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        <xsd:attribute name="enabled" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>

    </xsd:complexType>


    <xsd:complexType name="BusinessObjectMediator">    	
        <xsd:annotation>
        	<xsd:documentation>Defines how WebSphere Commerce business objects are transformed into physical table data objects. It is also used to choose the data persistence method.

&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	className
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The implementation class of the business object mediator to use.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
   &lt;TR&gt;
    &lt;TD&gt;
	componentId
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The component ID the data objects belong to.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;

&lt;/TABLE&gt;            

</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="property" type="_config:NameValuePair"
        		minOccurs="0" maxOccurs="unbounded">
        		<xsd:annotation>
        			<xsd:documentation>
        				A section for defining custom properties in the
        				form of name-value pairs that define custom
        				business object mediator properties.
        			</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
            <xsd:element name="context" type="_config:context" minOccurs="0" maxOccurs="unbounded">
        		<xsd:annotation>
        			<xsd:documentation>Defines the business context keys required for this load and which context they can be found in.</xsd:documentation></xsd:annotation></xsd:element>
            <xsd:element name="Query" type="_config:Query" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                	<xsd:documentation>An area for a definition of the SQL query.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="DataWriter" type="_config:DataWriter"
        		minOccurs="0" maxOccurs="1">
        		<xsd:annotation>
        			<xsd:documentation>

        				&lt;P&gt; The data writer to use for the entire
        				load. This can be overridden in the business
        				object configuration file. &lt;/P&gt;

        				&lt;TABLE BORDER="1" WIDTH="100%"
        				CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
        				&lt;TR BGCOLOR="#CCCCFF"
        				CLASS="TableHeadingColor"&gt; &lt;TD&gt;
        				Attribute &lt;/TD&gt; &lt;TD&gt; Type
        				&lt;/TD&gt; &lt;TD&gt; Required &lt;/TD&gt;
        				&lt;TD&gt; Default Setting &lt;/TD&gt;
        				&lt;TD&gt; Description &lt;/TD&gt; &lt;/TR&gt;


        				&lt;TR&gt; &lt;TD&gt; className &lt;/TD&gt;
        				&lt;TD&gt; String &lt;/TD&gt; &lt;TD&gt; Yes
        				&lt;/TD&gt; &lt;TD&gt; N/A &lt;/TD&gt;
        				&lt;TD&gt;

        				&lt;P&gt; The implementation class of the data
        				writer to use.

        				&lt;UL&gt; &lt;LI&gt;
        				&lt;STRONG&gt;com.ibm.commerce.foundation.dataload.datawriter.JDBCDataWriter:&lt;/STRONG&gt;
        				&lt;BR/&gt; This data writer writes the physical
        				objects to the database directly using JDBC with
        				batch support. This is typically used in the
        				delta data load scenario. &lt;/LI&gt;

        				&lt;LI&gt;
        				&lt;STRONG&gt;com.ibm.commerce.foundation.dataload.datawriter.NativeDBDataWriter:&lt;/STRONG&gt;
        				&lt;BR/&gt; This data writer will convert the
        				physical objects to a file in the database
        				native loadable format. This is usually used in
        				the initial data load. &lt;/LI&gt; &lt;/UL&gt;

        				&lt;/P&gt;

        				&lt;/TD&gt; &lt;/TR&gt; &lt;/TABLE&gt;
        			</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        </xsd:sequence>
        <xsd:attribute name="className" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
        <xsd:attribute name="componentId" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="DataWriter">    	
        <xsd:annotation>
        	<xsd:documentation>
		
&lt;P&gt;
The data writer to use for the entire load. This can be overridden in the business object configuration file.
&lt;/P&gt;

&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	className
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The implementation class of the data writer to use.

&lt;UL&gt;
	&lt;LI&gt;
		&lt;STRONG&gt;com.ibm.commerce.foundation.dataload.datawriter.JDBCDataWriter:&lt;/STRONG&gt;  &lt;BR/&gt;  
		This data writer writes the physical objects to the database directly using JDBC with batch support. This is typically used in the delta data load scenario.
	&lt;/LI&gt;

	&lt;LI&gt;
		&lt;STRONG&gt;com.ibm.commerce.foundation.dataload.datawriter.NativeDBDataWriter:&lt;/STRONG&gt; &lt;BR/&gt;  
		This data writer will convert the physical objects to a file in the database native loadable format. This is usually used in the initial data load.
	&lt;/LI&gt;
&lt;/UL&gt;

&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;
&lt;/TABLE&gt;				
        	        	
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>    		
            <xsd:element name="property" type="_config:NameValuePair" minOccurs="0" maxOccurs="unbounded">
            	<xsd:annotation>
            		<xsd:documentation>A section for defining custom properties in the form of name-value pairs that define
custom data writer properties.</xsd:documentation>
            	</xsd:annotation>
            </xsd:element>
            <xsd:element name="DataLoadBatchService" type="_config:DataLoadBatchService" minOccurs="0" maxOccurs="1">
            </xsd:element>
            <xsd:element name="DataOutputLocation"
        		type="_config:DataOutputLocation" maxOccurs="1"
        		minOccurs="0">
        		<xsd:annotation>
    				<xsd:documentation>
    					&lt;P&gt; This node defines the location of the output data file
    					that needs to created. &lt;/P&gt; &lt;P&gt; An area to define
    					customizable properties is provided.&lt;/P&gt;
    				</xsd:documentation>
    			</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="Data" type="_config:Data" maxOccurs="1" minOccurs="0">
        		<xsd:annotation>
    				<xsd:documentation>
    					The definition of the data structure that
    					the data writer uses to write the output
    					data.
    				</xsd:documentation>
    			</xsd:annotation>
        	</xsd:element>            	
        </xsd:sequence>                
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute>
    </xsd:complexType>


    <xsd:complexType name="DataMapping">
        <xsd:annotation>
        	<xsd:documentation>A container element where you can specify how data is mapped to business objects.</xsd:documentation></xsd:annotation>
        <xsd:sequence>    		
            <xsd:element name="mapping" type="_config:Mapping" minOccurs="0" maxOccurs="unbounded">
            	<xsd:annotation>
            		<xsd:documentation>
            	
&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	xpath
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The path pointing to a property in the logical data object.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	value 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The value is the value to set for the data object property.
&lt;/P&gt;
&lt;P&gt;
it can contain two possible entries:
&lt;UL&gt;
	&lt;LI&gt;A fixed value&lt;/LI&gt;
	&lt;LI&gt;A key from the data source data&lt;/LI&gt;
&lt;/UL&gt;
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	valueFrom
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
This attribute describes where the value for the logical data object property is coming from. 
&lt;/P&gt;
&lt;P&gt;
It can have the following possible entries:
&lt;UL&gt;
	&lt;LI&gt;Fixed - The value specified is fixed value and should be set for the property.&lt;/LI&gt;
	&lt;LI&gt;InputData - The value is from the input data;/LI&gt;
&lt;/UL&gt;
The default valueFrom setting is InputData. If using InputData, do not specify.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	empty 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
it specifies that if the value read from the CSV is empty, what it should be saved in the database. 
&lt;/P&gt;
&lt;P&gt;
It can have the following possible entries:
&lt;UL&gt;
	&lt;LI&gt; null, set to null in the database. This is the default behavior&lt;/LI&gt;
	&lt;LI&gt;empty, save as an empty string in the database&lt;/LI&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	deleteValue
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
It is used in the case where the data source data contains a flag indicating that data should be deleted. If in the CSV file, this column contains a value equals the deleteValue, this row is deleted.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;

&lt;/TABLE&gt;        	
        	    	
        	            		

</xsd:documentation>
            	</xsd:annotation></xsd:element>
            <xsd:element name="MappingLoop" type="_config:MappingLoop" minOccurs="0" maxOccurs="unbounded" >
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="MappingLoop">    	
        <xsd:sequence>    		
            <xsd:element name="mapping" type="_config:Mapping" minOccurs="1" maxOccurs="unbounded" >
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="start" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="end" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="variable" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
    </xsd:complexType>

    <xsd:complexType name="Mapping">    	
        <xsd:annotation>
        	<xsd:documentation>
&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	xpath
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The path pointing to a property in the logical data object.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	value 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The value is the value to set for the data object property.
&lt;/P&gt;
&lt;P&gt;
it can contain two possible entries:
&lt;UL&gt;
	&lt;LI&gt;A fixed value&lt;/LI&gt;
	&lt;LI&gt;A key from the data source data&lt;/LI&gt;
&lt;/UL&gt;
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	valueFrom
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
This attribute describes where the value for the logical data object property is coming from. 
&lt;/P&gt;
&lt;P&gt;
It can have the following possible entries:
&lt;UL&gt;
	&lt;LI&gt;Fixed - The value specified is fixed value and should be set for the property.&lt;/LI&gt;
	&lt;LI&gt;InputData - The value is from the input data.&lt;/LI&gt;
&lt;/UL&gt;
The default valueFrom setting is InputData. If using InputData, do not specify.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	empty 
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
it specifies that if the value read from the CSV is empty, what it should be saved in the database. 
&lt;/P&gt;
&lt;P&gt;
It can have the following possible entries:
&lt;UL&gt;
	&lt;LI&gt; null, set to null in the database. This is the default behavior&lt;/LI&gt;
	&lt;LI&gt;empty, save as an empty string in the database&lt;/LI&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	deleteValue
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
This attribute is used when the data source data contains a flag indicating that data should be deleted. If in the CSV file, this column contains a value equals the deleteValue, this row is deleted.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;

&lt;/TABLE&gt;        	
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="ValueHandler" type="_config:ValueHandler" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:documentation>
            		  This node can be used to provide some extra logic to resolve the value.
            		</xsd:documentation>
            	</xsd:annotation>
        	</xsd:element>
        </xsd:sequence>
        <xsd:attribute name="xpath" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="value" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="valueFrom" type="xsd:string" use="optional" form="unqualified"></xsd:attribute> 
        <xsd:attribute name="empty" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="deleteValue" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
    </xsd:complexType>
    
        <xsd:complexType name="Table">    	
        <xsd:annotation>
        	<xsd:documentation>
        	
&lt;P&gt;                	
This node defines a list of physical tables and columns and the data mapping to them.   The data for each table column can come from:
&lt;/P&gt;
&lt;UL&gt;
	&lt;LI&gt;The data read by the data reader. (Default)&lt;/LI&gt;
	&lt;LI&gt;A fixed value.&lt;/LI&gt;
	&lt;LI&gt;The business context.&lt;/LI&gt;
	&lt;LI&gt;An ID resolution.&lt;/LI&gt;
&lt;/UL&gt;
        	
&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	name
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
The name of the table.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
   &lt;TR&gt;
    &lt;TD&gt;
	deleteKey
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
The optional delete key. 
&lt;/P&gt;
&lt;P&gt;
The optional deleteKey and deleteValue are for inline deletion support, where the flag for deletion is contained in the data
being read by the data reader.
&lt;/P&gt;
&lt;P&gt;
For example, if in the configuration: 
&lt;UL&gt;
	&lt;LI&gt;deleteKey="Delete"&lt;/LI&gt;
	&lt;LI&gt;deleteValue="1"&lt;/LI&gt;
&lt;/UL&gt;
When the input data contains Delete=1, this row in the table will be deleted.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
 &lt;TR&gt;
    &lt;TD&gt;
	deleteValue
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
The optional delete value. 
&lt;/P&gt;
&lt;P&gt;
The optional deleteKey and deleteValue are for inline deletion support, where the flag for deletion is contained in the data
being read by the data reader.
&lt;/P&gt;
&lt;P&gt;
For example, if in the configuration: 
&lt;UL&gt;
	&lt;LI&gt;deleteKey="Delete"&lt;/LI&gt;
	&lt;LI&gt;deleteValue="1"&lt;/LI&gt;
&lt;/UL&gt;
When the input data contains Delete=1, this row in the table will be deleted.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;

  &lt;TR&gt;
    &lt;TD&gt;
 excludeUnListedColumns
    &lt;/TD&gt;

    &lt;TD&gt;
 Boolean
    &lt;/TD&gt;
    &lt;TD&gt;
 No
    &lt;/TD&gt;
    &lt;TD&gt;
 N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
A flag to indicate whether to exclude all columns which are not listed in this table configuration. 
&lt;/P&gt;
&lt;P&gt;
If it is true, the column exclusion list defined earlier for this table will be ignored. 
&lt;/P&gt;
&lt;P&gt;
The default for this flag is false when it is not specified.
&lt;/P&gt;
&lt;P&gt;
See the above documentation about the column exclusion list.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;

&lt;/TABLE&gt;            
        	
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="TableHandler" type="_config:TableHandler" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:documentation>
            		  This node can be used to define a custom table handler to return some extra rows.
            		</xsd:documentation>
            	</xsd:annotation>
        	</xsd:element>
        	    		
            <xsd:element name="Column" type="_config:Column" minOccurs="1" maxOccurs="unbounded">
            	<xsd:annotation>
            		<xsd:documentation>
&lt;P&gt;                	
This node defines a table column and the data mapping to it.   The data for each table column can come from:
&lt;/P&gt;
&lt;UL&gt;
	&lt;LI&gt;The data read by the data reader. (Default)&lt;/LI&gt;
	&lt;LI&gt;A fixed value.&lt;/LI&gt;
	&lt;LI&gt;The business context.&lt;/LI&gt;
	&lt;LI&gt;An ID resolution.&lt;/LI&gt;
&lt;/UL&gt;            		
            		</xsd:documentation>
            	</xsd:annotation></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="deleteKey" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="deleteValue" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="excludeUnListedColumns" type="xsd:boolean" use="optional" form="unqualified"></xsd:attribute>        
    </xsd:complexType>

    <xsd:complexType name="Column">    	
        <xsd:annotation>
        	<xsd:documentation>
&lt;P&gt;                	
This node defines a table column and the data mapping to it.   The data for each table column can come from:
&lt;/P&gt;
&lt;UL&gt;
	&lt;LI&gt;The data read by the data reader. (Default)&lt;/LI&gt;
	&lt;LI&gt;A fixed value.&lt;/LI&gt;
	&lt;LI&gt;The business context.&lt;/LI&gt;
	&lt;LI&gt;An ID resolution.&lt;/LI&gt;
&lt;/UL&gt; 

&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	name
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
The name of the column.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
   &lt;TR&gt;
    &lt;TD&gt;
	value
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
The value to set for the column.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
  
 &lt;TR&gt;
    &lt;TD&gt;
	valueFrom
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	No
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;
&lt;P&gt;
This attribute describes where the value for the table column is coming from. 
&lt;/P&gt;
&lt;P&gt;
It can have the following possible entries:
&lt;UL&gt;
	&lt;LI&gt;Fixed - The value specified is fixed value and should be set for the property.&lt;/LI&gt;
	&lt;LI&gt;InputData - The value is from the input data.&lt;/LI&gt;
	&lt;LI&gt;BusinessContext - The value is from the business context service.&lt;/LI&gt;
	&lt;LI&gt;IDResolve - The value is from an ID resolution.&lt;/LI&gt;
&lt;/UL&gt;
The default valueFrom setting is InputData. If using InputData there is no need to provide the valueFrom attribute.
&lt;/P&gt;
    &lt;/TD&gt;
  &lt;/TR&gt;
&lt;/TABLE&gt;
        	
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>    		
            <xsd:element name="ValueHandler" type="_config:ValueHandler" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:documentation>This node can be used to define a custom value handler. It is called in the TableObjectBuilder</xsd:documentation>
            	</xsd:annotation></xsd:element>
            <xsd:element name="IDResolve" type="_config:IDResolve" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:documentation>This node should be used if the value for a column needs to be resolved.</xsd:documentation>
            	</xsd:annotation></xsd:element>
            <xsd:element name="ColumnHandler" type="_config:ColumnHandler" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:documentation>This node can be used to define a custom column handler. It is called in the TableObjectMediator</xsd:documentation>
            	</xsd:annotation></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="value" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="valueFrom" type="xsd:string" use="optional" form="unqualified"></xsd:attribute> 
        <xsd:attribute name="empty" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="defaultValue" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="defaultValueFrom" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
    </xsd:complexType>

    <xsd:complexType name="TableHandler">
        <xsd:annotation>
        	<xsd:documentation>
        	The TableHandler is a custom extension point which can create some extra rows 
        	when loading one row for the table. It contains a mandatory attribute className and 
        	a list of optional parameters. 
        	</xsd:documentation>
        </xsd:annotation>
         <xsd:sequence>
            <xsd:element name="Parameter" type="_config:Parameter" minOccurs="0" maxOccurs="unbounded">
         	</xsd:element>
         </xsd:sequence>
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute> 
    </xsd:complexType>
    
    <xsd:complexType name="ColumnHandler">
        <xsd:annotation>
        	<xsd:documentation>
        	The ColumnHandler is a custom extension point which can resolve column value based
        	on the input parameters. It contains a mandatory attribute className and 
        	a list of optional parameters. 
        	</xsd:documentation>
        </xsd:annotation>
         <xsd:sequence>
            <xsd:element name="Parameter" type="_config:Parameter" minOccurs="0" maxOccurs="unbounded">
         	</xsd:element>
         </xsd:sequence>
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute> 
    </xsd:complexType>

    <xsd:complexType name="ValueHandler">
        <xsd:annotation>
        	<xsd:documentation>
        	The ValueHandler is a custom extension point which can resolve value based
        	on the input parameter. It contains a mandatory attribute className and 
        	a list of optional parameters. 
        	</xsd:documentation>
        </xsd:annotation>
         <xsd:sequence>
            <xsd:element name="Parameter" type="_config:Parameter" minOccurs="0" maxOccurs="unbounded">
         	</xsd:element>
         </xsd:sequence>
        <xsd:attribute name="className" type="xsd:string" use="required" form="unqualified"></xsd:attribute> 
    </xsd:complexType>
    
    <xsd:complexType name="Parameter">
        <xsd:annotation>
        	<xsd:documentation>
        	The Parameter element defines an optional parameter to be passed to a TableHandler or ColumnHandler.
        	It contains two mandatory attributes: name and value. It contains one optional parameter: valueFrom.
        	If the valueFrom is not specified, the default valueFrom is InputData. It has the same meaning as in the
        	Column definition. 
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required" form="unqualified"></xsd:attribute> 
        <xsd:attribute name="value" type="xsd:string" use="required" form="unqualified"></xsd:attribute> 
        <xsd:attribute name="valueFrom" type="xsd:string" use="optional" form="unqualified"></xsd:attribute> 
    </xsd:complexType>
    
    <xsd:complexType name="IDResolve">
        <xsd:annotation>
        	<xsd:documentation>The IDResolve element has the following attributes:
.	tableName -  the table name. It is mandatory.
.	primaryKeyColumnName - the primary key column name to be resolved. It is optional if the primary key for this table has only one column. Otherwise it is mandatory.
.	generateNewKey - a Boolean value to indicate if a new key will be generated if the ID cannot be resolved in the database. It is optional. The default is false.
.   returnNullIfUnresolved - A Boolean value to indicate whether it will return null if the ID cannot be resolved and generateNewKey is false. The default is false. That is, if it is false and if the ID cannot be resolved and generateNewKey is false, an exception will be thrown.

The IDResolve element contains optional UniqueIndexColumn elements:
.	If the tableName in the IDResolve element is the same as the name in the Table, the UniqueIndexColumn element can be optional to use the column element defined in the Table element.
.	In the data load insert mode, if the generateNewKey is true, you don???t need to specify the UniqueIndexColumn. The ID resolver will always get a new generated key.
</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>    		
            <xsd:element name="UniqueIndexColumn" type="_config:UniqueIndexColumn" minOccurs="0" maxOccurs="unbounded">
            	<xsd:annotation>
            		<xsd:documentation>The UniqueIndexColumn element contains the following attributes:
.	name - the column name. It is mandatory.
.	value - the column value. It is mandatory. It is usually a value key and the real column value will be determined by the valueFrom attribute and also the input data.
.	valueFrom - It is used to indicate how the column value in the value attribute is determined. It is optional. 

The possible values for the valueFrom are:
.	InputData - It is the default. That is, if the valueFrom is not specified, the default is this value.
.	Fixed - It mens that the column value is fixed with the value defined in the value attribute.
.	BusinessContext - It means that the column value is from the business context.
.	IDResolve - It means that the column value will be resolved by the ID resolver. In this case, the column may have an optional IDResolve element to indicate how to resolve the ID. If the IDResolve element is not defined for this column, the value must be resolved before and will be assigned here.
</xsd:documentation>
            	</xsd:annotation></xsd:element>
        </xsd:sequence>
        <xsd:attribute name="tableName" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="primaryKeyColumnName" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="generateNewKey" type="xsd:boolean" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="returnNullIfUnresolved" type="xsd:boolean" use="optional" form="unqualified"></xsd:attribute>        
    </xsd:complexType>

    <xsd:complexType name="UniqueIndexColumn">    	
        <xsd:annotation>
        	<xsd:documentation>The UniqueIndexColumn element contains the following attributes:
.	name - the column name. It is mandatory.
.	value - the column value. It is mandatory. It is usually a value key and the real column value will be determined by the valueFrom attribute and also the input data.
.	valueFrom - It is used to indicate how the column value in the value attribute is determined. It is optional. 

The possible values for the valueFrom are:
.	InputData - It is the default. That is, if the valueFrom is not specified, the default is this value.
.	Fixed - It mens that the column value is fixed with the value defined in the value attribute.
.	BusinessContext - It means that the column value is from the business context.
.	IDResolve - It means that the column value will be resolved by the ID resolver. In this case, the column may have an optional IDResolve element to indicate how to resolve the ID. If the IDResolve element is not defined for this column, the value must be resolved before and will be assigned here.
</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="ColumnHandler" type="_config:ColumnHandler" minOccurs="0" maxOccurs="1">
        		<xsd:annotation>
            		<xsd:documentation>This node can be used to define a custom column handler.</xsd:documentation>
            	</xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="value" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="valueFrom" type="xsd:string" use="optional" form="unqualified"></xsd:attribute> 
        <xsd:attribute name="empty" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="defaultValue" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="defaultValueFrom" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="skipIDResolveIfNull" type="xsd:boolean" use="optional" form="unqualified"></xsd:attribute>        
    </xsd:complexType>

    <xsd:complexType name="ColumnExclusionList">
        <xsd:annotation>
        	<xsd:documentation>
        	
&lt;P&gt;
Lists columns within tables that should not be modified by the data load utility.
&lt;/P&gt;

			</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>    		
            <xsd:element name="table" type="_config:ExclusionTable" minOccurs="0" maxOccurs="unbounded">
            	<xsd:annotation>
            		<xsd:documentation>A table that is excluded from any changes by the utility.
</xsd:documentation>
            	</xsd:annotation></xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="CompareColumns">
        <xsd:annotation>
        	<xsd:documentation>
        	
&lt;P&gt;
Lists columns within tables that should be included or excluded when comparing between the input data and the data in the database..
&lt;/P&gt;

			</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="tableName" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="includeColumns" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
        <xsd:attribute name="excludeColumns" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="ExclusionTable">    	
        <xsd:annotation>
        	<xsd:documentation>

&lt;TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""&gt;
  &lt;TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"&gt;
    &lt;TD&gt;
	Attribute	
    &lt;/TD&gt;
    &lt;TD&gt;
	Type
    &lt;/TD&gt;
    &lt;TD&gt;
	Required
    &lt;/TD&gt;
    &lt;TD&gt;
	Default Setting
    &lt;/TD&gt;
    &lt;TD&gt;
	Description
    &lt;/TD&gt;
  &lt;/TR&gt;


  &lt;TR&gt;
    &lt;TD&gt;
	name
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
The name of the table to exclude.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;
  
  
 &lt;TR&gt;
    &lt;TD&gt;
	columns
    &lt;/TD&gt;
    &lt;TD&gt;
	String
    &lt;/TD&gt;
    &lt;TD&gt;
	Yes
    &lt;/TD&gt;
    &lt;TD&gt;
	N/A
    &lt;/TD&gt;
    &lt;TD&gt;

&lt;P&gt;
A comma separated list of columns from the table that should not be modified.
&lt;/P&gt;

    &lt;/TD&gt;
  &lt;/TR&gt;
    
&lt;/TABLE&gt;
        	
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required" form="unqualified"></xsd:attribute>        
        <xsd:attribute name="columns" type="xsd:string" use="required" form="unqualified"></xsd:attribute>
        <xsd:attribute name="forUpdateOnly" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="context">
    	<xsd:annotation>
    		<xsd:documentation>
    			Defines the business context keys required for this load
    			and which context they can be found in.
    		</xsd:documentation>
    	</xsd:annotation>
    	<xsd:attribute name="key" type="xsd:string" use="required" form="unqualified">
    	    	<xsd:annotation>
    				<xsd:documentation>
    					The key used in the business context. It is
    					mandatory.
    				</xsd:documentation>
    			</xsd:annotation>
    	</xsd:attribute>
    	<xsd:attribute name="name" type="xsd:string" use="required" form="unqualified">
    	    	<xsd:annotation>
    				<xsd:documentation>
    					The context name (together with the
    					propertyName) from which the key will be
    					resolved. It is mandatory.
    				</xsd:documentation>
    			</xsd:annotation>
    	</xsd:attribute>
    	<xsd:attribute name="propertyName" type="xsd:string" use="required" form="unqualified">
    	    	<xsd:annotation>
    				<xsd:documentation>
    					The property name (together with the name) from
    					which the key will be resolved. It is mandatory.
    				</xsd:documentation>
    			</xsd:annotation>
    	</xsd:attribute>
    	<xsd:attribute name="defaultValue" type="xsd:string" use="optional" form="unqualified">
    	    	<xsd:annotation>
    				<xsd:documentation>
    					If the key cannot be resolved, the default value
    					is used. It is optional.
    				</xsd:documentation>
    			</xsd:annotation>
    	</xsd:attribute>
    </xsd:complexType>
    
   	<xsd:complexType name="Query">
        <xsd:annotation>
        	<xsd:documentation>
				Defines an SQL query
			</xsd:documentation>
		</xsd:annotation>
        <xsd:sequence>
          <xsd:element name="SQL" type="xsd:string" minOccurs="1" maxOccurs="1">
          </xsd:element>
          <xsd:element name="Param" type="_config:Param" minOccurs="0" maxOccurs="unbounded">
          </xsd:element>
          <xsd:element name="ColumnMapping" type="_config:ColumnMapping" minOccurs="0" maxOccurs="unbounded">
          </xsd:element>
        </xsd:sequence>       
        <xsd:attribute name="name" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
   	</xsd:complexType>
   	<xsd:complexType name="AssociatedQuery">
        <xsd:annotation>
        	<xsd:documentation>
				Defines associated query
			</xsd:documentation>
		</xsd:annotation>
        <xsd:sequence>
          <xsd:element name="Query" type="_config:Query" minOccurs="0" maxOccurs="unbounded">
          </xsd:element>
        </xsd:sequence>       
   	</xsd:complexType>
	<xsd:complexType name="Param">
        <xsd:annotation>
        	<xsd:documentation>
				Define a parameter for the SQL
			</xsd:documentation>
		</xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="ValueHandler" type="_config:ValueHandler" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:documentation>
            		  This node can be used to provide some extra logic to resolve the value.
            		</xsd:documentation>
            	</xsd:annotation>
        	</xsd:element>
        </xsd:sequence>       
        <xsd:attribute name="name" type="xsd:string" use="required" form="unqualified"></xsd:attribute>
        <xsd:attribute name="value" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
        <xsd:attribute name="valueFrom" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
        <xsd:attribute name="type" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
	</xsd:complexType>

    <xsd:complexType name="ColumnMapping">
        <xsd:annotation>
        	<xsd:documentation>
        	The ColumnMapping is to map from the SQL select column name to a more user friendly name.  
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
        	<xsd:element name="ValueHandler" type="_config:ValueHandler" minOccurs="0" maxOccurs="1">
            	<xsd:annotation>
            		<xsd:documentation>
            		  This node can be used to provide some extra logic to resolve the value.
            		</xsd:documentation>
            	</xsd:annotation>
        	</xsd:element>
        </xsd:sequence>       
        <xsd:attribute name="name" type="xsd:string" use="required" form="unqualified"></xsd:attribute> 
        <xsd:attribute name="value" type="xsd:string" use="required" form="unqualified"></xsd:attribute> 
    </xsd:complexType>

    <!--<xsd:complexType name="ExclusionCondition">
    	<xsd:annotation>
			<xsd:documentation>
				&lt;P&gt; This node defines the exclusion condition. &lt;P&gt;
			</xsd:documentation>
		</xsd:annotation>
    	<xsd:attribute name="name" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
    	<xsd:attribute name="value" type="xsd:string" use="optional" form="unqualified"></xsd:attribute>
    </xsd:complexType>
--></xsd:schema>